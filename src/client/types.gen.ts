// This file is auto-generated by @hey-api/openapi-ts

export type ActivityCategory = {
  readonly id?: string;
  readonly $type?: string;
};

export type ActivityCursorPage = {
  readonly id?: string;
  readonly activities?: Array<ActivityItem>;
  readonly afterCursor?: string;
  readonly beforeCursor?: string;
  readonly hasAfter?: boolean;
  readonly hasBefore?: boolean;
  readonly reverse?: boolean;
  readonly $type?: string;
};

export type ActivityItem = {
  readonly id?: string;
  readonly added?: {
    [key: string]: unknown;
  };
  author?: User;
  category?: ActivityCategory;
  field?: FilterField;
  readonly removed?: {
    [key: string]: unknown;
  };
  readonly target?: {
    [key: string]: unknown;
  };
  readonly targetMember?: string;
  readonly timestamp?: number;
  readonly $type?: string;
};

export type Agile = {
  readonly id?: string;
  name?: string;
  owner?: User;
  visibleFor?: UserGroup;
  visibleForProjectBased?: boolean;
  updateableBy?: UserGroup;
  updateableByProjectBased?: boolean;
  readSharingSettings?: AgileSharingSettings;
  updateSharingSettings?: AgileSharingSettings;
  orphansAtTheTop?: boolean;
  hideOrphansSwimlane?: boolean;
  estimationField?: CustomField;
  originalEstimationField?: CustomField;
  projects?: Array<Project>;
  sprints?: Array<Sprint>;
  currentSprint?: Sprint;
  columnSettings?: ColumnSettings;
  swimlaneSettings?: SwimlaneSettings;
  sprintsSettings?: SprintsSettings;
  colorCoding?: ColorCoding;
  status?: AgileStatus;
  readonly $type?: string;
};

/**
 * Represents settings for a single board column
 */
export type AgileColumn = {
  readonly id?: string;
  readonly presentation?: string;
  readonly isResolved?: boolean;
  ordinal?: number;
  parent?: ColumnSettings;
  wipLimit?: WipLimit;
  fieldValues?: Array<AgileColumnFieldValue>;
  readonly $type?: string;
};

/**
 * Represents a field value or values, parameterizing agile column.
 */
export type AgileColumnFieldValue = DatabaseAttributeValue & {
  $type?: "AgileColumnFieldValue";
} & {
  readonly id?: string;
  name?: string;
  readonly isResolved?: boolean;
};

/**
 * Stores users and groups that have access to an agile board.
 */
export type AgileSharingSettings = {
  readonly id?: string;
  permittedGroups?: Array<UserGroup>;
  permittedUsers?: Array<User>;
  readonly $type?: string;
};

/**
 * Shows if the board has any configuration problems.
 */
export type AgileStatus = {
  readonly id?: string;
  readonly valid?: boolean;
  readonly hasJobs?: boolean;
  readonly errors?: Array<string>;
  readonly warnings?: Array<string>;
  readonly $type?: string;
};

/**
 * Represents a group containing all users including guest.
 */
export type AllUsersGroup = UserGroup & {
  $type?: "AllUsersGroup";
};

export type AppearanceSettings = {
  readonly id?: string;
  timeZone?: TimeZoneDescriptor;
  dateFieldFormat?: DateFormatDescriptor;
  logo?: Logo;
  readonly $type?: string;
};

export type Article = BaseArticle & {
  $type?: "Article";
} & {
  readonly id?: string;
  attachments?: Array<ArticleAttachment>;
  childArticles?: Array<Article>;
  comments?: Array<ArticleComment>;
  content?: string;
  readonly created?: number;
  externalArticle?: ExternalArticle;
  readonly hasChildren?: boolean;
  hasStar?: boolean;
  readonly idReadable?: string;
  readonly ordinal?: number;
  parentArticle?: Article;
  readonly pinnedComments?: Array<ArticleComment>;
  project?: Project;
  reporter?: User;
  summary?: string;
  tags?: Array<Tag>;
  readonly updated?: number;
  updatedBy?: User;
  visibility?: Visibility;
};

export type ArticleAttachment = {
  readonly id?: string;
  name?: string;
  author?: User;
  readonly created?: number;
  readonly updated?: number;
  readonly size?: number;
  readonly extension?: string;
  readonly charset?: string;
  readonly mimeType?: string;
  readonly metaData?: string;
  readonly draft?: boolean;
  readonly removed?: boolean;
  base64Content?: string;
  readonly url?: string;
  visibility?: Visibility;
  article?: BaseArticle;
  comment?: ArticleComment;
  readonly $type?: string;
};

export type ArticleComment = {
  readonly id?: string;
  article?: Article;
  attachments?: Array<ArticleAttachment>;
  author?: User;
  readonly created?: number;
  pinned?: boolean;
  reactions?: Array<Reaction>;
  text?: string;
  readonly updated?: number;
  visibility?: Visibility;
  readonly $type?: string;
};

/**
 * Represents a change in the list of attachments of an issue.
 */
export type AttachmentActivityItem = CreatedDeletedActivityItem & {
  readonly id?: string;
  readonly added?: Array<IssueAttachment>;
  readonly removed?: Array<IssueAttachment>;
  target?: IssueAttachment;
};

export type AttributeBasedSwimlaneSettings = SwimlaneSettings & {
  $type?: "AttributeBasedSwimlaneSettings";
} & {
  readonly id?: string;
  field?: FilterField;
  values?: Array<SwimlaneEntityAttributeValue>;
};

/**
 * Represents an error that appeared during the backup.
 */
export type BackupError = {
  readonly id?: string;
  readonly date?: number;
  readonly errorMessage?: string;
  readonly $type?: string;
};

export type BackupFile = {
  readonly id?: string;
  readonly name?: string;
  readonly size?: number;
  readonly creationDate?: number;
  readonly link?: string;
  readonly $type?: string;
};

export type BackupStatus = {
  readonly id?: string;
  readonly backupInProgress?: boolean;
  readonly backupCancelled?: boolean;
  backupError?: BackupError;
  readonly $type?: string;
};

/**
 * Represents a base article entity.
 */
export type BaseArticle = {
  readonly id?: string;
  attachments?: Array<ArticleAttachment>;
  content?: string;
  reporter?: User;
  summary?: string;
  visibility?: Visibility;
  readonly $type?: string;
};

/**
 * Represents a set of field values in YouTrack.
 */
export type BaseBundle = Bundle & {
  $type?: "BaseBundle";
} & {
  readonly id?: string;
  values?: Array<BundleElement>;
};

/**
 * Represents a basic ancestor for work items.
 */
export type BaseWorkItem = {
  readonly id?: string;
  readonly $type?: string;
};

/**
 * Represents an integration with a VCS repository hosted on bitbucket.org.
 */
export type BitBucketChangesProcessor = VcsHostingChangesProcessor & {
  readonly id?: string;
  server?: BitBucketServer;
};

/**
 * Represents a cloud Bitbucket server.
 */
export type BitBucketServer = VcsHostingServer & {
  readonly id?: string;
  url?: string;
};

/**
 * Represents an integration with a VCS repository on a self-hosted Bitbucket server.
 */
export type BitbucketStandaloneChangesProcessor = VcsHostingChangesProcessor & {
  readonly id?: string;
  server?: BitbucketStandaloneServer;
};

/**
 * Represents a self-hosted Bitbucket server.
 */
export type BitbucketStandaloneServer = VcsHostingServer & {
  readonly id?: string;
  url?: string;
};

export type BuildBundle = BaseBundle & {
  readonly id?: string;
  values?: Array<BuildBundleElement>;
};

/**
 * Default settings for the build-type field.
 */
export type BuildBundleCustomFieldDefaults = BundleCustomFieldDefaults & {
  readonly id?: string;
  bundle?: BuildBundle;
  defaultValues?: Array<BuildBundleElement>;
};

export type BuildBundleElement = BundleElement & {
  $type?: "BuildBundleElement";
} & {
  readonly id?: string;
  assembleDate?: number;
};

/**
 * Represents project settings for a build field.
 */
export type BuildProjectCustomField = BundleProjectCustomField & {
  readonly id?: string;
  bundle?: BuildBundle;
  defaultValues?: Array<BuildBundleElement>;
};

export type Bundle = {
  readonly id?: string;
  readonly isUpdateable?: boolean;
  readonly $type?: string;
};

/**
 * Represents custom field default settings for enumerated fields.
 */
export type BundleCustomFieldDefaults = CustomFieldDefaults & {
  $type?: "BundleCustomFieldDefaults";
} & {
  readonly id?: string;
};

/**
 * Represents a field value in YouTrack.
 */
export type BundleElement = {
  readonly id?: string;
  name?: string;
  bundle?: Bundle;
  description?: string;
  archived?: boolean;
  ordinal?: number;
  color?: FieldStyle;
  readonly hasRunningJob?: boolean;
  readonly $type?: string;
};

/**
 * Represents project settings for a custom field with a defined set of values.
 */
export type BundleProjectCustomField = ProjectCustomField & {
  $type?: "BundleProjectCustomField";
};

/**
 * The basic entity that represents a VCS or a build server integration configured for a project.
 */
export type ChangesProcessor = {
  readonly id?: string;
  server?: VcsServer;
  project?: Project;
  relatedProjects?: Array<Project>;
  enabled?: boolean;
  visibleForGroups?: Array<UserGroup>;
  addComments?: boolean;
  lookupIssuesInBranchName?: boolean;
  readonly $type?: string;
};

/**
 * Describes rules that define which colors are used for cards on the agile board.
 */
export type ColorCoding = {
  readonly id?: string;
  readonly $type?: string;
};

/**
 * Agile board columns settings.
 */
export type ColumnSettings = {
  readonly id?: string;
  field?: CustomField;
  columns?: Array<AgileColumn>;
  readonly $type?: string;
};

/**
 * Stores the restricted visibility settings for the command.
 */
export type CommandLimitedVisibility = CommandVisibility & {
  $type?: "CommandLimitedVisibility";
} & {
  readonly id?: string;
  readonly permittedGroups?: Array<UserGroup>;
  readonly permittedUsers?: Array<User>;
};

export type CommandList = {
  readonly id?: string;
  comment?: string;
  visibility?: CommandVisibility;
  query?: string;
  caret?: number;
  silent?: boolean;
  runAs?: string;
  readonly commands?: Array<ParsedCommand>;
  issues?: Array<Issue>;
  readonly suggestions?: Array<Suggestion>;
  readonly $type?: string;
};

/**
 * Comment is visible for all the users who can read the issue.
 */
export type CommandUnlimitedVisibility = CommandVisibility & {
  $type?: "CommandUnlimitedVisibility";
};

/**
 * Visibility settings of the comment that is added along with the command.
 */
export type CommandVisibility = {
  readonly id?: string;
  readonly $type?: string;
};

/**
 * Represents a change in the comments of an issue.
 */
export type CommentActivityItem = CreatedDeletedActivityItem & {
  readonly id?: string;
  readonly added?: Array<IssueComment>;
  authorGroup?: UserGroup;
  readonly removed?: Array<IssueComment>;
  target?: IssueComment;
};

/**
 * Represents a change in the `attachments` attribute of an IssueComment.
 */
export type CommentAttachmentsActivityItem = MultiValueActivityItem & {
  readonly id?: string;
  readonly added?: Array<IssueAttachment>;
  readonly removed?: Array<IssueAttachment>;
  target?: IssueComment;
};

/**
 * Represents an action when an entity is created or deleted in an issue. For example, a new comment is created in the issue.
 */
export type CreatedDeletedActivityItem = ActivityItem & {
  $type?: "CreatedDeletedActivityItem";
} & {
  readonly id?: string;
};

export type CustomField = {
  readonly id?: string;
  name?: string;
  localizedName?: string;
  fieldType?: FieldType;
  isAutoAttached?: boolean;
  isDisplayedInIssueList?: boolean;
  ordinal?: number;
  aliases?: string;
  fieldDefaults?: CustomFieldDefaults;
  readonly hasRunningJob?: boolean;
  readonly isUpdateable?: boolean;
  instances?: Array<ProjectCustomField>;
  readonly $type?: string;
};

/**
 * Represents an activity that affects a custom field of an issue.
 */
export type CustomFieldActivityItem = ActivityItem & {
  $type?: "CustomFieldActivityItem";
} & {
  readonly id?: string;
  readonly added?: {
    [key: string]: unknown;
  };
  readonly removed?: {
    [key: string]: unknown;
  };
  target?: Issue;
};

/**
 * Represents the condition for showing a custom field.
 */
export type CustomFieldCondition = {
  readonly id?: string;
  parent?: ProjectCustomField;
  readonly $type?: string;
};

export type CustomFieldDefaults = {
  readonly id?: string;
  canBeEmpty?: boolean;
  emptyFieldText?: string;
  isPublic?: boolean;
  parent?: CustomField;
  readonly $type?: string;
};

/**
 * Represents a custom field of the issue.
 */
export type CustomFilterField = FilterField & {
  $type?: "CustomFilterField";
} & {
  readonly id?: string;
  customField?: CustomField;
};

/**
 * Represents string reference to the value.
 */
export type DatabaseAttributeValue = {
  readonly id?: string;
  readonly $type?: string;
};

export type DatabaseBackupSettings = {
  readonly id?: string;
  location?: string;
  filesToKeep?: number;
  cronExpression?: string;
  archiveFormat?: "TAR_GZ" | "ZIP";
  isOn?: boolean;
  readonly availableDiskSpace?: number;
  notifiedUsers?: Array<User>;
  backupStatus?: BackupStatus;
  readonly $type?: string;
};

/**
 * Represents date format.
 */
export type DateFormatDescriptor = {
  readonly id?: string;
  readonly presentation?: string;
  readonly pattern?: string;
  readonly datePattern?: string;
  readonly $type?: string;
};

/**
 * Represents a date-type custom field in the issue.
 */
export type DateIssueCustomField = SimpleIssueCustomField & {
  readonly id?: string;
  readonly value?: {
    [key: string]: unknown;
  };
};

/**
 * Represents a vote for duplicates of the issue.
 */
export type DuplicateVote = {
  readonly id?: string;
  issue?: Issue;
  user?: User;
  readonly $type?: string;
};

/**
 * Represents the duration value and its visual presentation.
 */
export type DurationValue = {
  readonly id?: string;
  readonly minutes?: number;
  readonly presentation?: string;
  readonly $type?: string;
};

/**
 * Represents email settings for this YouTrack installation.
 */
export type EmailSettings = {
  readonly id?: string;
  isEnabled?: boolean;
  host?: string;
  port?: number;
  mailProtocol?: "SMTP" | "SMTPS" | "SMTP_TLS";
  anonymous?: boolean;
  login?: string;
  sslKey?: StorageEntry;
  from?: string;
  replyTo?: string;
  readonly $type?: string;
};

export type EnumBundle = BaseBundle & {
  readonly id?: string;
  values?: Array<EnumBundleElement>;
};

/**
 * Default settings for the enum-type field.
 */
export type EnumBundleCustomFieldDefaults = BundleCustomFieldDefaults & {
  readonly id?: string;
  bundle?: EnumBundle;
  defaultValues?: Array<EnumBundleElement>;
};

export type EnumBundleElement = LocalizableBundleElement & {
  readonly id?: string;
};

/**
 * Represents project settings for the enum field.
 */
export type EnumProjectCustomField = BundleProjectCustomField & {
  readonly id?: string;
  bundle?: EnumBundle;
  defaultValues?: Array<EnumBundleElement>;
};

/**
 * Represents a transition from one value to another for a custom field that is managed by a state-machine rule in workflow.
 */
export type Event = {
  readonly id?: string;
  readonly presentation?: string;
  readonly $type?: string;
};

/**
 * For an article that was imported from another service, this entity represents the reference to the article in the external system.
 */
export type ExternalArticle = {
  readonly id?: string;
  readonly name?: string;
  readonly url?: string;
  readonly key?: string;
  readonly $type?: string;
};

/**
 * For an issue that was imported from another service, represents the reference to the issue in the external system.
 */
export type ExternalIssue = {
  readonly id?: string;
  readonly name?: string;
  readonly url?: string;
  readonly key?: string;
  readonly $type?: string;
};

/**
 * Sets a card color based on a value of some custom field.
 */
export type FieldBasedColorCoding = ColorCoding & {
  $type?: "FieldBasedColorCoding";
} & {
  readonly id?: string;
  prototype?: CustomField;
};

/**
 * Represents the condition for showing a custom field.
 */
export type FieldBasedCondition = CustomFieldCondition & {
  $type?: "FieldBasedCondition";
} & {
  readonly id?: string;
  field?: BundleProjectCustomField;
  values?: Array<BundleElement>;
  showForNullValue?: boolean;
};

/**
 * Represents the style settings of the field in YouTrack.
 */
export type FieldStyle = {
  readonly id?: string;
  readonly background?: string;
  readonly foreground?: string;
  readonly $type?: string;
};

export type FieldType = {
  readonly id?: string;
  readonly $type?: string;
};

/**
 * Represents an issue property, which can be a predefined field, a custom field, a link, and so on.
 */
export type FilterField = {
  readonly id?: string;
  readonly presentation?: string;
  readonly name?: string;
  readonly $type?: string;
};

export type GeneralUserProfile = {
  readonly id?: string;
  dateFieldFormat?: DateFormatDescriptor;
  timezone?: TimeZoneDescriptor;
  locale?: LocaleDescriptor;
  readonly $type?: string;
};

/**
 * Represents a GitHub integration configured for a project.
 */
export type GitHubChangesProcessor = VcsHostingChangesProcessor & {
  readonly id?: string;
  server?: GitHubServer;
};

/**
 * Represents a GitHub server.
 */
export type GitHubServer = VcsHostingServer & {
  readonly id?: string;
  url?: string;
};

/**
 * Represents a GitLab integration configured for a project.
 */
export type GitLabChangesProcessor = VcsHostingChangesProcessor & {
  readonly id?: string;
  server?: GitLabServer;
};

/**
 * Represents a GitLab server.
 */
export type GitLabServer = VcsHostingServer & {
  readonly id?: string;
  url?: string;
};

/**
 * Represents a Gitea integration configured for a project.
 */
export type GiteaChangesProcessor = VcsHostingChangesProcessor & {
  readonly id?: string;
  server?: GiteaServer;
};

/**
 * Represents a Gitea server.
 */
export type GiteaServer = VcsHostingServer & {
  readonly id?: string;
  url?: string;
};

export type GlobalSettings = {
  readonly id?: string;
  systemSettings?: SystemSettings;
  notificationSettings?: NotificationSettings;
  restSettings?: RestCorsSettings;
  appearanceSettings?: AppearanceSettings;
  localeSettings?: LocaleSettings;
  license?: License;
  readonly $type?: string;
};

export type GlobalTimeTrackingSettings = {
  readonly id?: string;
  readonly workItemTypes?: Array<WorkItemType>;
  workTimeSettings?: WorkTimeSettings;
  readonly attributePrototypes?: Array<WorkItemAttributePrototype>;
  readonly $type?: string;
};

/**
 * Represents a Gogs integration configured for a project.
 */
export type GogsChangesProcessor = VcsHostingChangesProcessor & {
  readonly id?: string;
  server?: GogsServer;
};

/**
 * Represents a Gogs server.
 */
export type GogsServer = VcsHostingServer & {
  readonly id?: string;
  url?: string;
};

/**
 * Represents project settings for a group custom field.
 */
export type GroupProjectCustomField = ProjectCustomField & {
  $type?: "GroupProjectCustomField";
} & {
  readonly id?: string;
  defaultValues?: Array<UserGroup>;
};

export type Issue = {
  readonly id?: string;
  attachments?: Array<IssueAttachment>;
  comments?: Array<IssueComment>;
  readonly commentsCount?: number;
  readonly created?: number;
  readonly customFields?: Array<IssueCustomField>;
  description?: string;
  draftOwner?: User;
  externalIssue?: ExternalIssue;
  readonly idReadable?: string;
  readonly isDraft?: boolean;
  readonly links?: Array<IssueLink>;
  readonly numberInProject?: number;
  parent?: IssueLink;
  readonly pinnedComments?: Array<IssueComment>;
  project?: Project;
  reporter?: User;
  readonly resolved?: number;
  subtasks?: IssueLink;
  summary?: string;
  tags?: Array<Tag>;
  readonly updated?: number;
  updater?: User;
  visibility?: Visibility;
  voters?: IssueVoters;
  readonly votes?: number;
  watchers?: IssueWatchers;
  readonly wikifiedDescription?: string;
  readonly $type?: string;
};

export type IssueAttachment = {
  readonly id?: string;
  name?: string;
  author?: User;
  readonly created?: number;
  readonly updated?: number;
  readonly size?: number;
  readonly extension?: string;
  readonly charset?: string;
  readonly mimeType?: string;
  readonly metaData?: string;
  readonly draft?: boolean;
  readonly removed?: boolean;
  base64Content?: string;
  readonly url?: string;
  visibility?: Visibility;
  issue?: Issue;
  comment?: IssueComment;
  readonly thumbnailURL?: string;
  readonly $type?: string;
};

/**
 * Swimlane settings for the case, when each swimlane is represented by an issue and contains this issue's subtasks.
 */
export type IssueBasedSwimlaneSettings = SwimlaneSettings & {
  $type?: "IssueBasedSwimlaneSettings";
} & {
  readonly id?: string;
  field?: FilterField;
  defaultCardType?: SwimlaneValue;
  values?: Array<SwimlaneValue>;
};

export type IssueComment = {
  readonly id?: string;
  attachments?: Array<IssueAttachment>;
  author?: User;
  readonly created?: number;
  deleted?: boolean;
  issue?: Issue;
  pinned?: boolean;
  reactions?: Array<Reaction>;
  text?: string;
  readonly textPreview?: string;
  readonly updated?: number;
  visibility?: Visibility;
  readonly $type?: string;
};

export type IssueCountResponse = {
  readonly id?: string;
  count?: number;
  unresolvedOnly?: boolean;
  query?: string;
  folder?: IssueFolder;
  readonly $type?: string;
};

/**
 * Represents an event when a user creates a new issue.
 */
export type IssueCreatedActivityItem = CreatedDeletedActivityItem & {
  readonly id?: string;
  readonly added?: Array<Issue>;
  readonly removed?: Array<Issue>;
  target?: Issue;
};

export type IssueCustomField = {
  readonly id?: string;
  readonly name?: string;
  projectCustomField?: ProjectCustomField;
  readonly value?: {
    [key: string]: unknown;
  };
  readonly $type?: string;
};

/**
 * Represents an issue folder, such as a project, a saved search, or a tag.
 */
export type IssueFolder = {
  readonly id?: string;
  name?: string;
  readonly $type?: string;
};

/**
 * Stores information about a project where the issue belongs or previously belonged. This entity appears as part of the ProjectActivityItem object.
 */
export type IssueKey = {
  readonly id?: string;
  project?: Project;
  readonly numberInProject?: number;
  readonly $type?: string;
};

export type IssueLink = {
  readonly id?: string;
  direction?: "OUTWARD" | "INWARD" | "BOTH";
  linkType?: IssueLinkType;
  issues?: Array<Issue>;
  readonly trimmedIssues?: Array<Issue>;
  readonly $type?: string;
};

export type IssueLinkType = {
  readonly id?: string;
  name?: string;
  localizedName?: string;
  sourceToTarget?: string;
  localizedSourceToTarget?: string;
  targetToSource?: string;
  localizedTargetToSource?: string;
  directed?: boolean;
  aggregation?: boolean;
  readonly readOnly?: boolean;
  readonly $type?: string;
};

/**
 * Represents an event when a user resolves an issue.
 */
export type IssueResolvedActivityItem = SimpleValueActivityItem & {
  readonly id?: string;
  readonly added?: number;
  readonly removed?: number;
};

/**
 * <p>Deprecated. Use `Tag` instead.</p>
 */
export type IssueTag = Tag;

export type IssueTimeTracker = {
  readonly id?: string;
  workItems?: Array<IssueWorkItem>;
  readonly enabled?: boolean;
  readonly $type?: string;
};

/**
 * Represents users that have voted for the issue or its duplicates.
 */
export type IssueVoters = {
  readonly id?: string;
  hasVote?: boolean;
  readonly original?: Array<User>;
  readonly duplicate?: Array<DuplicateVote>;
  readonly $type?: string;
};

/**
 * Represents a user who subscribed for notifications about an issue.
 */
export type IssueWatcher = {
  readonly id?: string;
  user?: User;
  issue?: Issue;
  isStarred?: boolean;
  readonly $type?: string;
};

/**
 * Represents users that are subscribed to notifications about the issue.
 */
export type IssueWatchers = {
  readonly id?: string;
  hasStar?: boolean;
  issueWatchers?: Array<IssueWatcher>;
  readonly duplicateWatchers?: Array<IssueWatcher>;
  readonly $type?: string;
};

export type IssueWorkItem = BaseWorkItem & {
  $type?: "IssueWorkItem";
} & {
  readonly id?: string;
  author?: User;
  creator?: User;
  text?: string;
  readonly textPreview?: string;
  type?: WorkItemType;
  created?: number;
  updated?: number;
  duration?: DurationValue;
  date?: number;
  issue?: Issue;
  readonly attributes?: Array<WorkItemAttribute>;
};

/**
 * Represents a Jenkins integration configured for a project.
 */
export type JenkinsChangesProcessor = ChangesProcessor & {
  $type?: "JenkinsChangesProcessor";
} & {
  readonly id?: string;
  server?: JenkinsServer;
};

/**
 * Represents a Jenkins server.
 */
export type JenkinsServer = VcsServer & {
  $type?: "JenkinsServer";
} & {
  readonly id?: string;
  url?: string;
};

export type License = {
  readonly id?: string;
  username?: string;
  license?: string;
  readonly error?: string;
  readonly $type?: string;
};

/**
 * Represents visibility limited to several users and/or groups.
 */
export type LimitedVisibility = Visibility & {
  $type?: "LimitedVisibility";
} & {
  readonly id?: string;
  permittedGroups?: Array<UserGroup>;
  permittedUsers?: Array<User>;
};

/**
 * Represents a change in the `issues` attribute of an IssueLink entity.
 * That is, each issue has the `links` attribute that contains an array of IssueLink entities.
 * Each of them represents a link between the target issue and a collection of issues.
 * For example, a set of issues to which the target one is linked as "Duplicated by".
 * The change in the list of these issues is represented by `LinksActivityItem` entity.
 */
export type LinksActivityItem = MultiValueActivityItem & {
  readonly id?: string;
  readonly added?: Array<Issue>;
  readonly removed?: Array<Issue>;
  target?: Issue;
};

/**
 * Represents a language locale that is used in UI.
 */
export type LocaleDescriptor = {
  readonly id?: string;
  readonly locale?: string;
  readonly language?: string;
  readonly community?: boolean;
  name?: string;
  readonly $type?: string;
};

export type LocaleSettings = {
  readonly id?: string;
  locale?: LocaleDescriptor;
  isRTL?: boolean;
  readonly $type?: string;
};

/**
 * Represents field value that can be localized.
 */
export type LocalizableBundleElement = BundleElement & {
  $type?: "LocalizableBundleElement";
} & {
  readonly id?: string;
  localizedName?: string;
};

/**
 * Company logo that is used in YouTrack.
 */
export type Logo = {
  readonly id?: string;
  readonly url?: string;
  readonly $type?: string;
};

export type Me = User & {
  $type?: "Me";
} & {
  readonly id?: string;
};

/**
 * Represents a multi-value build-type custom field in the issue.
 */
export type MultiBuildIssueCustomField = DatabaseMultiValueIssueCustomField & {
  readonly id?: string;
  value?: Array<BuildBundleElement>;
};

/**
 * Represents a multi-value enum-type custom field in the issue.
 */
export type MultiEnumIssueCustomField = DatabaseMultiValueIssueCustomField & {
  readonly id?: string;
  value?: Array<EnumBundleElement>;
};

/**
 * Represents a multi-value group-type custom field in the issue.
 */
export type MultiGroupIssueCustomField = DatabaseMultiValueIssueCustomField & {
  readonly id?: string;
  value?: Array<UserGroup>;
};

/**
 * Represents a multi-value owned-type custom field in the issue.
 */
export type MultiOwnedIssueCustomField = DatabaseMultiValueIssueCustomField & {
  readonly id?: string;
  value?: Array<OwnedBundleElement>;
};

/**
 * Represents a multi-value user-type custom field in the issue.
 */
export type MultiUserIssueCustomField = DatabaseMultiValueIssueCustomField & {
  readonly id?: string;
  value?: Array<User>;
};

/**
 * Represents a change in an entity attribute that has type of `Array of &lt;Entities&gt;`.
 */
export type MultiValueActivityItem = ActivityItem & {
  $type?: "MultiValueActivityItem";
} & {
  readonly id?: string;
  readonly added?: {
    [key: string]: unknown;
  };
  readonly removed?: {
    [key: string]: unknown;
  };
};

/**
 * Represents a custom field that may have multiple values in the issue.
 */
export type DatabaseMultiValueIssueCustomField = IssueCustomField & {
  $type?: "MultiValueIssueCustomField";
} & {
  readonly id?: string;
  readonly value?: {
    [key: string]: unknown;
  };
};

/**
 * Represents a multi-value version-type custom field in the issue.
 */
export type MultiVersionIssueCustomField =
  DatabaseMultiValueIssueCustomField & {
    readonly id?: string;
    value?: Array<VersionBundleElement>;
  };

/**
 * Represents a group of users.
 */
export type NestedGroup = UserGroup & {
  $type?: "NestedGroup";
};

export type NotificationSettings = {
  readonly id?: string;
  emailSettings?: EmailSettings;
  readonly $type?: string;
};

export type NotificationsUserProfile = {
  readonly id?: string;
  notifyOnOwnChanges?: boolean;
  emailNotificationsEnabled?: boolean;
  mentionNotificationsEnabled?: boolean;
  duplicateClusterNotificationsEnabled?: boolean;
  mailboxIntegrationNotificationsEnabled?: boolean;
  usePlainTextEmails?: boolean;
  autoWatchOnComment?: boolean;
  autoWatchOnCreate?: boolean;
  autoWatchOnVote?: boolean;
  autoWatchOnUpdate?: boolean;
  readonly $type?: string;
};

/**
 * Stores number of online user.
 */
export type OnlineUsers = {
  readonly id?: string;
  readonly users?: number;
  readonly $type?: string;
};

export type OwnedBundle = BaseBundle & {
  readonly id?: string;
  values?: Array<OwnedBundleElement>;
};

/**
 * Default settings for the owned-type field.
 */
export type OwnedBundleCustomFieldDefaults = BundleCustomFieldDefaults & {
  readonly id?: string;
  bundle?: OwnedBundle;
  defaultValues?: Array<OwnedBundleElement>;
};

export type OwnedBundleElement = BundleElement & {
  $type?: "OwnedBundleElement";
} & {
  readonly id?: string;
  owner?: User;
};

/**
 * Represents project settings for an owned field.
 */
export type OwnedProjectCustomField = BundleProjectCustomField & {
  readonly id?: string;
  bundle?: OwnedBundle;
  defaultValues?: Array<OwnedBundleElement>;
};

/**
 * Represents the command that was parsed from the provided query.
 */
export type ParsedCommand = {
  readonly id?: string;
  readonly description?: string;
  readonly error?: boolean;
  readonly delete?: boolean;
  readonly $type?: string;
};

/**
 * Represents the format, in which the period values are displayed to the user.
 */
export type PeriodFieldFormat = {
  readonly id?: string;
  readonly $type?: string;
};

/**
 * Represents the period field in the issue.
 */
export type PeriodIssueCustomField = IssueCustomField & {
  $type?: "PeriodIssueCustomField";
} & {
  readonly id?: string;
  value?: PeriodValue;
};

/**
 * Represents project settings for the period field.
 */
export type PeriodProjectCustomField = ProjectCustomField & {
  $type?: "PeriodProjectCustomField";
} & {
  readonly id?: string;
};

/**
 * Represents the period field value.
 */
export type PeriodValue = {
  readonly id?: string;
  readonly minutes?: number;
  readonly presentation?: string;
  readonly $type?: string;
};

/**
 * Represents a predefined field of the issue. Predefined fields are always present in an issue and
 * |cannot be customized in a project. For example, `project`, `created`,
 * |`updated`, `tags`, and so on.
 */
export type PredefinedFilterField = FilterField & {
  $type?: "PredefinedFilterField";
} & {
  readonly id?: string;
};

export type Project = IssueFolder & {
  $type?: "Project";
} & {
  readonly id?: string;
  archived?: boolean;
  createdBy?: User;
  readonly customFields?: {
    [key: string]: unknown;
  };
  description?: string;
  fromEmail?: string;
  readonly iconUrl?: string;
  issues?: Array<Issue>;
  leader?: User;
  name?: string;
  replyToEmail?: string;
  shortName?: string;
  startingNumber?: number;
  team?: UserGroup;
  template?: boolean;
};

/**
 * Represents the change in the project attribute on an issue.
 */
export type ProjectActivityItem = SingleValueActivityItem & {
  readonly id?: string;
  added?: IssueKey;
  removed?: IssueKey;
  target?: Issue;
};

/**
 * Lets you set a color for a card based on its project.
 */
export type ProjectBasedColorCoding = ColorCoding & {
  $type?: "ProjectBasedColorCoding";
} & {
  readonly id?: string;
  projectColors?: Array<ProjectColor>;
};

/**
 * Represents color setting for one project on the board.
 */
export type ProjectColor = {
  readonly id?: string;
  project?: Project;
  color?: FieldStyle;
  readonly $type?: string;
};

export type ProjectCustomField = {
  readonly id?: string;
  field?: CustomField;
  project?: Project;
  canBeEmpty?: boolean;
  emptyFieldText?: string;
  ordinal?: number;
  isPublic?: boolean;
  readonly hasRunningJob?: boolean;
  condition?: CustomFieldCondition;
  readonly $type?: string;
};

export type ProjectTeam = UserGroup & {
  $type?: "ProjectTeam";
} & {
  project?: Project;
};

export type ProjectTimeTrackingSettings = {
  readonly id?: string;
  enabled?: boolean;
  estimate?: ProjectCustomField;
  timeSpent?: ProjectCustomField;
  workItemTypes?: Array<WorkItemType>;
  project?: Project;
  attributes?: Array<WorkItemProjectAttribute>;
  readonly $type?: string;
};

export type Reaction = {
  readonly id?: string;
  author?: User;
  reaction?: string;
  readonly $type?: string;
};

/**
 * Represents a group containing all users excluding guest.
 */
export type RegisteredUsersGroup = UserGroup & {
  $type?: "RegisteredUsersGroup";
};

export type RestCorsSettings = {
  readonly id?: string;
  allowedOrigins?: Array<string>;
  allowAllOrigins?: boolean;
  readonly $type?: string;
};

export type SavedQuery = WatchFolder & {
  readonly id?: string;
  query?: string;
  readonly issues?: Array<Issue>;
  visibleFor?: UserGroup;
  updateableBy?: UserGroup;
  readSharingSettings?: WatchFolderSharingSettings;
  updateSharingSettings?: WatchFolderSharingSettings;
};

export type SearchSuggestions = {
  readonly id?: string;
  caret?: number;
  ignoreUnresolvedSetting?: boolean;
  query?: string;
  readonly suggestions?: Array<Suggestion>;
  folders?: Array<IssueFolder>;
  readonly $type?: string;
};

/**
 * Represents a simple-type custom field in the issue.
 */
export type SimpleIssueCustomField = IssueCustomField & {
  $type?: "SimpleIssueCustomField";
} & {
  readonly id?: string;
  readonly value?: {
    [key: string]: unknown;
  };
};

/**
 * Represents project settings for the fields of the following types: `integer`, `float`, `date`, `date and time`, `string`.
 */
export type SimpleProjectCustomField = ProjectCustomField & {
  $type?: "SimpleProjectCustomField";
} & {
  readonly id?: string;
};

/**
 * Represents the change in attributes of a simple type in the target entity:
 * Issue, IssueComment, WorkItem, IssueAttachment.
 */
export type SimpleValueActivityItem = SingleValueActivityItem & {
  readonly id?: string;
  readonly added?: {
    [key: string]: unknown;
  };
  readonly removed?: {
    [key: string]: unknown;
  };
};

/**
 * Represents a single-value build-type custom field in the issue.
 */
export type SingleBuildIssueCustomField =
  DatabaseSingleValueIssueCustomField & {
    readonly id?: string;
    value?: BuildBundleElement;
  };

/**
 * Represents a single-value enum-type custom field in the issue.
 */
export type SingleEnumIssueCustomField = DatabaseSingleValueIssueCustomField & {
  readonly id?: string;
  value?: EnumBundleElement;
};

/**
 * Represents a single-value group-type custom field in the issue.
 */
export type SingleGroupIssueCustomField =
  DatabaseSingleValueIssueCustomField & {
    readonly id?: string;
    value?: UserGroup;
  };

/**
 * Represents a single-value owned-type custom field in the issue.
 */
export type SingleOwnedIssueCustomField =
  DatabaseSingleValueIssueCustomField & {
    readonly id?: string;
    value?: OwnedBundleElement;
  };

/**
 * Represents a single-value user-type custom field in the issue.
 */
export type SingleUserIssueCustomField = DatabaseSingleValueIssueCustomField & {
  readonly id?: string;
  value?: User;
};

/**
 * Describe change of properties that can have single value.
 */
export type SingleValueActivityItem = ActivityItem & {
  $type?: "SingleValueActivityItem";
} & {
  readonly id?: string;
  readonly added?: {
    [key: string]: unknown;
  };
  readonly removed?: {
    [key: string]: unknown;
  };
};

/**
 * Represents a a single-value custom field in the issue.
 */
export type DatabaseSingleValueIssueCustomField = IssueCustomField & {
  $type?: "SingleValueIssueCustomField";
} & {
  readonly id?: string;
  readonly value?: {
    [key: string]: unknown;
  };
};

/**
 * Represents a single-value version-type custom field in the issue.
 */
export type SingleVersionIssueCustomField =
  DatabaseSingleValueIssueCustomField & {
    readonly id?: string;
    value?: VersionBundleElement;
  };

/**
 * Represents a Space integration configured for a project.
 */
export type SpaceChangesProcessor = VcsHostingChangesProcessor & {
  readonly id?: string;
  server?: SpaceServer;
};

/**
 * Represents a Space server.
 */
export type SpaceServer = VcsHostingServer & {
  readonly id?: string;
  url?: string;
};

export type Sprint = {
  readonly id?: string;
  agile?: Agile;
  name?: string;
  goal?: string;
  start?: number;
  finish?: number;
  archived?: boolean;
  isDefault?: boolean;
  issues?: Array<Issue>;
  readonly unresolvedIssuesCount?: number;
  previousSprint?: Sprint;
  readonly $type?: string;
};

/**
 * Represents a change in the issue when it was added to or removed from an agile board sprint.
 */
export type SprintActivityItem = MultiValueActivityItem & {
  readonly id?: string;
  target?: Issue;
  readonly removed?: Array<Sprint>;
  readonly added?: Array<Sprint>;
};

/**
 * Describes sprints configuration.
 */
export type SprintsSettings = {
  readonly id?: string;
  isExplicit?: boolean;
  cardOnSeveralSprints?: boolean;
  defaultSprint?: Sprint;
  disableSprints?: boolean;
  explicitQuery?: string;
  sprintSyncField?: CustomField;
  hideSubtasksOfCards?: boolean;
  readonly $type?: string;
};

export type StateBundle = BaseBundle & {
  readonly id?: string;
  values?: Array<StateBundleElement>;
};

/**
 * Default settings for the state-type field.
 */
export type StateBundleCustomFieldDefaults = BundleCustomFieldDefaults & {
  readonly id?: string;
  bundle?: StateBundle;
  defaultValues?: Array<StateBundleElement>;
};

export type StateBundleElement = LocalizableBundleElement & {
  readonly id?: string;
  isResolved?: boolean;
};

/**
 * Represents a single-value state-type custom field in the issue.
 */
export type StateIssueCustomField = DatabaseSingleValueIssueCustomField & {
  readonly id?: string;
  value?: StateBundleElement;
};

/**
 * Represents the issue custom field that is managed by a state-machine rule in workflow.
 */
export type StateMachineIssueCustomField =
  DatabaseSingleValueIssueCustomField & {
    readonly id?: string;
    readonly value?: {
      [key: string]: unknown;
    };
    event?: Event;
    readonly possibleEvents?: Array<Event>;
  };

/**
 * Represents project settings for a state field.
 */
export type StateProjectCustomField = BundleProjectCustomField & {
  readonly id?: string;
  bundle?: StateBundle;
  defaultValues?: Array<StateBundleElement>;
};

/**
 * SSL key representation.
 */
export type StorageEntry = {
  readonly id?: string;
  name?: string;
  readonly $type?: string;
};

/**
 * Represents query suggestion.
 */
export type Suggestion = {
  readonly id?: string;
  readonly completionStart?: number;
  readonly completionEnd?: number;
  readonly matchingStart?: number;
  readonly matchingEnd?: number;
  readonly caret?: number;
  readonly description?: string;
  readonly option?: string;
  readonly prefix?: string;
  readonly suffix?: string;
  readonly group?: string;
  readonly icon?: string;
  readonly auxiliaryIcon?: string;
  readonly className?: string;
  readonly $type?: string;
};

/**
 * Represents a single swimlane in case of AttributeBasedSwimlaneSettings.
 */
export type SwimlaneEntityAttributeValue = DatabaseAttributeValue & {
  $type?: "SwimlaneEntityAttributeValue";
} & {
  readonly id?: string;
  name?: string;
  readonly isResolved?: boolean;
};

/**
 * Base entity for different swimlane settings
 */
export type SwimlaneSettings = {
  readonly id?: string;
  enabled?: boolean;
  readonly $type?: string;
};

/**
 * Represents single swimlane in case of IssueBasedSwimlaneSettings.
 */
export type SwimlaneValue = {
  readonly id?: string;
  readonly name?: string;
  readonly $type?: string;
};

export type SystemSettings = {
  readonly id?: string;
  baseUrl?: string;
  maxUploadFileSize?: number;
  maxExportItems?: number;
  administratorEmail?: string;
  allowStatisticsCollection?: boolean;
  isApplicationReadOnly?: boolean;
  readonly $type?: string;
};

export type Tag = WatchFolder & {
  readonly id?: string;
  issues?: Array<Issue>;
  color?: FieldStyle;
  untagOnResolve?: boolean;
  visibleFor?: UserGroup;
  updateableBy?: UserGroup;
  readSharingSettings?: WatchFolderSharingSettings;
  tagSharingSettings?: TagSharingSettings;
  updateSharingSettings?: WatchFolderSharingSettings;
};

/**
 * Stores users and groups that have access to a tag.
 */
export type TagSharingSettings = {
  readonly id?: string;
  permittedGroups?: Array<UserGroup>;
  permittedUsers?: Array<User>;
  readonly $type?: string;
};

/**
 * Represents a change in the list of tags of an issue.
 */
export type TagsActivityItem = MultiValueActivityItem & {
  readonly id?: string;
  readonly added?: Array<Tag>;
  readonly removed?: Array<Tag>;
  target?: Issue;
};

/**
 * Represents a TeamCity integration configured for a project.
 */
export type TeamcityChangesProcessor = ChangesProcessor & {
  $type?: "TeamcityChangesProcessor";
} & {
  readonly id?: string;
  server?: TeamcityServer;
};

/**
 * Represents a TeamCity server.
 */
export type TeamcityServer = VcsServer & {
  $type?: "TeamcityServer";
} & {
  readonly id?: string;
  url?: string;
};

export type Telemetry = {
  readonly id?: string;
  readonly installationFolder?: string;
  readonly databaseLocation?: string;
  readonly logsLocation?: string;
  readonly availableProcessors?: number;
  readonly availableMemory?: string;
  readonly allocatedMemory?: string;
  readonly usedMemory?: string;
  readonly uptime?: string;
  readonly startedTime?: number;
  readonly databaseBackgroundThreads?: number;
  readonly pendingAsyncJobs?: number;
  readonly cachedResultsCountInDBQueriesCache?: number;
  readonly databaseQueriesCacheHitRate?: string;
  readonly blobStringsCacheHitRate?: string;
  readonly totalTransactions?: number;
  readonly transactionsPerSecond?: string;
  readonly requestsPerSecond?: string;
  readonly databaseSize?: string;
  readonly fullDatabaseSize?: string;
  readonly textIndexSize?: string;
  onlineUsers?: OnlineUsers;
  readonly reportCalculatorThreads?: number;
  readonly notificationAnalyzerThreads?: number;
  readonly $type?: string;
};

/**
 * Represents an activity that affects a custom field of the `text` type of an issue.
 */
export type TextCustomFieldActivityItem = CustomFieldActivityItem & {
  readonly id?: string;
  readonly added?: string;
  readonly markup?: string;
  readonly removed?: string;
  target?: Issue;
};

/**
 * Represents a value of the text field. Returns both source and rendered text.
 */
export type TextFieldValue = {
  readonly id?: string;
  readonly text?: string;
  readonly markdownText?: string;
  readonly $type?: string;
};

/**
 * Represents the issue custom field of the `text` type.
 */
export type TextIssueCustomField = IssueCustomField & {
  $type?: "TextIssueCustomField";
} & {
  readonly id?: string;
  value?: TextFieldValue;
};

/**
 * Represents a change in a `String`-type attribute with the support of markup:
 * `description` in an Issue or IssueWorkItem, and the `text` of the IssueComment.
 * This entity lets you get the rendered text after the change.
 */
export type TextMarkupActivityItem = SimpleValueActivityItem & {
  readonly id?: string;
  readonly added?: string;
  readonly markup?: string;
  readonly removed?: string;
};

/**
 * Represents settings of the text-type field in the project.
 */
export type TextProjectCustomField = SimpleProjectCustomField & {
  readonly id?: string;
};

export type TimeTrackingUserProfile = {
  readonly id?: string;
  periodFormat?: PeriodFieldFormat;
  readonly $type?: string;
};

/**
 * Represents a time zone.
 */
export type TimeZoneDescriptor = {
  readonly id?: string;
  readonly presentation?: string;
  readonly offset?: number;
  readonly $type?: string;
};

/**
 * Represents unlimited visibility. When access to an entity is not restricted, the visibility attribute of this entity has the type `UnlimitedVisibility`. Entities of this type do not have any attributes.
 */
export type UnlimitedVisibility = Visibility & {
  $type?: "UnlimitedVisibility";
};

export type User = {
  readonly id?: string;
  readonly login?: string;
  readonly fullName?: string;
  readonly email?: string;
  readonly ringId?: string;
  readonly guest?: boolean;
  readonly online?: boolean;
  readonly banned?: boolean;
  readonly tags?: Array<Tag>;
  readonly savedQueries?: Array<SavedQuery>;
  readonly avatarUrl?: string;
  profiles?: UserProfiles;
  readonly $type?: string;
};

export type UserBundle = Bundle & {
  $type?: "UserBundle";
} & {
  readonly id?: string;
  groups?: Array<UserGroup>;
  individuals?: Array<User>;
  readonly aggregatedUsers?: Array<User>;
};

/**
 * Represents default settings for the user-type field.
 */
export type UserCustomFieldDefaults = CustomFieldDefaults & {
  $type?: "UserCustomFieldDefaults";
} & {
  readonly id?: string;
  bundle?: UserBundle;
  defaultValues?: Array<User>;
};

export type UserGroup = {
  readonly id?: string;
  readonly name?: string;
  readonly ringId?: string;
  readonly usersCount?: number;
  readonly icon?: string;
  readonly allUsersGroup?: boolean;
  teamForProject?: Project;
  readonly $type?: string;
};

/**
 * Represents a group of settings of a user profile in YouTrack.
 */
export type UserProfiles = {
  readonly id?: string;
  general?: GeneralUserProfile;
  notifications?: NotificationsUserProfile;
  timetracking?: TimeTrackingUserProfile;
  readonly $type?: string;
};

/**
 * Represents project settings for a user field.
 */
export type UserProjectCustomField = BundleProjectCustomField & {
  readonly id?: string;
  bundle?: UserBundle;
  defaultValues?: Array<User>;
};

/**
 * Represents the change of the boolean flag that indicates whether YouTrack Wiki or Markdown
 * is used in the target entity as a markup language. If `true`, then the markdown is used.
 * Otherwise, YouTrack Wiki markup.
 */
export type UsesMarkupActivityItem = SimpleValueActivityItem & {
  readonly id?: string;
  readonly added?: boolean;
  readonly markup?: string;
  readonly removed?: boolean;
};

export type VcsChange = {
  readonly id?: string;
  readonly date?: number;
  readonly fetched?: number;
  readonly files?: number;
  author?: User;
  readonly processors?: Array<ChangesProcessor>;
  readonly text?: string;
  readonly urls?: Array<string>;
  version?: string;
  issue?: Issue;
  state?: number;
  readonly $type?: string;
};

/**
 * Represents an update in the list of VCS changes of an issue.
 */
export type VcsChangeActivityItem = CreatedDeletedActivityItem & {
  readonly id?: string;
  readonly removed?: Array<VcsChange>;
  readonly added?: Array<VcsChange>;
  author?: User;
};

/**
 * The basic entity that represents a VCS integration configured for a project.
 */
export type VcsHostingChangesProcessor = ChangesProcessor & {
  $type?: "VcsHostingChangesProcessor";
} & {
  readonly id?: string;
  server?: VcsHostingServer;
  path?: string;
  branchSpecification?: string;
  committers?: UserGroup;
};

/**
 * The basic entity that represents a VCS server.
 */
export type VcsHostingServer = VcsServer & {
  $type?: "VcsHostingServer";
} & {
  readonly id?: string;
  url?: string;
};

/**
 * The basic entity that represents a VCS or a build server.
 */
export type VcsServer = {
  readonly id?: string;
  url?: string;
  readonly $type?: string;
};

/**
 * Represents a VCS change author who could not be associated with any YouTrack user account.
 */
export type VcsUnresolvedUser = User & {
  $type?: "VcsUnresolvedUser";
} & {
  readonly id?: string;
  readonly name?: string;
};

export type VersionBundle = BaseBundle & {
  readonly id?: string;
  values?: Array<VersionBundleElement>;
};

/**
 * Default settings for the version-type field.
 */
export type VersionBundleCustomFieldDefaults = BundleCustomFieldDefaults & {
  readonly id?: string;
  bundle?: VersionBundle;
  defaultValues?: Array<VersionBundleElement>;
};

export type VersionBundleElement = BundleElement & {
  $type?: "VersionBundleElement";
} & {
  readonly id?: string;
  archived?: boolean;
  released?: boolean;
  releaseDate?: number;
  startDate?: number;
};

/**
 * Represents project settings for a version field.
 */
export type VersionProjectCustomField = BundleProjectCustomField & {
  readonly id?: string;
  bundle?: VersionBundle;
  defaultValues?: Array<VersionBundleElement>;
};

/**
 * Represents visibility settings of an entity, for example, an issue or a comment.
 */
export type Visibility = {
  readonly id?: string;
  readonly $type?: string;
};

/**
 * Represents the changes of properties responsible for visibility restriction.
 * Can be <a href="api-entity-VisibilityGroupActivityItem.topic">VisibilityGroupActivityItem</a> or <a href="api-entity-VisibilityUserActivityItem.topic">VisibilityUserActivityItem</a>
 */
export type VisibilityActivityItem = MultiValueActivityItem & {
  readonly id?: string;
  readonly targetMember?: string;
  readonly targetSubMember?: string;
};

/**
 * Represents the event when a user adds or removes a group to/from the Visibility settings of the target entity.
 */
export type VisibilityGroupActivityItem = VisibilityActivityItem & {
  readonly id?: string;
  readonly added?: Array<UserGroup>;
  readonly removed?: Array<UserGroup>;
  readonly targetMember?: string;
  readonly targetSubMember?: string;
};

/**
 * Represents the event when a user adds or removes a user to/from the Visibility settings of the target entity.
 */
export type VisibilityUserActivityItem = VisibilityActivityItem & {
  readonly id?: string;
  readonly added?: Array<User>;
  readonly removed?: Array<User>;
  readonly targetMember?: string;
  readonly targetSubMember?: string;
};

/**
 * Represents a change in the list of voters of an issue.
 */
export type VotersActivityItem = MultiValueActivityItem & {
  readonly id?: string;
  readonly added?: Array<User>;
  readonly removed?: Array<User>;
  target?: Issue;
};

/**
 * Represents WIP limits for particular column. If they are not satisfied, the column will be highlighted in UI.
 */
export type WipLimit = {
  readonly id?: string;
  max?: number;
  min?: number;
  column?: AgileColumn;
  readonly $type?: string;
};

/**
 * `WatchFolder` is a common abstract ancestor for saved searches and tags.
 */
export type WatchFolder = IssueFolder & {
  $type?: "WatchFolder";
} & {
  readonly id?: string;
  owner?: User;
  visibleFor?: UserGroup;
  updateableBy?: UserGroup;
  readSharingSettings?: WatchFolderSharingSettings;
  updateSharingSettings?: WatchFolderSharingSettings;
};

/**
 * Stores users and groups that have access to a tag or a saved search.
 */
export type WatchFolderSharingSettings = {
  readonly id?: string;
  permittedGroups?: Array<UserGroup>;
  permittedUsers?: Array<User>;
  readonly $type?: string;
};

/**
 * Represents a change in a list of work items in an issue.
 */
export type WorkItemActivityItem = CreatedDeletedActivityItem & {
  readonly id?: string;
  target?: IssueWorkItem;
  readonly removed?: Array<IssueWorkItem>;
  readonly added?: Array<IssueWorkItem>;
};

/**
 * Represents the attribute of a specific work item.
 */
export type WorkItemAttribute = {
  readonly id?: string;
  workItem?: BaseWorkItem;
  projectAttribute?: WorkItemProjectAttribute;
  value?: WorkItemAttributeValue;
  readonly name?: string;
  readonly $type?: string;
};

/**
 * Represents a work item attribute prototype that is common for all projects. The project-related settings for work item attributes are stored in the `WorkItemProjectAttribute` entities.
 */
export type WorkItemAttributePrototype = {
  readonly id?: string;
  name?: string;
  instances?: Array<WorkItemProjectAttribute>;
  values?: Array<WorkItemAttributeValue>;
  readonly $type?: string;
};

/**
 * Represents a value of a work item attribute.
 */
export type WorkItemAttributeValue = {
  readonly id?: string;
  name?: string;
  description?: string;
  autoAttach?: boolean;
  prototype?: WorkItemAttributePrototype;
  readonly $type?: string;
};

/**
 * Represents a change in the `author` attribute of a work item.
 */
export type WorkItemAuthorActivityItem = SingleValueActivityItem & {
  readonly id?: string;
  target?: IssueWorkItem;
  removed?: User;
  added?: User;
};

/**
 * Represents a change in the `duration` attribute of a work item.
 */
export type WorkItemDurationActivityItem = SingleValueActivityItem & {
  readonly id?: string;
  target?: IssueWorkItem;
  removed?: DurationValue;
  added?: DurationValue;
};

/**
 * Represents the project-related settings of a work item attribute.
 */
export type WorkItemProjectAttribute = {
  readonly id?: string;
  timeTrackingSettings?: ProjectTimeTrackingSettings;
  prototype?: WorkItemAttributePrototype;
  values?: Array<WorkItemAttributeValue>;
  readonly name?: string;
  ordinal?: number;
  readonly $type?: string;
};

export type WorkItemType = {
  readonly id?: string;
  name?: string;
  autoAttached?: boolean;
  readonly $type?: string;
};

/**
 * Represents a change in the `type` attribute of the work item.
 */
export type WorkItemTypeActivityItem = MultiValueActivityItem & {
  readonly id?: string;
  target?: IssueWorkItem;
  readonly removed?: Array<WorkItemType>;
  readonly added?: Array<WorkItemType>;
};

export type WorkTimeSettings = {
  readonly id?: string;
  minutesADay?: number;
  workDays?: Array<number>;
  readonly firstDayOfWeek?: number;
  readonly daysAWeek?: number;
  readonly $type?: string;
};

export type GetActivitiesData = {
  body?: never;
  path?: never;
  query?: {
    categories?: string;
    /**
     * Indicates whether the order of returning activities is from newest to oldest or the opposite.
     * If `false`, then the oldest activity item that matches a selected filter is returned first.
     * If `true`, then the newest activity is returned first. By default, `false`.
     */
    reverse?: boolean;
    /**
     * The timestamp in milliseconds indicating the start of the time interval the activity timestamp belongs to.
     * Stored as a unix timestamp at UTC.
     * If the parameter is not set, it is considered to be 0.
     */
    start?: string;
    /**
     * The timestamp in milliseconds indicating the end of the time interval the activity timestamp belongs to.
     * Stored as a unix timestamp at UTC.
     * If the parameter is not set, it is considered as `Long.MAX_VALUE`.
     */
    end?: string;
    /**
     * Parameter to filter activities by the author. You can specify one of the following parameters: the database ID, login, Hub ID,
     * or `me` for the currently logged in user.
     */
    author?: string;
    /**
     * Issue search query. For details about search syntax, refer to the <a href="https://www.jetbrains.com/help/youtrack/cloud/search-and-command-attributes.html">YouTrack documentation</a>.
     */
    issueQuery?: string;
    fields?: string;
    $skip?: number;
    $top?: number;
  };
  url: "/activities";
};

export type GetActivitiesResponses = {
  /**
   * collection of ActivityItem
   */
  200: Array<ActivityItem>;
};

export type GetActivitiesResponse =
  GetActivitiesResponses[keyof GetActivitiesResponses];

export type GetActivitiesByIdData = {
  body?: never;
  path: {
    id: string;
  };
  query?: {
    fields?: string;
  };
  url: "/activities/{id}";
};

export type GetActivitiesByIdResponses = {
  /**
   * single ActivityItem
   */
  200: ActivityItem;
};

export type GetActivitiesByIdResponse =
  GetActivitiesByIdResponses[keyof GetActivitiesByIdResponses];

export type GetActivitiesPageData = {
  body?: never;
  path?: never;
  query?: {
    categories?: string;
    /**
     * Indicates whether the order of returning activities is from newest to oldest or the opposite.
     * If `false`, then the oldest activity item that matches a selected filter is returned first.
     * If `true`, then the newest activity is returned first. By default, `false`.
     */
    reverse?: boolean;
    /**
     * The timestamp in milliseconds indicating the start of the time interval the activity timestamp belongs to.
     * Stored as a unix timestamp at UTC.
     * If the parameter is not set, it is considered to be 0.
     */
    start?: string;
    /**
     * The timestamp in milliseconds indicating the end of the time interval the activity timestamp belongs to.
     * Stored as a unix timestamp at UTC.
     * If the parameter is not set, it is considered as `Long.MAX_VALUE`.
     */
    end?: string;
    /**
     * Parameter to filter activities by the author. You can specify one of the following parameters: the database ID, login, Hub ID,
     * or `me` for the currently logged in user.
     */
    author?: string;
    /**
     * Issue search query. For details about search syntax, refer to the <a href="https://www.jetbrains.com/help/youtrack/cloud/search-and-command-attributes.html">YouTrack documentation</a>.
     */
    issueQuery?: string;
    cursor?: string;
    /**
     * ID of the activity that should be included in the page. The activity is allocated to the middle of the page.
     */
    activityId?: string;
    fields?: string;
  };
  url: "/activitiesPage";
};

export type GetActivitiesPageResponses = {
  /**
   * single ActivityCursorPage
   */
  200: ActivityCursorPage;
};

export type GetActivitiesPageResponse =
  GetActivitiesPageResponses[keyof GetActivitiesPageResponses];

export type GetAdminCustomFieldSettingsBundlesBuildData = {
  body?: never;
  path?: never;
  query?: {
    fields?: string;
    $skip?: number;
    $top?: number;
  };
  url: "/admin/customFieldSettings/bundles/build";
};

export type GetAdminCustomFieldSettingsBundlesBuildResponses = {
  /**
   * collection of BuildBundle
   */
  200: Array<BuildBundle>;
};

export type GetAdminCustomFieldSettingsBundlesBuildResponse =
  GetAdminCustomFieldSettingsBundlesBuildResponses[keyof GetAdminCustomFieldSettingsBundlesBuildResponses];

export type PostAdminCustomFieldSettingsBundlesBuildData = {
  body?: BuildBundle;
  path?: never;
  query?: {
    fields?: string;
  };
  url: "/admin/customFieldSettings/bundles/build";
};

export type PostAdminCustomFieldSettingsBundlesBuildResponses = {
  /**
   * single BuildBundle
   */
  200: BuildBundle;
};

export type PostAdminCustomFieldSettingsBundlesBuildResponse =
  PostAdminCustomFieldSettingsBundlesBuildResponses[keyof PostAdminCustomFieldSettingsBundlesBuildResponses];

export type DeleteAdminCustomFieldSettingsBundlesBuildByIdData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: "/admin/customFieldSettings/bundles/build/{id}";
};

export type DeleteAdminCustomFieldSettingsBundlesBuildByIdResponses = {
  /**
   * OK
   */
  200: unknown;
};

export type GetAdminCustomFieldSettingsBundlesBuildByIdData = {
  body?: never;
  path: {
    id: string;
  };
  query?: {
    fields?: string;
  };
  url: "/admin/customFieldSettings/bundles/build/{id}";
};

export type GetAdminCustomFieldSettingsBundlesBuildByIdResponses = {
  /**
   * single BuildBundle
   */
  200: BuildBundle;
};

export type GetAdminCustomFieldSettingsBundlesBuildByIdResponse =
  GetAdminCustomFieldSettingsBundlesBuildByIdResponses[keyof GetAdminCustomFieldSettingsBundlesBuildByIdResponses];

export type PostAdminCustomFieldSettingsBundlesBuildByIdData = {
  body?: BuildBundle;
  path: {
    id: string;
  };
  query?: {
    fields?: string;
  };
  url: "/admin/customFieldSettings/bundles/build/{id}";
};

export type PostAdminCustomFieldSettingsBundlesBuildByIdResponses = {
  /**
   * single BuildBundle
   */
  200: BuildBundle;
};

export type PostAdminCustomFieldSettingsBundlesBuildByIdResponse =
  PostAdminCustomFieldSettingsBundlesBuildByIdResponses[keyof PostAdminCustomFieldSettingsBundlesBuildByIdResponses];

export type GetAdminCustomFieldSettingsBundlesBuildByIdValuesData = {
  body?: never;
  path: {
    id: string;
  };
  query?: {
    fields?: string;
    $skip?: number;
    $top?: number;
  };
  url: "/admin/customFieldSettings/bundles/build/{id}/values";
};

export type GetAdminCustomFieldSettingsBundlesBuildByIdValuesResponses = {
  /**
   * collection of BuildBundleElement
   */
  200: Array<BuildBundleElement>;
};

export type GetAdminCustomFieldSettingsBundlesBuildByIdValuesResponse =
  GetAdminCustomFieldSettingsBundlesBuildByIdValuesResponses[keyof GetAdminCustomFieldSettingsBundlesBuildByIdValuesResponses];

export type PostAdminCustomFieldSettingsBundlesBuildByIdValuesData = {
  body?: BuildBundleElement;
  path: {
    id: string;
  };
  query?: {
    fields?: string;
  };
  url: "/admin/customFieldSettings/bundles/build/{id}/values";
};

export type PostAdminCustomFieldSettingsBundlesBuildByIdValuesResponses = {
  /**
   * single BuildBundleElement
   */
  200: BuildBundleElement;
};

export type PostAdminCustomFieldSettingsBundlesBuildByIdValuesResponse =
  PostAdminCustomFieldSettingsBundlesBuildByIdValuesResponses[keyof PostAdminCustomFieldSettingsBundlesBuildByIdValuesResponses];

export type DeleteAdminCustomFieldSettingsBundlesBuildByIdValuesByBuildBundleElementIdData =
  {
    body?: never;
    path: {
      id: string;
      buildBundleElementId: string;
    };
    query?: never;
    url: "/admin/customFieldSettings/bundles/build/{id}/values/{buildBundleElementId}";
  };

export type DeleteAdminCustomFieldSettingsBundlesBuildByIdValuesByBuildBundleElementIdResponses =
  {
    /**
     * OK
     */
    200: unknown;
  };

export type GetAdminCustomFieldSettingsBundlesBuildByIdValuesByBuildBundleElementIdData =
  {
    body?: never;
    path: {
      id: string;
      buildBundleElementId: string;
    };
    query?: {
      fields?: string;
    };
    url: "/admin/customFieldSettings/bundles/build/{id}/values/{buildBundleElementId}";
  };

export type GetAdminCustomFieldSettingsBundlesBuildByIdValuesByBuildBundleElementIdResponses =
  {
    /**
     * single BuildBundleElement
     */
    200: BuildBundleElement;
  };

export type GetAdminCustomFieldSettingsBundlesBuildByIdValuesByBuildBundleElementIdResponse =
  GetAdminCustomFieldSettingsBundlesBuildByIdValuesByBuildBundleElementIdResponses[keyof GetAdminCustomFieldSettingsBundlesBuildByIdValuesByBuildBundleElementIdResponses];

export type PostAdminCustomFieldSettingsBundlesBuildByIdValuesByBuildBundleElementIdData =
  {
    body?: BuildBundleElement;
    path: {
      id: string;
      buildBundleElementId: string;
    };
    query?: {
      fields?: string;
    };
    url: "/admin/customFieldSettings/bundles/build/{id}/values/{buildBundleElementId}";
  };

export type PostAdminCustomFieldSettingsBundlesBuildByIdValuesByBuildBundleElementIdResponses =
  {
    /**
     * single BuildBundleElement
     */
    200: BuildBundleElement;
  };

export type PostAdminCustomFieldSettingsBundlesBuildByIdValuesByBuildBundleElementIdResponse =
  PostAdminCustomFieldSettingsBundlesBuildByIdValuesByBuildBundleElementIdResponses[keyof PostAdminCustomFieldSettingsBundlesBuildByIdValuesByBuildBundleElementIdResponses];

export type GetAdminCustomFieldSettingsBundlesEnumData = {
  body?: never;
  path?: never;
  query?: {
    fields?: string;
    $skip?: number;
    $top?: number;
  };
  url: "/admin/customFieldSettings/bundles/enum";
};

export type GetAdminCustomFieldSettingsBundlesEnumResponses = {
  /**
   * collection of EnumBundle
   */
  200: Array<EnumBundle>;
};

export type GetAdminCustomFieldSettingsBundlesEnumResponse =
  GetAdminCustomFieldSettingsBundlesEnumResponses[keyof GetAdminCustomFieldSettingsBundlesEnumResponses];

export type PostAdminCustomFieldSettingsBundlesEnumData = {
  body?: EnumBundle;
  path?: never;
  query?: {
    fields?: string;
  };
  url: "/admin/customFieldSettings/bundles/enum";
};

export type PostAdminCustomFieldSettingsBundlesEnumResponses = {
  /**
   * single EnumBundle
   */
  200: EnumBundle;
};

export type PostAdminCustomFieldSettingsBundlesEnumResponse =
  PostAdminCustomFieldSettingsBundlesEnumResponses[keyof PostAdminCustomFieldSettingsBundlesEnumResponses];

export type DeleteAdminCustomFieldSettingsBundlesEnumByIdData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: "/admin/customFieldSettings/bundles/enum/{id}";
};

export type DeleteAdminCustomFieldSettingsBundlesEnumByIdResponses = {
  /**
   * OK
   */
  200: unknown;
};

export type GetAdminCustomFieldSettingsBundlesEnumByIdData = {
  body?: never;
  path: {
    id: string;
  };
  query?: {
    fields?: string;
  };
  url: "/admin/customFieldSettings/bundles/enum/{id}";
};

export type GetAdminCustomFieldSettingsBundlesEnumByIdResponses = {
  /**
   * single EnumBundle
   */
  200: EnumBundle;
};

export type GetAdminCustomFieldSettingsBundlesEnumByIdResponse =
  GetAdminCustomFieldSettingsBundlesEnumByIdResponses[keyof GetAdminCustomFieldSettingsBundlesEnumByIdResponses];

export type PostAdminCustomFieldSettingsBundlesEnumByIdData = {
  body?: EnumBundle;
  path: {
    id: string;
  };
  query?: {
    fields?: string;
  };
  url: "/admin/customFieldSettings/bundles/enum/{id}";
};

export type PostAdminCustomFieldSettingsBundlesEnumByIdResponses = {
  /**
   * single EnumBundle
   */
  200: EnumBundle;
};

export type PostAdminCustomFieldSettingsBundlesEnumByIdResponse =
  PostAdminCustomFieldSettingsBundlesEnumByIdResponses[keyof PostAdminCustomFieldSettingsBundlesEnumByIdResponses];

export type GetAdminCustomFieldSettingsBundlesEnumByIdValuesData = {
  body?: never;
  path: {
    id: string;
  };
  query?: {
    fields?: string;
    $skip?: number;
    $top?: number;
  };
  url: "/admin/customFieldSettings/bundles/enum/{id}/values";
};

export type GetAdminCustomFieldSettingsBundlesEnumByIdValuesResponses = {
  /**
   * collection of EnumBundleElement
   */
  200: Array<EnumBundleElement>;
};

export type GetAdminCustomFieldSettingsBundlesEnumByIdValuesResponse =
  GetAdminCustomFieldSettingsBundlesEnumByIdValuesResponses[keyof GetAdminCustomFieldSettingsBundlesEnumByIdValuesResponses];

export type PostAdminCustomFieldSettingsBundlesEnumByIdValuesData = {
  body?: EnumBundleElement;
  path: {
    id: string;
  };
  query?: {
    fields?: string;
  };
  url: "/admin/customFieldSettings/bundles/enum/{id}/values";
};

export type PostAdminCustomFieldSettingsBundlesEnumByIdValuesResponses = {
  /**
   * single EnumBundleElement
   */
  200: EnumBundleElement;
};

export type PostAdminCustomFieldSettingsBundlesEnumByIdValuesResponse =
  PostAdminCustomFieldSettingsBundlesEnumByIdValuesResponses[keyof PostAdminCustomFieldSettingsBundlesEnumByIdValuesResponses];

export type DeleteAdminCustomFieldSettingsBundlesEnumByIdValuesByEnumBundleElementIdData =
  {
    body?: never;
    path: {
      id: string;
      enumBundleElementId: string;
    };
    query?: never;
    url: "/admin/customFieldSettings/bundles/enum/{id}/values/{enumBundleElementId}";
  };

export type DeleteAdminCustomFieldSettingsBundlesEnumByIdValuesByEnumBundleElementIdResponses =
  {
    /**
     * OK
     */
    200: unknown;
  };

export type GetAdminCustomFieldSettingsBundlesEnumByIdValuesByEnumBundleElementIdData =
  {
    body?: never;
    path: {
      id: string;
      enumBundleElementId: string;
    };
    query?: {
      fields?: string;
    };
    url: "/admin/customFieldSettings/bundles/enum/{id}/values/{enumBundleElementId}";
  };

export type GetAdminCustomFieldSettingsBundlesEnumByIdValuesByEnumBundleElementIdResponses =
  {
    /**
     * single EnumBundleElement
     */
    200: EnumBundleElement;
  };

export type GetAdminCustomFieldSettingsBundlesEnumByIdValuesByEnumBundleElementIdResponse =
  GetAdminCustomFieldSettingsBundlesEnumByIdValuesByEnumBundleElementIdResponses[keyof GetAdminCustomFieldSettingsBundlesEnumByIdValuesByEnumBundleElementIdResponses];

export type PostAdminCustomFieldSettingsBundlesEnumByIdValuesByEnumBundleElementIdData =
  {
    body?: EnumBundleElement;
    path: {
      id: string;
      enumBundleElementId: string;
    };
    query?: {
      fields?: string;
    };
    url: "/admin/customFieldSettings/bundles/enum/{id}/values/{enumBundleElementId}";
  };

export type PostAdminCustomFieldSettingsBundlesEnumByIdValuesByEnumBundleElementIdResponses =
  {
    /**
     * single EnumBundleElement
     */
    200: EnumBundleElement;
  };

export type PostAdminCustomFieldSettingsBundlesEnumByIdValuesByEnumBundleElementIdResponse =
  PostAdminCustomFieldSettingsBundlesEnumByIdValuesByEnumBundleElementIdResponses[keyof PostAdminCustomFieldSettingsBundlesEnumByIdValuesByEnumBundleElementIdResponses];

export type GetAdminCustomFieldSettingsBundlesOwnedFieldData = {
  body?: never;
  path?: never;
  query?: {
    fields?: string;
    $skip?: number;
    $top?: number;
  };
  url: "/admin/customFieldSettings/bundles/ownedField";
};

export type GetAdminCustomFieldSettingsBundlesOwnedFieldResponses = {
  /**
   * collection of OwnedBundle
   */
  200: Array<OwnedBundle>;
};

export type GetAdminCustomFieldSettingsBundlesOwnedFieldResponse =
  GetAdminCustomFieldSettingsBundlesOwnedFieldResponses[keyof GetAdminCustomFieldSettingsBundlesOwnedFieldResponses];

export type PostAdminCustomFieldSettingsBundlesOwnedFieldData = {
  body?: OwnedBundle;
  path?: never;
  query?: {
    fields?: string;
  };
  url: "/admin/customFieldSettings/bundles/ownedField";
};

export type PostAdminCustomFieldSettingsBundlesOwnedFieldResponses = {
  /**
   * single OwnedBundle
   */
  200: OwnedBundle;
};

export type PostAdminCustomFieldSettingsBundlesOwnedFieldResponse =
  PostAdminCustomFieldSettingsBundlesOwnedFieldResponses[keyof PostAdminCustomFieldSettingsBundlesOwnedFieldResponses];

export type DeleteAdminCustomFieldSettingsBundlesOwnedFieldByIdData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: "/admin/customFieldSettings/bundles/ownedField/{id}";
};

export type DeleteAdminCustomFieldSettingsBundlesOwnedFieldByIdResponses = {
  /**
   * OK
   */
  200: unknown;
};

export type GetAdminCustomFieldSettingsBundlesOwnedFieldByIdData = {
  body?: never;
  path: {
    id: string;
  };
  query?: {
    fields?: string;
  };
  url: "/admin/customFieldSettings/bundles/ownedField/{id}";
};

export type GetAdminCustomFieldSettingsBundlesOwnedFieldByIdResponses = {
  /**
   * single OwnedBundle
   */
  200: OwnedBundle;
};

export type GetAdminCustomFieldSettingsBundlesOwnedFieldByIdResponse =
  GetAdminCustomFieldSettingsBundlesOwnedFieldByIdResponses[keyof GetAdminCustomFieldSettingsBundlesOwnedFieldByIdResponses];

export type PostAdminCustomFieldSettingsBundlesOwnedFieldByIdData = {
  body?: OwnedBundle;
  path: {
    id: string;
  };
  query?: {
    fields?: string;
  };
  url: "/admin/customFieldSettings/bundles/ownedField/{id}";
};

export type PostAdminCustomFieldSettingsBundlesOwnedFieldByIdResponses = {
  /**
   * single OwnedBundle
   */
  200: OwnedBundle;
};

export type PostAdminCustomFieldSettingsBundlesOwnedFieldByIdResponse =
  PostAdminCustomFieldSettingsBundlesOwnedFieldByIdResponses[keyof PostAdminCustomFieldSettingsBundlesOwnedFieldByIdResponses];

export type GetAdminCustomFieldSettingsBundlesOwnedFieldByIdValuesData = {
  body?: never;
  path: {
    id: string;
  };
  query?: {
    fields?: string;
    $skip?: number;
    $top?: number;
  };
  url: "/admin/customFieldSettings/bundles/ownedField/{id}/values";
};

export type GetAdminCustomFieldSettingsBundlesOwnedFieldByIdValuesResponses = {
  /**
   * collection of OwnedBundleElement
   */
  200: Array<OwnedBundleElement>;
};

export type GetAdminCustomFieldSettingsBundlesOwnedFieldByIdValuesResponse =
  GetAdminCustomFieldSettingsBundlesOwnedFieldByIdValuesResponses[keyof GetAdminCustomFieldSettingsBundlesOwnedFieldByIdValuesResponses];

export type PostAdminCustomFieldSettingsBundlesOwnedFieldByIdValuesData = {
  body?: OwnedBundleElement;
  path: {
    id: string;
  };
  query?: {
    fields?: string;
  };
  url: "/admin/customFieldSettings/bundles/ownedField/{id}/values";
};

export type PostAdminCustomFieldSettingsBundlesOwnedFieldByIdValuesResponses = {
  /**
   * single OwnedBundleElement
   */
  200: OwnedBundleElement;
};

export type PostAdminCustomFieldSettingsBundlesOwnedFieldByIdValuesResponse =
  PostAdminCustomFieldSettingsBundlesOwnedFieldByIdValuesResponses[keyof PostAdminCustomFieldSettingsBundlesOwnedFieldByIdValuesResponses];

export type DeleteAdminCustomFieldSettingsBundlesOwnedFieldByIdValuesByOwnedBundleElementIdData =
  {
    body?: never;
    path: {
      id: string;
      ownedBundleElementId: string;
    };
    query?: never;
    url: "/admin/customFieldSettings/bundles/ownedField/{id}/values/{ownedBundleElementId}";
  };

export type DeleteAdminCustomFieldSettingsBundlesOwnedFieldByIdValuesByOwnedBundleElementIdResponses =
  {
    /**
     * OK
     */
    200: unknown;
  };

export type GetAdminCustomFieldSettingsBundlesOwnedFieldByIdValuesByOwnedBundleElementIdData =
  {
    body?: never;
    path: {
      id: string;
      ownedBundleElementId: string;
    };
    query?: {
      fields?: string;
    };
    url: "/admin/customFieldSettings/bundles/ownedField/{id}/values/{ownedBundleElementId}";
  };

export type GetAdminCustomFieldSettingsBundlesOwnedFieldByIdValuesByOwnedBundleElementIdResponses =
  {
    /**
     * single OwnedBundleElement
     */
    200: OwnedBundleElement;
  };

export type GetAdminCustomFieldSettingsBundlesOwnedFieldByIdValuesByOwnedBundleElementIdResponse =
  GetAdminCustomFieldSettingsBundlesOwnedFieldByIdValuesByOwnedBundleElementIdResponses[keyof GetAdminCustomFieldSettingsBundlesOwnedFieldByIdValuesByOwnedBundleElementIdResponses];

export type PostAdminCustomFieldSettingsBundlesOwnedFieldByIdValuesByOwnedBundleElementIdData =
  {
    body?: OwnedBundleElement;
    path: {
      id: string;
      ownedBundleElementId: string;
    };
    query?: {
      fields?: string;
    };
    url: "/admin/customFieldSettings/bundles/ownedField/{id}/values/{ownedBundleElementId}";
  };

export type PostAdminCustomFieldSettingsBundlesOwnedFieldByIdValuesByOwnedBundleElementIdResponses =
  {
    /**
     * single OwnedBundleElement
     */
    200: OwnedBundleElement;
  };

export type PostAdminCustomFieldSettingsBundlesOwnedFieldByIdValuesByOwnedBundleElementIdResponse =
  PostAdminCustomFieldSettingsBundlesOwnedFieldByIdValuesByOwnedBundleElementIdResponses[keyof PostAdminCustomFieldSettingsBundlesOwnedFieldByIdValuesByOwnedBundleElementIdResponses];

export type GetAdminCustomFieldSettingsBundlesStateData = {
  body?: never;
  path?: never;
  query?: {
    fields?: string;
    $skip?: number;
    $top?: number;
  };
  url: "/admin/customFieldSettings/bundles/state";
};

export type GetAdminCustomFieldSettingsBundlesStateResponses = {
  /**
   * collection of StateBundle
   */
  200: Array<StateBundle>;
};

export type GetAdminCustomFieldSettingsBundlesStateResponse =
  GetAdminCustomFieldSettingsBundlesStateResponses[keyof GetAdminCustomFieldSettingsBundlesStateResponses];

export type PostAdminCustomFieldSettingsBundlesStateData = {
  body?: StateBundle;
  path?: never;
  query?: {
    fields?: string;
  };
  url: "/admin/customFieldSettings/bundles/state";
};

export type PostAdminCustomFieldSettingsBundlesStateResponses = {
  /**
   * single StateBundle
   */
  200: StateBundle;
};

export type PostAdminCustomFieldSettingsBundlesStateResponse =
  PostAdminCustomFieldSettingsBundlesStateResponses[keyof PostAdminCustomFieldSettingsBundlesStateResponses];

export type DeleteAdminCustomFieldSettingsBundlesStateByIdData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: "/admin/customFieldSettings/bundles/state/{id}";
};

export type DeleteAdminCustomFieldSettingsBundlesStateByIdResponses = {
  /**
   * OK
   */
  200: unknown;
};

export type GetAdminCustomFieldSettingsBundlesStateByIdData = {
  body?: never;
  path: {
    id: string;
  };
  query?: {
    fields?: string;
  };
  url: "/admin/customFieldSettings/bundles/state/{id}";
};

export type GetAdminCustomFieldSettingsBundlesStateByIdResponses = {
  /**
   * single StateBundle
   */
  200: StateBundle;
};

export type GetAdminCustomFieldSettingsBundlesStateByIdResponse =
  GetAdminCustomFieldSettingsBundlesStateByIdResponses[keyof GetAdminCustomFieldSettingsBundlesStateByIdResponses];

export type PostAdminCustomFieldSettingsBundlesStateByIdData = {
  body?: StateBundle;
  path: {
    id: string;
  };
  query?: {
    fields?: string;
  };
  url: "/admin/customFieldSettings/bundles/state/{id}";
};

export type PostAdminCustomFieldSettingsBundlesStateByIdResponses = {
  /**
   * single StateBundle
   */
  200: StateBundle;
};

export type PostAdminCustomFieldSettingsBundlesStateByIdResponse =
  PostAdminCustomFieldSettingsBundlesStateByIdResponses[keyof PostAdminCustomFieldSettingsBundlesStateByIdResponses];

export type GetAdminCustomFieldSettingsBundlesStateByIdValuesData = {
  body?: never;
  path: {
    id: string;
  };
  query?: {
    fields?: string;
    $skip?: number;
    $top?: number;
  };
  url: "/admin/customFieldSettings/bundles/state/{id}/values";
};

export type GetAdminCustomFieldSettingsBundlesStateByIdValuesResponses = {
  /**
   * collection of StateBundleElement
   */
  200: Array<StateBundleElement>;
};

export type GetAdminCustomFieldSettingsBundlesStateByIdValuesResponse =
  GetAdminCustomFieldSettingsBundlesStateByIdValuesResponses[keyof GetAdminCustomFieldSettingsBundlesStateByIdValuesResponses];

export type PostAdminCustomFieldSettingsBundlesStateByIdValuesData = {
  body?: StateBundleElement;
  path: {
    id: string;
  };
  query?: {
    fields?: string;
  };
  url: "/admin/customFieldSettings/bundles/state/{id}/values";
};

export type PostAdminCustomFieldSettingsBundlesStateByIdValuesResponses = {
  /**
   * single StateBundleElement
   */
  200: StateBundleElement;
};

export type PostAdminCustomFieldSettingsBundlesStateByIdValuesResponse =
  PostAdminCustomFieldSettingsBundlesStateByIdValuesResponses[keyof PostAdminCustomFieldSettingsBundlesStateByIdValuesResponses];

export type DeleteAdminCustomFieldSettingsBundlesStateByIdValuesByStateBundleElementIdData =
  {
    body?: never;
    path: {
      id: string;
      stateBundleElementId: string;
    };
    query?: never;
    url: "/admin/customFieldSettings/bundles/state/{id}/values/{stateBundleElementId}";
  };

export type DeleteAdminCustomFieldSettingsBundlesStateByIdValuesByStateBundleElementIdResponses =
  {
    /**
     * OK
     */
    200: unknown;
  };

export type GetAdminCustomFieldSettingsBundlesStateByIdValuesByStateBundleElementIdData =
  {
    body?: never;
    path: {
      id: string;
      stateBundleElementId: string;
    };
    query?: {
      fields?: string;
    };
    url: "/admin/customFieldSettings/bundles/state/{id}/values/{stateBundleElementId}";
  };

export type GetAdminCustomFieldSettingsBundlesStateByIdValuesByStateBundleElementIdResponses =
  {
    /**
     * single StateBundleElement
     */
    200: StateBundleElement;
  };

export type GetAdminCustomFieldSettingsBundlesStateByIdValuesByStateBundleElementIdResponse =
  GetAdminCustomFieldSettingsBundlesStateByIdValuesByStateBundleElementIdResponses[keyof GetAdminCustomFieldSettingsBundlesStateByIdValuesByStateBundleElementIdResponses];

export type PostAdminCustomFieldSettingsBundlesStateByIdValuesByStateBundleElementIdData =
  {
    body?: StateBundleElement;
    path: {
      id: string;
      stateBundleElementId: string;
    };
    query?: {
      fields?: string;
    };
    url: "/admin/customFieldSettings/bundles/state/{id}/values/{stateBundleElementId}";
  };

export type PostAdminCustomFieldSettingsBundlesStateByIdValuesByStateBundleElementIdResponses =
  {
    /**
     * single StateBundleElement
     */
    200: StateBundleElement;
  };

export type PostAdminCustomFieldSettingsBundlesStateByIdValuesByStateBundleElementIdResponse =
  PostAdminCustomFieldSettingsBundlesStateByIdValuesByStateBundleElementIdResponses[keyof PostAdminCustomFieldSettingsBundlesStateByIdValuesByStateBundleElementIdResponses];

export type GetAdminCustomFieldSettingsBundlesUserData = {
  body?: never;
  path?: never;
  query?: {
    fields?: string;
    $skip?: number;
    $top?: number;
  };
  url: "/admin/customFieldSettings/bundles/user";
};

export type GetAdminCustomFieldSettingsBundlesUserResponses = {
  /**
   * collection of UserBundle
   */
  200: Array<UserBundle>;
};

export type GetAdminCustomFieldSettingsBundlesUserResponse =
  GetAdminCustomFieldSettingsBundlesUserResponses[keyof GetAdminCustomFieldSettingsBundlesUserResponses];

export type PostAdminCustomFieldSettingsBundlesUserData = {
  body?: UserBundle;
  path?: never;
  query?: {
    fields?: string;
  };
  url: "/admin/customFieldSettings/bundles/user";
};

export type PostAdminCustomFieldSettingsBundlesUserResponses = {
  /**
   * single UserBundle
   */
  200: UserBundle;
};

export type PostAdminCustomFieldSettingsBundlesUserResponse =
  PostAdminCustomFieldSettingsBundlesUserResponses[keyof PostAdminCustomFieldSettingsBundlesUserResponses];

export type DeleteAdminCustomFieldSettingsBundlesUserByIdData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: "/admin/customFieldSettings/bundles/user/{id}";
};

export type DeleteAdminCustomFieldSettingsBundlesUserByIdResponses = {
  /**
   * OK
   */
  200: unknown;
};

export type GetAdminCustomFieldSettingsBundlesUserByIdData = {
  body?: never;
  path: {
    id: string;
  };
  query?: {
    fields?: string;
  };
  url: "/admin/customFieldSettings/bundles/user/{id}";
};

export type GetAdminCustomFieldSettingsBundlesUserByIdResponses = {
  /**
   * single UserBundle
   */
  200: UserBundle;
};

export type GetAdminCustomFieldSettingsBundlesUserByIdResponse =
  GetAdminCustomFieldSettingsBundlesUserByIdResponses[keyof GetAdminCustomFieldSettingsBundlesUserByIdResponses];

export type PostAdminCustomFieldSettingsBundlesUserByIdData = {
  body?: UserBundle;
  path: {
    id: string;
  };
  query?: {
    fields?: string;
  };
  url: "/admin/customFieldSettings/bundles/user/{id}";
};

export type PostAdminCustomFieldSettingsBundlesUserByIdResponses = {
  /**
   * single UserBundle
   */
  200: UserBundle;
};

export type PostAdminCustomFieldSettingsBundlesUserByIdResponse =
  PostAdminCustomFieldSettingsBundlesUserByIdResponses[keyof PostAdminCustomFieldSettingsBundlesUserByIdResponses];

export type GetAdminCustomFieldSettingsBundlesUserByIdAggregatedUsersData = {
  body?: never;
  path: {
    id: string;
  };
  query?: {
    fields?: string;
    $skip?: number;
    $top?: number;
  };
  url: "/admin/customFieldSettings/bundles/user/{id}/aggregatedUsers";
};

export type GetAdminCustomFieldSettingsBundlesUserByIdAggregatedUsersResponses =
  {
    /**
     * collection of User
     */
    200: Array<User>;
  };

export type GetAdminCustomFieldSettingsBundlesUserByIdAggregatedUsersResponse =
  GetAdminCustomFieldSettingsBundlesUserByIdAggregatedUsersResponses[keyof GetAdminCustomFieldSettingsBundlesUserByIdAggregatedUsersResponses];

export type GetAdminCustomFieldSettingsBundlesUserByIdGroupsData = {
  body?: never;
  path: {
    id: string;
  };
  query?: {
    fields?: string;
    $skip?: number;
    $top?: number;
  };
  url: "/admin/customFieldSettings/bundles/user/{id}/groups";
};

export type GetAdminCustomFieldSettingsBundlesUserByIdGroupsResponses = {
  /**
   * collection of UserGroup
   */
  200: Array<UserGroup>;
};

export type GetAdminCustomFieldSettingsBundlesUserByIdGroupsResponse =
  GetAdminCustomFieldSettingsBundlesUserByIdGroupsResponses[keyof GetAdminCustomFieldSettingsBundlesUserByIdGroupsResponses];

export type PostAdminCustomFieldSettingsBundlesUserByIdGroupsData = {
  body?: UserGroup;
  path: {
    id: string;
  };
  query?: {
    fields?: string;
  };
  url: "/admin/customFieldSettings/bundles/user/{id}/groups";
};

export type PostAdminCustomFieldSettingsBundlesUserByIdGroupsResponses = {
  /**
   * single UserGroup
   */
  200: UserGroup;
};

export type PostAdminCustomFieldSettingsBundlesUserByIdGroupsResponse =
  PostAdminCustomFieldSettingsBundlesUserByIdGroupsResponses[keyof PostAdminCustomFieldSettingsBundlesUserByIdGroupsResponses];

export type DeleteAdminCustomFieldSettingsBundlesUserByIdGroupsByUserGroupIdData =
  {
    body?: never;
    path: {
      id: string;
      userGroupId: string;
    };
    query?: never;
    url: "/admin/customFieldSettings/bundles/user/{id}/groups/{userGroupId}";
  };

export type DeleteAdminCustomFieldSettingsBundlesUserByIdGroupsByUserGroupIdResponses =
  {
    /**
     * OK
     */
    200: unknown;
  };

export type GetAdminCustomFieldSettingsBundlesUserByIdGroupsByUserGroupIdData =
  {
    body?: never;
    path: {
      id: string;
      userGroupId: string;
    };
    query?: {
      fields?: string;
    };
    url: "/admin/customFieldSettings/bundles/user/{id}/groups/{userGroupId}";
  };

export type GetAdminCustomFieldSettingsBundlesUserByIdGroupsByUserGroupIdResponses =
  {
    /**
     * single UserGroup
     */
    200: UserGroup;
  };

export type GetAdminCustomFieldSettingsBundlesUserByIdGroupsByUserGroupIdResponse =
  GetAdminCustomFieldSettingsBundlesUserByIdGroupsByUserGroupIdResponses[keyof GetAdminCustomFieldSettingsBundlesUserByIdGroupsByUserGroupIdResponses];

export type GetAdminCustomFieldSettingsBundlesUserByIdIndividualsData = {
  body?: never;
  path: {
    id: string;
  };
  query?: {
    fields?: string;
    $skip?: number;
    $top?: number;
  };
  url: "/admin/customFieldSettings/bundles/user/{id}/individuals";
};

export type GetAdminCustomFieldSettingsBundlesUserByIdIndividualsResponses = {
  /**
   * collection of User
   */
  200: Array<User>;
};

export type GetAdminCustomFieldSettingsBundlesUserByIdIndividualsResponse =
  GetAdminCustomFieldSettingsBundlesUserByIdIndividualsResponses[keyof GetAdminCustomFieldSettingsBundlesUserByIdIndividualsResponses];

export type PostAdminCustomFieldSettingsBundlesUserByIdIndividualsData = {
  body?: User;
  path: {
    id: string;
  };
  query?: {
    fields?: string;
  };
  url: "/admin/customFieldSettings/bundles/user/{id}/individuals";
};

export type PostAdminCustomFieldSettingsBundlesUserByIdIndividualsResponses = {
  /**
   * single User
   */
  200: User;
};

export type PostAdminCustomFieldSettingsBundlesUserByIdIndividualsResponse =
  PostAdminCustomFieldSettingsBundlesUserByIdIndividualsResponses[keyof PostAdminCustomFieldSettingsBundlesUserByIdIndividualsResponses];

export type DeleteAdminCustomFieldSettingsBundlesUserByIdIndividualsByUserIdData =
  {
    body?: never;
    path: {
      id: string;
      userId: string;
    };
    query?: never;
    url: "/admin/customFieldSettings/bundles/user/{id}/individuals/{userId}";
  };

export type DeleteAdminCustomFieldSettingsBundlesUserByIdIndividualsByUserIdResponses =
  {
    /**
     * OK
     */
    200: unknown;
  };

export type GetAdminCustomFieldSettingsBundlesUserByIdIndividualsByUserIdData =
  {
    body?: never;
    path: {
      id: string;
      userId: string;
    };
    query?: {
      fields?: string;
    };
    url: "/admin/customFieldSettings/bundles/user/{id}/individuals/{userId}";
  };

export type GetAdminCustomFieldSettingsBundlesUserByIdIndividualsByUserIdResponses =
  {
    /**
     * single User
     */
    200: User;
  };

export type GetAdminCustomFieldSettingsBundlesUserByIdIndividualsByUserIdResponse =
  GetAdminCustomFieldSettingsBundlesUserByIdIndividualsByUserIdResponses[keyof GetAdminCustomFieldSettingsBundlesUserByIdIndividualsByUserIdResponses];

export type GetAdminCustomFieldSettingsBundlesVersionData = {
  body?: never;
  path?: never;
  query?: {
    fields?: string;
    $skip?: number;
    $top?: number;
  };
  url: "/admin/customFieldSettings/bundles/version";
};

export type GetAdminCustomFieldSettingsBundlesVersionResponses = {
  /**
   * collection of VersionBundle
   */
  200: Array<VersionBundle>;
};

export type GetAdminCustomFieldSettingsBundlesVersionResponse =
  GetAdminCustomFieldSettingsBundlesVersionResponses[keyof GetAdminCustomFieldSettingsBundlesVersionResponses];

export type PostAdminCustomFieldSettingsBundlesVersionData = {
  body?: VersionBundle;
  path?: never;
  query?: {
    fields?: string;
  };
  url: "/admin/customFieldSettings/bundles/version";
};

export type PostAdminCustomFieldSettingsBundlesVersionResponses = {
  /**
   * single VersionBundle
   */
  200: VersionBundle;
};

export type PostAdminCustomFieldSettingsBundlesVersionResponse =
  PostAdminCustomFieldSettingsBundlesVersionResponses[keyof PostAdminCustomFieldSettingsBundlesVersionResponses];

export type DeleteAdminCustomFieldSettingsBundlesVersionByIdData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: "/admin/customFieldSettings/bundles/version/{id}";
};

export type DeleteAdminCustomFieldSettingsBundlesVersionByIdResponses = {
  /**
   * OK
   */
  200: unknown;
};

export type GetAdminCustomFieldSettingsBundlesVersionByIdData = {
  body?: never;
  path: {
    id: string;
  };
  query?: {
    fields?: string;
  };
  url: "/admin/customFieldSettings/bundles/version/{id}";
};

export type GetAdminCustomFieldSettingsBundlesVersionByIdResponses = {
  /**
   * single VersionBundle
   */
  200: VersionBundle;
};

export type GetAdminCustomFieldSettingsBundlesVersionByIdResponse =
  GetAdminCustomFieldSettingsBundlesVersionByIdResponses[keyof GetAdminCustomFieldSettingsBundlesVersionByIdResponses];

export type PostAdminCustomFieldSettingsBundlesVersionByIdData = {
  body?: VersionBundle;
  path: {
    id: string;
  };
  query?: {
    fields?: string;
  };
  url: "/admin/customFieldSettings/bundles/version/{id}";
};

export type PostAdminCustomFieldSettingsBundlesVersionByIdResponses = {
  /**
   * single VersionBundle
   */
  200: VersionBundle;
};

export type PostAdminCustomFieldSettingsBundlesVersionByIdResponse =
  PostAdminCustomFieldSettingsBundlesVersionByIdResponses[keyof PostAdminCustomFieldSettingsBundlesVersionByIdResponses];

export type GetAdminCustomFieldSettingsBundlesVersionByIdValuesData = {
  body?: never;
  path: {
    id: string;
  };
  query?: {
    fields?: string;
    $skip?: number;
    $top?: number;
  };
  url: "/admin/customFieldSettings/bundles/version/{id}/values";
};

export type GetAdminCustomFieldSettingsBundlesVersionByIdValuesResponses = {
  /**
   * collection of VersionBundleElement
   */
  200: Array<VersionBundleElement>;
};

export type GetAdminCustomFieldSettingsBundlesVersionByIdValuesResponse =
  GetAdminCustomFieldSettingsBundlesVersionByIdValuesResponses[keyof GetAdminCustomFieldSettingsBundlesVersionByIdValuesResponses];

export type PostAdminCustomFieldSettingsBundlesVersionByIdValuesData = {
  body?: VersionBundleElement;
  path: {
    id: string;
  };
  query?: {
    fields?: string;
  };
  url: "/admin/customFieldSettings/bundles/version/{id}/values";
};

export type PostAdminCustomFieldSettingsBundlesVersionByIdValuesResponses = {
  /**
   * single VersionBundleElement
   */
  200: VersionBundleElement;
};

export type PostAdminCustomFieldSettingsBundlesVersionByIdValuesResponse =
  PostAdminCustomFieldSettingsBundlesVersionByIdValuesResponses[keyof PostAdminCustomFieldSettingsBundlesVersionByIdValuesResponses];

export type DeleteAdminCustomFieldSettingsBundlesVersionByIdValuesByVersionBundleElementIdData =
  {
    body?: never;
    path: {
      id: string;
      versionBundleElementId: string;
    };
    query?: never;
    url: "/admin/customFieldSettings/bundles/version/{id}/values/{versionBundleElementId}";
  };

export type DeleteAdminCustomFieldSettingsBundlesVersionByIdValuesByVersionBundleElementIdResponses =
  {
    /**
     * OK
     */
    200: unknown;
  };

export type GetAdminCustomFieldSettingsBundlesVersionByIdValuesByVersionBundleElementIdData =
  {
    body?: never;
    path: {
      id: string;
      versionBundleElementId: string;
    };
    query?: {
      fields?: string;
    };
    url: "/admin/customFieldSettings/bundles/version/{id}/values/{versionBundleElementId}";
  };

export type GetAdminCustomFieldSettingsBundlesVersionByIdValuesByVersionBundleElementIdResponses =
  {
    /**
     * single VersionBundleElement
     */
    200: VersionBundleElement;
  };

export type GetAdminCustomFieldSettingsBundlesVersionByIdValuesByVersionBundleElementIdResponse =
  GetAdminCustomFieldSettingsBundlesVersionByIdValuesByVersionBundleElementIdResponses[keyof GetAdminCustomFieldSettingsBundlesVersionByIdValuesByVersionBundleElementIdResponses];

export type PostAdminCustomFieldSettingsBundlesVersionByIdValuesByVersionBundleElementIdData =
  {
    body?: VersionBundleElement;
    path: {
      id: string;
      versionBundleElementId: string;
    };
    query?: {
      fields?: string;
    };
    url: "/admin/customFieldSettings/bundles/version/{id}/values/{versionBundleElementId}";
  };

export type PostAdminCustomFieldSettingsBundlesVersionByIdValuesByVersionBundleElementIdResponses =
  {
    /**
     * single VersionBundleElement
     */
    200: VersionBundleElement;
  };

export type PostAdminCustomFieldSettingsBundlesVersionByIdValuesByVersionBundleElementIdResponse =
  PostAdminCustomFieldSettingsBundlesVersionByIdValuesByVersionBundleElementIdResponses[keyof PostAdminCustomFieldSettingsBundlesVersionByIdValuesByVersionBundleElementIdResponses];

export type GetAdminCustomFieldSettingsCustomFieldsData = {
  body?: never;
  path?: never;
  query?: {
    fields?: string;
    $skip?: number;
    $top?: number;
  };
  url: "/admin/customFieldSettings/customFields";
};

export type GetAdminCustomFieldSettingsCustomFieldsResponses = {
  /**
   * collection of CustomField
   */
  200: Array<CustomField>;
};

export type GetAdminCustomFieldSettingsCustomFieldsResponse =
  GetAdminCustomFieldSettingsCustomFieldsResponses[keyof GetAdminCustomFieldSettingsCustomFieldsResponses];

export type PostAdminCustomFieldSettingsCustomFieldsData = {
  body?: CustomField;
  path?: never;
  query?: {
    fields?: string;
  };
  url: "/admin/customFieldSettings/customFields";
};

export type PostAdminCustomFieldSettingsCustomFieldsResponses = {
  /**
   * single CustomField
   */
  200: CustomField;
};

export type PostAdminCustomFieldSettingsCustomFieldsResponse =
  PostAdminCustomFieldSettingsCustomFieldsResponses[keyof PostAdminCustomFieldSettingsCustomFieldsResponses];

export type DeleteAdminCustomFieldSettingsCustomFieldsByIdData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: "/admin/customFieldSettings/customFields/{id}";
};

export type DeleteAdminCustomFieldSettingsCustomFieldsByIdResponses = {
  /**
   * OK
   */
  200: unknown;
};

export type GetAdminCustomFieldSettingsCustomFieldsByIdData = {
  body?: never;
  path: {
    id: string;
  };
  query?: {
    fields?: string;
  };
  url: "/admin/customFieldSettings/customFields/{id}";
};

export type GetAdminCustomFieldSettingsCustomFieldsByIdResponses = {
  /**
   * single CustomField
   */
  200: CustomField;
};

export type GetAdminCustomFieldSettingsCustomFieldsByIdResponse =
  GetAdminCustomFieldSettingsCustomFieldsByIdResponses[keyof GetAdminCustomFieldSettingsCustomFieldsByIdResponses];

export type PostAdminCustomFieldSettingsCustomFieldsByIdData = {
  body?: CustomField;
  path: {
    id: string;
  };
  query?: {
    fields?: string;
  };
  url: "/admin/customFieldSettings/customFields/{id}";
};

export type PostAdminCustomFieldSettingsCustomFieldsByIdResponses = {
  /**
   * single CustomField
   */
  200: CustomField;
};

export type PostAdminCustomFieldSettingsCustomFieldsByIdResponse =
  PostAdminCustomFieldSettingsCustomFieldsByIdResponses[keyof PostAdminCustomFieldSettingsCustomFieldsByIdResponses];

export type GetAdminCustomFieldSettingsCustomFieldsByIdFieldDefaultsData = {
  body?: never;
  path: {
    id: string;
  };
  query?: {
    fields?: string;
  };
  url: "/admin/customFieldSettings/customFields/{id}/fieldDefaults";
};

export type GetAdminCustomFieldSettingsCustomFieldsByIdFieldDefaultsResponses =
  {
    /**
     * single CustomFieldDefaults
     */
    200: CustomFieldDefaults;
  };

export type GetAdminCustomFieldSettingsCustomFieldsByIdFieldDefaultsResponse =
  GetAdminCustomFieldSettingsCustomFieldsByIdFieldDefaultsResponses[keyof GetAdminCustomFieldSettingsCustomFieldsByIdFieldDefaultsResponses];

export type PostAdminCustomFieldSettingsCustomFieldsByIdFieldDefaultsData = {
  body?: CustomFieldDefaults;
  path: {
    id: string;
  };
  query?: {
    fields?: string;
  };
  url: "/admin/customFieldSettings/customFields/{id}/fieldDefaults";
};

export type PostAdminCustomFieldSettingsCustomFieldsByIdFieldDefaultsResponses =
  {
    /**
     * single CustomFieldDefaults
     */
    200: CustomFieldDefaults;
  };

export type PostAdminCustomFieldSettingsCustomFieldsByIdFieldDefaultsResponse =
  PostAdminCustomFieldSettingsCustomFieldsByIdFieldDefaultsResponses[keyof PostAdminCustomFieldSettingsCustomFieldsByIdFieldDefaultsResponses];

export type GetAdminCustomFieldSettingsCustomFieldsByIdInstancesData = {
  body?: never;
  path: {
    id: string;
  };
  query?: {
    fields?: string;
    $skip?: number;
    $top?: number;
  };
  url: "/admin/customFieldSettings/customFields/{id}/instances";
};

export type GetAdminCustomFieldSettingsCustomFieldsByIdInstancesResponses = {
  /**
   * collection of ProjectCustomField
   */
  200: Array<ProjectCustomField>;
};

export type GetAdminCustomFieldSettingsCustomFieldsByIdInstancesResponse =
  GetAdminCustomFieldSettingsCustomFieldsByIdInstancesResponses[keyof GetAdminCustomFieldSettingsCustomFieldsByIdInstancesResponses];

export type GetAdminCustomFieldSettingsTypesData = {
  body?: never;
  path?: never;
  query?: {
    fields?: string;
    $skip?: number;
    $top?: number;
  };
  url: "/admin/customFieldSettings/types";
};

export type GetAdminCustomFieldSettingsTypesResponses = {
  /**
   * collection of FieldType
   */
  200: Array<FieldType>;
};

export type GetAdminCustomFieldSettingsTypesResponse =
  GetAdminCustomFieldSettingsTypesResponses[keyof GetAdminCustomFieldSettingsTypesResponses];

export type GetAdminDatabaseBackupBackupsData = {
  body?: never;
  path?: never;
  query?: {
    fields?: string;
    $skip?: number;
    $top?: number;
  };
  url: "/admin/databaseBackup/backups";
};

export type GetAdminDatabaseBackupBackupsResponses = {
  /**
   * collection of BackupFile
   */
  200: Array<BackupFile>;
};

export type GetAdminDatabaseBackupBackupsResponse =
  GetAdminDatabaseBackupBackupsResponses[keyof GetAdminDatabaseBackupBackupsResponses];

export type GetAdminDatabaseBackupBackupsByIdData = {
  body?: never;
  path: {
    id: string;
  };
  query?: {
    fields?: string;
  };
  url: "/admin/databaseBackup/backups/{id}";
};

export type GetAdminDatabaseBackupBackupsByIdResponses = {
  /**
   * single BackupFile
   */
  200: BackupFile;
};

export type GetAdminDatabaseBackupBackupsByIdResponse =
  GetAdminDatabaseBackupBackupsByIdResponses[keyof GetAdminDatabaseBackupBackupsByIdResponses];

export type GetAdminDatabaseBackupSettingsData = {
  body?: never;
  path?: never;
  query?: {
    fields?: string;
  };
  url: "/admin/databaseBackup/settings";
};

export type GetAdminDatabaseBackupSettingsResponses = {
  /**
   * single DatabaseBackupSettings
   */
  200: DatabaseBackupSettings;
};

export type GetAdminDatabaseBackupSettingsResponse =
  GetAdminDatabaseBackupSettingsResponses[keyof GetAdminDatabaseBackupSettingsResponses];

export type PostAdminDatabaseBackupSettingsData = {
  body?: DatabaseBackupSettings;
  path?: never;
  query?: {
    fields?: string;
  };
  url: "/admin/databaseBackup/settings";
};

export type PostAdminDatabaseBackupSettingsResponses = {
  /**
   * single DatabaseBackupSettings
   */
  200: DatabaseBackupSettings;
};

export type PostAdminDatabaseBackupSettingsResponse =
  PostAdminDatabaseBackupSettingsResponses[keyof PostAdminDatabaseBackupSettingsResponses];

export type GetAdminDatabaseBackupSettingsBackupStatusData = {
  body?: never;
  path?: never;
  query?: {
    fields?: string;
  };
  url: "/admin/databaseBackup/settings/backupStatus";
};

export type GetAdminDatabaseBackupSettingsBackupStatusResponses = {
  /**
   * single BackupStatus
   */
  200: BackupStatus;
};

export type GetAdminDatabaseBackupSettingsBackupStatusResponse =
  GetAdminDatabaseBackupSettingsBackupStatusResponses[keyof GetAdminDatabaseBackupSettingsBackupStatusResponses];

export type GetAdminGlobalSettingsData = {
  body?: never;
  path?: never;
  query?: {
    fields?: string;
  };
  url: "/admin/globalSettings";
};

export type GetAdminGlobalSettingsResponses = {
  /**
   * single GlobalSettings
   */
  200: GlobalSettings;
};

export type GetAdminGlobalSettingsResponse =
  GetAdminGlobalSettingsResponses[keyof GetAdminGlobalSettingsResponses];

export type PostAdminGlobalSettingsData = {
  body?: GlobalSettings;
  path?: never;
  query?: {
    fields?: string;
  };
  url: "/admin/globalSettings";
};

export type PostAdminGlobalSettingsResponses = {
  /**
   * single GlobalSettings
   */
  200: GlobalSettings;
};

export type PostAdminGlobalSettingsResponse =
  PostAdminGlobalSettingsResponses[keyof PostAdminGlobalSettingsResponses];

export type GetAdminGlobalSettingsAppearanceSettingsData = {
  body?: never;
  path?: never;
  query?: {
    fields?: string;
  };
  url: "/admin/globalSettings/appearanceSettings";
};

export type GetAdminGlobalSettingsAppearanceSettingsResponses = {
  /**
   * single AppearanceSettings
   */
  200: AppearanceSettings;
};

export type GetAdminGlobalSettingsAppearanceSettingsResponse =
  GetAdminGlobalSettingsAppearanceSettingsResponses[keyof GetAdminGlobalSettingsAppearanceSettingsResponses];

export type PostAdminGlobalSettingsAppearanceSettingsData = {
  body?: AppearanceSettings;
  path?: never;
  query?: {
    fields?: string;
  };
  url: "/admin/globalSettings/appearanceSettings";
};

export type PostAdminGlobalSettingsAppearanceSettingsResponses = {
  /**
   * single AppearanceSettings
   */
  200: AppearanceSettings;
};

export type PostAdminGlobalSettingsAppearanceSettingsResponse =
  PostAdminGlobalSettingsAppearanceSettingsResponses[keyof PostAdminGlobalSettingsAppearanceSettingsResponses];

export type GetAdminGlobalSettingsLicenseData = {
  body?: never;
  path?: never;
  query?: {
    fields?: string;
  };
  url: "/admin/globalSettings/license";
};

export type GetAdminGlobalSettingsLicenseResponses = {
  /**
   * single License
   */
  200: License;
};

export type GetAdminGlobalSettingsLicenseResponse =
  GetAdminGlobalSettingsLicenseResponses[keyof GetAdminGlobalSettingsLicenseResponses];

export type PostAdminGlobalSettingsLicenseData = {
  body?: License;
  path?: never;
  query?: {
    fields?: string;
  };
  url: "/admin/globalSettings/license";
};

export type PostAdminGlobalSettingsLicenseResponses = {
  /**
   * single License
   */
  200: License;
};

export type PostAdminGlobalSettingsLicenseResponse =
  PostAdminGlobalSettingsLicenseResponses[keyof PostAdminGlobalSettingsLicenseResponses];

export type GetAdminGlobalSettingsLocaleSettingsData = {
  body?: never;
  path?: never;
  query?: {
    fields?: string;
  };
  url: "/admin/globalSettings/localeSettings";
};

export type GetAdminGlobalSettingsLocaleSettingsResponses = {
  /**
   * single LocaleSettings
   */
  200: LocaleSettings;
};

export type GetAdminGlobalSettingsLocaleSettingsResponse =
  GetAdminGlobalSettingsLocaleSettingsResponses[keyof GetAdminGlobalSettingsLocaleSettingsResponses];

export type PostAdminGlobalSettingsLocaleSettingsData = {
  body?: LocaleSettings;
  path?: never;
  query?: {
    fields?: string;
  };
  url: "/admin/globalSettings/localeSettings";
};

export type PostAdminGlobalSettingsLocaleSettingsResponses = {
  /**
   * single LocaleSettings
   */
  200: LocaleSettings;
};

export type PostAdminGlobalSettingsLocaleSettingsResponse =
  PostAdminGlobalSettingsLocaleSettingsResponses[keyof PostAdminGlobalSettingsLocaleSettingsResponses];

export type GetAdminGlobalSettingsNotificationSettingsData = {
  body?: never;
  path?: never;
  query?: {
    fields?: string;
  };
  url: "/admin/globalSettings/notificationSettings";
};

export type GetAdminGlobalSettingsNotificationSettingsResponses = {
  /**
   * single NotificationSettings
   */
  200: NotificationSettings;
};

export type GetAdminGlobalSettingsNotificationSettingsResponse =
  GetAdminGlobalSettingsNotificationSettingsResponses[keyof GetAdminGlobalSettingsNotificationSettingsResponses];

export type PostAdminGlobalSettingsNotificationSettingsData = {
  body?: NotificationSettings;
  path?: never;
  query?: {
    fields?: string;
  };
  url: "/admin/globalSettings/notificationSettings";
};

export type PostAdminGlobalSettingsNotificationSettingsResponses = {
  /**
   * single NotificationSettings
   */
  200: NotificationSettings;
};

export type PostAdminGlobalSettingsNotificationSettingsResponse =
  PostAdminGlobalSettingsNotificationSettingsResponses[keyof PostAdminGlobalSettingsNotificationSettingsResponses];

export type GetAdminGlobalSettingsRestSettingsData = {
  body?: never;
  path?: never;
  query?: {
    fields?: string;
  };
  url: "/admin/globalSettings/restSettings";
};

export type GetAdminGlobalSettingsRestSettingsResponses = {
  /**
   * single RestCorsSettings
   */
  200: RestCorsSettings;
};

export type GetAdminGlobalSettingsRestSettingsResponse =
  GetAdminGlobalSettingsRestSettingsResponses[keyof GetAdminGlobalSettingsRestSettingsResponses];

export type PostAdminGlobalSettingsRestSettingsData = {
  body?: RestCorsSettings;
  path?: never;
  query?: {
    fields?: string;
  };
  url: "/admin/globalSettings/restSettings";
};

export type PostAdminGlobalSettingsRestSettingsResponses = {
  /**
   * single RestCorsSettings
   */
  200: RestCorsSettings;
};

export type PostAdminGlobalSettingsRestSettingsResponse =
  PostAdminGlobalSettingsRestSettingsResponses[keyof PostAdminGlobalSettingsRestSettingsResponses];

export type GetAdminGlobalSettingsSystemSettingsData = {
  body?: never;
  path?: never;
  query?: {
    fields?: string;
  };
  url: "/admin/globalSettings/systemSettings";
};

export type GetAdminGlobalSettingsSystemSettingsResponses = {
  /**
   * single SystemSettings
   */
  200: SystemSettings;
};

export type GetAdminGlobalSettingsSystemSettingsResponse =
  GetAdminGlobalSettingsSystemSettingsResponses[keyof GetAdminGlobalSettingsSystemSettingsResponses];

export type PostAdminGlobalSettingsSystemSettingsData = {
  body?: SystemSettings;
  path?: never;
  query?: {
    fields?: string;
  };
  url: "/admin/globalSettings/systemSettings";
};

export type PostAdminGlobalSettingsSystemSettingsResponses = {
  /**
   * single SystemSettings
   */
  200: SystemSettings;
};

export type PostAdminGlobalSettingsSystemSettingsResponse =
  PostAdminGlobalSettingsSystemSettingsResponses[keyof PostAdminGlobalSettingsSystemSettingsResponses];

export type GetAdminProjectsData = {
  body?: never;
  path?: never;
  query?: {
    fields?: string;
    $skip?: number;
    $top?: number;
  };
  url: "/admin/projects";
};

export type GetAdminProjectsResponses = {
  /**
   * collection of Project
   */
  200: Array<Project>;
};

export type GetAdminProjectsResponse =
  GetAdminProjectsResponses[keyof GetAdminProjectsResponses];

export type PostAdminProjectsData = {
  body?: Project;
  path?: never;
  query?: {
    /**
     * If the `template` is not specified, then the new project will use the default settings.
     * <emphasis>Optional</emphasis>. Lets you specify the template to use for the new project.
     * Possible values: `scrum`, `kanban`.
     */
    template?: string;
    fields?: string;
  };
  url: "/admin/projects";
};

export type PostAdminProjectsResponses = {
  /**
   * single Project
   */
  200: Project;
};

export type PostAdminProjectsResponse =
  PostAdminProjectsResponses[keyof PostAdminProjectsResponses];

export type DeleteAdminProjectsByIdData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: "/admin/projects/{id}";
};

export type DeleteAdminProjectsByIdResponses = {
  /**
   * OK
   */
  200: unknown;
};

export type GetAdminProjectsByIdData = {
  body?: never;
  path: {
    id: string;
  };
  query?: {
    fields?: string;
  };
  url: "/admin/projects/{id}";
};

export type GetAdminProjectsByIdResponses = {
  /**
   * single Project
   */
  200: Project;
};

export type GetAdminProjectsByIdResponse =
  GetAdminProjectsByIdResponses[keyof GetAdminProjectsByIdResponses];

export type PostAdminProjectsByIdData = {
  body?: Project;
  path: {
    id: string;
  };
  query?: {
    fields?: string;
  };
  url: "/admin/projects/{id}";
};

export type PostAdminProjectsByIdResponses = {
  /**
   * single Project
   */
  200: Project;
};

export type PostAdminProjectsByIdResponse =
  PostAdminProjectsByIdResponses[keyof PostAdminProjectsByIdResponses];

export type GetAdminProjectsByIdArticlesData = {
  body?: never;
  path: {
    id: string;
  };
  query?: {
    fields?: string;
    $skip?: number;
    $top?: number;
  };
  url: "/admin/projects/{id}/articles";
};

export type GetAdminProjectsByIdArticlesResponses = {
  /**
   * collection of Article
   */
  200: Array<Article>;
};

export type GetAdminProjectsByIdArticlesResponse =
  GetAdminProjectsByIdArticlesResponses[keyof GetAdminProjectsByIdArticlesResponses];

export type GetAdminProjectsByIdCustomFieldsData = {
  body?: never;
  path: {
    id: string;
  };
  query?: {
    fields?: string;
    $skip?: number;
    $top?: number;
  };
  url: "/admin/projects/{id}/customFields";
};

export type GetAdminProjectsByIdCustomFieldsResponses = {
  /**
   * collection of ProjectCustomField
   */
  200: Array<ProjectCustomField>;
};

export type GetAdminProjectsByIdCustomFieldsResponse =
  GetAdminProjectsByIdCustomFieldsResponses[keyof GetAdminProjectsByIdCustomFieldsResponses];

export type PostAdminProjectsByIdCustomFieldsData = {
  body?: ProjectCustomField;
  path: {
    id: string;
  };
  query?: {
    fields?: string;
  };
  url: "/admin/projects/{id}/customFields";
};

export type PostAdminProjectsByIdCustomFieldsResponses = {
  /**
   * single ProjectCustomField
   */
  200: ProjectCustomField;
};

export type PostAdminProjectsByIdCustomFieldsResponse =
  PostAdminProjectsByIdCustomFieldsResponses[keyof PostAdminProjectsByIdCustomFieldsResponses];

export type DeleteAdminProjectsByIdCustomFieldsByProjectCustomFieldIdData = {
  body?: never;
  path: {
    id: string;
    projectCustomFieldId: string;
  };
  query?: never;
  url: "/admin/projects/{id}/customFields/{projectCustomFieldId}";
};

export type DeleteAdminProjectsByIdCustomFieldsByProjectCustomFieldIdResponses =
  {
    /**
     * OK
     */
    200: unknown;
  };

export type GetAdminProjectsByIdCustomFieldsByProjectCustomFieldIdData = {
  body?: never;
  path: {
    id: string;
    projectCustomFieldId: string;
  };
  query?: {
    fields?: string;
  };
  url: "/admin/projects/{id}/customFields/{projectCustomFieldId}";
};

export type GetAdminProjectsByIdCustomFieldsByProjectCustomFieldIdResponses = {
  /**
   * single ProjectCustomField
   */
  200: ProjectCustomField;
};

export type GetAdminProjectsByIdCustomFieldsByProjectCustomFieldIdResponse =
  GetAdminProjectsByIdCustomFieldsByProjectCustomFieldIdResponses[keyof GetAdminProjectsByIdCustomFieldsByProjectCustomFieldIdResponses];

export type PostAdminProjectsByIdCustomFieldsByProjectCustomFieldIdData = {
  body?: ProjectCustomField;
  path: {
    id: string;
    projectCustomFieldId: string;
  };
  query?: {
    fields?: string;
  };
  url: "/admin/projects/{id}/customFields/{projectCustomFieldId}";
};

export type PostAdminProjectsByIdCustomFieldsByProjectCustomFieldIdResponses = {
  /**
   * single ProjectCustomField
   */
  200: ProjectCustomField;
};

export type PostAdminProjectsByIdCustomFieldsByProjectCustomFieldIdResponse =
  PostAdminProjectsByIdCustomFieldsByProjectCustomFieldIdResponses[keyof PostAdminProjectsByIdCustomFieldsByProjectCustomFieldIdResponses];

export type GetAdminProjectsByIdIssuesData = {
  body?: never;
  path: {
    id: string;
  };
  query?: {
    /**
     * <p>The name of the custom field to show in the response. When you use this parameter and request the custom field data in the request URL, the response only shows the requested custom fields instead of all of them.</p><p>To show more than one custom field, use this parameter several times.</p><p>See Sample 2 for reference.</p>
     */
    customFields?: string;
    fields?: string;
    $skip?: number;
    $top?: number;
  };
  url: "/admin/projects/{id}/issues";
};

export type GetAdminProjectsByIdIssuesResponses = {
  /**
   * collection of Issue
   */
  200: Array<Issue>;
};

export type GetAdminProjectsByIdIssuesResponse =
  GetAdminProjectsByIdIssuesResponses[keyof GetAdminProjectsByIdIssuesResponses];

export type PostAdminProjectsByIdIssuesData = {
  body?: Issue;
  path: {
    id: string;
  };
  query?: {
    /**
     * Set this parameter to `true` if no notifications should be sent on changes made by this request. This doesn't mute notifications sent by any workflow rules. Using this parameter requires <control>Apply Commands Silently</control> permission in all projects affected by the request. Available since 2021.3.
     */
    muteUpdateNotifications?: boolean;
    fields?: string;
  };
  url: "/admin/projects/{id}/issues";
};

export type PostAdminProjectsByIdIssuesResponses = {
  /**
   * single Issue
   */
  200: Issue;
};

export type PostAdminProjectsByIdIssuesResponse =
  PostAdminProjectsByIdIssuesResponses[keyof PostAdminProjectsByIdIssuesResponses];

export type DeleteAdminProjectsByIdIssuesByIssueIdData = {
  body?: never;
  path: {
    id: string;
    issueId: string;
  };
  query?: never;
  url: "/admin/projects/{id}/issues/{issueId}";
};

export type DeleteAdminProjectsByIdIssuesByIssueIdResponses = {
  /**
   * OK
   */
  200: unknown;
};

export type GetAdminProjectsByIdIssuesByIssueIdData = {
  body?: never;
  path: {
    id: string;
    issueId: string;
  };
  query?: {
    fields?: string;
  };
  url: "/admin/projects/{id}/issues/{issueId}";
};

export type GetAdminProjectsByIdIssuesByIssueIdResponses = {
  /**
   * single Issue
   */
  200: Issue;
};

export type GetAdminProjectsByIdIssuesByIssueIdResponse =
  GetAdminProjectsByIdIssuesByIssueIdResponses[keyof GetAdminProjectsByIdIssuesByIssueIdResponses];

export type PostAdminProjectsByIdIssuesByIssueIdData = {
  body?: Issue;
  path: {
    id: string;
    issueId: string;
  };
  query?: {
    /**
     * Set this parameter to `true` if no notifications should be sent on changes made by this request. This doesn't mute notifications sent by any workflow rules. Using this parameter requires <control>Apply Commands Silently</control> permission in all projects affected by the request. Available since 2021.3.
     */
    muteUpdateNotifications?: boolean;
    fields?: string;
  };
  url: "/admin/projects/{id}/issues/{issueId}";
};

export type PostAdminProjectsByIdIssuesByIssueIdResponses = {
  /**
   * single Issue
   */
  200: Issue;
};

export type PostAdminProjectsByIdIssuesByIssueIdResponse =
  PostAdminProjectsByIdIssuesByIssueIdResponses[keyof PostAdminProjectsByIdIssuesByIssueIdResponses];

export type GetAdminProjectsByIdTimeTrackingSettingsData = {
  body?: never;
  path: {
    id: string;
  };
  query?: {
    fields?: string;
  };
  url: "/admin/projects/{id}/timeTrackingSettings";
};

export type GetAdminProjectsByIdTimeTrackingSettingsResponses = {
  /**
   * single ProjectTimeTrackingSettings
   */
  200: ProjectTimeTrackingSettings;
};

export type GetAdminProjectsByIdTimeTrackingSettingsResponse =
  GetAdminProjectsByIdTimeTrackingSettingsResponses[keyof GetAdminProjectsByIdTimeTrackingSettingsResponses];

export type PostAdminProjectsByIdTimeTrackingSettingsData = {
  body?: ProjectTimeTrackingSettings;
  path: {
    id: string;
  };
  query?: {
    fields?: string;
  };
  url: "/admin/projects/{id}/timeTrackingSettings";
};

export type PostAdminProjectsByIdTimeTrackingSettingsResponses = {
  /**
   * single ProjectTimeTrackingSettings
   */
  200: ProjectTimeTrackingSettings;
};

export type PostAdminProjectsByIdTimeTrackingSettingsResponse =
  PostAdminProjectsByIdTimeTrackingSettingsResponses[keyof PostAdminProjectsByIdTimeTrackingSettingsResponses];

export type GetAdminProjectsByIdTimeTrackingSettingsWorkItemTypesData = {
  body?: never;
  path: {
    id: string;
  };
  query?: {
    fields?: string;
    $skip?: number;
    $top?: number;
  };
  url: "/admin/projects/{id}/timeTrackingSettings/workItemTypes";
};

export type GetAdminProjectsByIdTimeTrackingSettingsWorkItemTypesResponses = {
  /**
   * collection of WorkItemType
   */
  200: Array<WorkItemType>;
};

export type GetAdminProjectsByIdTimeTrackingSettingsWorkItemTypesResponse =
  GetAdminProjectsByIdTimeTrackingSettingsWorkItemTypesResponses[keyof GetAdminProjectsByIdTimeTrackingSettingsWorkItemTypesResponses];

export type PostAdminProjectsByIdTimeTrackingSettingsWorkItemTypesData = {
  body?: WorkItemType;
  path: {
    id: string;
  };
  query?: {
    fields?: string;
  };
  url: "/admin/projects/{id}/timeTrackingSettings/workItemTypes";
};

export type PostAdminProjectsByIdTimeTrackingSettingsWorkItemTypesResponses = {
  /**
   * single WorkItemType
   */
  200: WorkItemType;
};

export type PostAdminProjectsByIdTimeTrackingSettingsWorkItemTypesResponse =
  PostAdminProjectsByIdTimeTrackingSettingsWorkItemTypesResponses[keyof PostAdminProjectsByIdTimeTrackingSettingsWorkItemTypesResponses];

export type DeleteAdminProjectsByIdTimeTrackingSettingsWorkItemTypesByWorkItemTypeIdData =
  {
    body?: never;
    path: {
      id: string;
      workItemTypeId: string;
    };
    query?: never;
    url: "/admin/projects/{id}/timeTrackingSettings/workItemTypes/{workItemTypeId}";
  };

export type DeleteAdminProjectsByIdTimeTrackingSettingsWorkItemTypesByWorkItemTypeIdResponses =
  {
    /**
     * OK
     */
    200: unknown;
  };

export type GetAdminProjectsByIdTimeTrackingSettingsWorkItemTypesByWorkItemTypeIdData =
  {
    body?: never;
    path: {
      id: string;
      workItemTypeId: string;
    };
    query?: {
      fields?: string;
    };
    url: "/admin/projects/{id}/timeTrackingSettings/workItemTypes/{workItemTypeId}";
  };

export type GetAdminProjectsByIdTimeTrackingSettingsWorkItemTypesByWorkItemTypeIdResponses =
  {
    /**
     * single WorkItemType
     */
    200: WorkItemType;
  };

export type GetAdminProjectsByIdTimeTrackingSettingsWorkItemTypesByWorkItemTypeIdResponse =
  GetAdminProjectsByIdTimeTrackingSettingsWorkItemTypesByWorkItemTypeIdResponses[keyof GetAdminProjectsByIdTimeTrackingSettingsWorkItemTypesByWorkItemTypeIdResponses];

export type GetAdminTelemetryData = {
  body?: never;
  path?: never;
  query?: {
    fields?: string;
  };
  url: "/admin/telemetry";
};

export type GetAdminTelemetryResponses = {
  /**
   * single Telemetry
   */
  200: Telemetry;
};

export type GetAdminTelemetryResponse =
  GetAdminTelemetryResponses[keyof GetAdminTelemetryResponses];

export type GetAdminTimeTrackingSettingsData = {
  body?: never;
  path?: never;
  query?: {
    fields?: string;
  };
  url: "/admin/timeTrackingSettings";
};

export type GetAdminTimeTrackingSettingsResponses = {
  /**
   * single GlobalTimeTrackingSettings
   */
  200: GlobalTimeTrackingSettings;
};

export type GetAdminTimeTrackingSettingsResponse =
  GetAdminTimeTrackingSettingsResponses[keyof GetAdminTimeTrackingSettingsResponses];

export type GetAdminTimeTrackingSettingsWorkItemTypesData = {
  body?: never;
  path?: never;
  query?: {
    fields?: string;
    $skip?: number;
    $top?: number;
  };
  url: "/admin/timeTrackingSettings/workItemTypes";
};

export type GetAdminTimeTrackingSettingsWorkItemTypesResponses = {
  /**
   * collection of WorkItemType
   */
  200: Array<WorkItemType>;
};

export type GetAdminTimeTrackingSettingsWorkItemTypesResponse =
  GetAdminTimeTrackingSettingsWorkItemTypesResponses[keyof GetAdminTimeTrackingSettingsWorkItemTypesResponses];

export type PostAdminTimeTrackingSettingsWorkItemTypesData = {
  body?: WorkItemType;
  path?: never;
  query?: {
    fields?: string;
  };
  url: "/admin/timeTrackingSettings/workItemTypes";
};

export type PostAdminTimeTrackingSettingsWorkItemTypesResponses = {
  /**
   * single WorkItemType
   */
  200: WorkItemType;
};

export type PostAdminTimeTrackingSettingsWorkItemTypesResponse =
  PostAdminTimeTrackingSettingsWorkItemTypesResponses[keyof PostAdminTimeTrackingSettingsWorkItemTypesResponses];

export type DeleteAdminTimeTrackingSettingsWorkItemTypesByWorkItemTypeIdData = {
  body?: never;
  path: {
    workItemTypeId: string;
  };
  query?: never;
  url: "/admin/timeTrackingSettings/workItemTypes/{workItemTypeId}";
};

export type DeleteAdminTimeTrackingSettingsWorkItemTypesByWorkItemTypeIdResponses =
  {
    /**
     * OK
     */
    200: unknown;
  };

export type GetAdminTimeTrackingSettingsWorkItemTypesByWorkItemTypeIdData = {
  body?: never;
  path: {
    workItemTypeId: string;
  };
  query?: {
    fields?: string;
  };
  url: "/admin/timeTrackingSettings/workItemTypes/{workItemTypeId}";
};

export type GetAdminTimeTrackingSettingsWorkItemTypesByWorkItemTypeIdResponses =
  {
    /**
     * single WorkItemType
     */
    200: WorkItemType;
  };

export type GetAdminTimeTrackingSettingsWorkItemTypesByWorkItemTypeIdResponse =
  GetAdminTimeTrackingSettingsWorkItemTypesByWorkItemTypeIdResponses[keyof GetAdminTimeTrackingSettingsWorkItemTypesByWorkItemTypeIdResponses];

export type PostAdminTimeTrackingSettingsWorkItemTypesByWorkItemTypeIdData = {
  body?: WorkItemType;
  path: {
    workItemTypeId: string;
  };
  query?: {
    fields?: string;
  };
  url: "/admin/timeTrackingSettings/workItemTypes/{workItemTypeId}";
};

export type PostAdminTimeTrackingSettingsWorkItemTypesByWorkItemTypeIdResponses =
  {
    /**
     * single WorkItemType
     */
    200: WorkItemType;
  };

export type PostAdminTimeTrackingSettingsWorkItemTypesByWorkItemTypeIdResponse =
  PostAdminTimeTrackingSettingsWorkItemTypesByWorkItemTypeIdResponses[keyof PostAdminTimeTrackingSettingsWorkItemTypesByWorkItemTypeIdResponses];

export type GetAdminTimeTrackingSettingsWorkTimeSettingsData = {
  body?: never;
  path?: never;
  query?: {
    fields?: string;
  };
  url: "/admin/timeTrackingSettings/workTimeSettings";
};

export type GetAdminTimeTrackingSettingsWorkTimeSettingsResponses = {
  /**
   * single WorkTimeSettings
   */
  200: WorkTimeSettings;
};

export type GetAdminTimeTrackingSettingsWorkTimeSettingsResponse =
  GetAdminTimeTrackingSettingsWorkTimeSettingsResponses[keyof GetAdminTimeTrackingSettingsWorkTimeSettingsResponses];

export type PostAdminTimeTrackingSettingsWorkTimeSettingsData = {
  body?: WorkTimeSettings;
  path?: never;
  query?: {
    fields?: string;
  };
  url: "/admin/timeTrackingSettings/workTimeSettings";
};

export type PostAdminTimeTrackingSettingsWorkTimeSettingsResponses = {
  /**
   * single WorkTimeSettings
   */
  200: WorkTimeSettings;
};

export type PostAdminTimeTrackingSettingsWorkTimeSettingsResponse =
  PostAdminTimeTrackingSettingsWorkTimeSettingsResponses[keyof PostAdminTimeTrackingSettingsWorkTimeSettingsResponses];

export type GetAgilesData = {
  body?: never;
  path?: never;
  query?: {
    fields?: string;
    $skip?: number;
    $top?: number;
  };
  url: "/agiles";
};

export type GetAgilesResponses = {
  /**
   * collection of Agile
   */
  200: Array<Agile>;
};

export type GetAgilesResponse = GetAgilesResponses[keyof GetAgilesResponses];

export type PostAgilesData = {
  body?: Agile;
  path?: never;
  query?: {
    /**
     * The name of the board template that should be used. Possible values: `kanban`, `scrum`, `version`, `custom`, `personal`.
     */
    template?: string;
    fields?: string;
  };
  url: "/agiles";
};

export type PostAgilesResponses = {
  /**
   * single Agile
   */
  200: Agile;
};

export type PostAgilesResponse = PostAgilesResponses[keyof PostAgilesResponses];

export type DeleteAgilesByIdData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: "/agiles/{id}";
};

export type DeleteAgilesByIdResponses = {
  /**
   * OK
   */
  200: unknown;
};

export type GetAgilesByIdData = {
  body?: never;
  path: {
    id: string;
  };
  query?: {
    fields?: string;
  };
  url: "/agiles/{id}";
};

export type GetAgilesByIdResponses = {
  /**
   * single Agile
   */
  200: Agile;
};

export type GetAgilesByIdResponse =
  GetAgilesByIdResponses[keyof GetAgilesByIdResponses];

export type PostAgilesByIdData = {
  body?: Agile;
  path: {
    id: string;
  };
  query?: {
    fields?: string;
  };
  url: "/agiles/{id}";
};

export type PostAgilesByIdResponses = {
  /**
   * single Agile
   */
  200: Agile;
};

export type PostAgilesByIdResponse =
  PostAgilesByIdResponses[keyof PostAgilesByIdResponses];

export type GetAgilesByIdSprintsData = {
  body?: never;
  path: {
    id: string;
  };
  query?: {
    fields?: string;
    $skip?: number;
    $top?: number;
  };
  url: "/agiles/{id}/sprints";
};

export type GetAgilesByIdSprintsResponses = {
  /**
   * collection of Sprint
   */
  200: Array<Sprint>;
};

export type GetAgilesByIdSprintsResponse =
  GetAgilesByIdSprintsResponses[keyof GetAgilesByIdSprintsResponses];

export type PostAgilesByIdSprintsData = {
  body?: Sprint;
  path: {
    id: string;
  };
  query?: {
    /**
     * Set this parameter to `true` if no notifications should be sent on changes made by this request. This doesn't mute notifications sent by any workflow rules. Using this parameter requires <control>Apply Commands Silently</control> permission in all projects affected by the request. Available since 2021.3.
     */
    muteUpdateNotifications?: boolean;
    fields?: string;
  };
  url: "/agiles/{id}/sprints";
};

export type PostAgilesByIdSprintsResponses = {
  /**
   * single Sprint
   */
  200: Sprint;
};

export type PostAgilesByIdSprintsResponse =
  PostAgilesByIdSprintsResponses[keyof PostAgilesByIdSprintsResponses];

export type DeleteAgilesByIdSprintsBySprintIdData = {
  body?: never;
  path: {
    id: string;
    sprintId: string;
  };
  query?: never;
  url: "/agiles/{id}/sprints/{sprintId}";
};

export type DeleteAgilesByIdSprintsBySprintIdResponses = {
  /**
   * OK
   */
  200: unknown;
};

export type GetAgilesByIdSprintsBySprintIdData = {
  body?: never;
  path: {
    id: string;
    sprintId: string;
  };
  query?: {
    fields?: string;
  };
  url: "/agiles/{id}/sprints/{sprintId}";
};

export type GetAgilesByIdSprintsBySprintIdResponses = {
  /**
   * single Sprint
   */
  200: Sprint;
};

export type GetAgilesByIdSprintsBySprintIdResponse =
  GetAgilesByIdSprintsBySprintIdResponses[keyof GetAgilesByIdSprintsBySprintIdResponses];

export type PostAgilesByIdSprintsBySprintIdData = {
  body?: Sprint;
  path: {
    id: string;
    sprintId: string;
  };
  query?: {
    fields?: string;
  };
  url: "/agiles/{id}/sprints/{sprintId}";
};

export type PostAgilesByIdSprintsBySprintIdResponses = {
  /**
   * single Sprint
   */
  200: Sprint;
};

export type PostAgilesByIdSprintsBySprintIdResponse =
  PostAgilesByIdSprintsBySprintIdResponses[keyof PostAgilesByIdSprintsBySprintIdResponses];

export type GetArticlesData = {
  body?: never;
  path?: never;
  query?: {
    fields?: string;
    $skip?: number;
    $top?: number;
  };
  url: "/articles";
};

export type GetArticlesResponses = {
  /**
   * collection of Article
   */
  200: Array<Article>;
};

export type GetArticlesResponse =
  GetArticlesResponses[keyof GetArticlesResponses];

export type PostArticlesData = {
  body?: Article;
  path?: never;
  query?: {
    /**
     * ID of a draft to publish as a new article. If no `draftId` is provided, the article is created from scratch. In this case, you must specify the project in the request payload.
     */
    draftId?: string;
    /**
     * Set this parameter to `true` if no notifications should be sent on changes made by this request. This doesn't mute notifications sent by any workflow rules. Using this parameter requires Apply Commands Silently permission in all projects affected by the request. Available since 2021.3.
     */
    muteUpdateNotifications?: boolean;
    fields?: string;
  };
  url: "/articles";
};

export type PostArticlesResponses = {
  /**
   * single Article
   */
  200: Article;
};

export type PostArticlesResponse =
  PostArticlesResponses[keyof PostArticlesResponses];

export type DeleteArticlesByIdData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: "/articles/{id}";
};

export type DeleteArticlesByIdResponses = {
  /**
   * OK
   */
  200: unknown;
};

export type GetArticlesByIdData = {
  body?: never;
  path: {
    id: string;
  };
  query?: {
    fields?: string;
  };
  url: "/articles/{id}";
};

export type GetArticlesByIdResponses = {
  /**
   * single Article
   */
  200: Article;
};

export type GetArticlesByIdResponse =
  GetArticlesByIdResponses[keyof GetArticlesByIdResponses];

export type PostArticlesByIdData = {
  body?: Article;
  path: {
    id: string;
  };
  query?: {
    /**
     * Set this parameter to `true` if no notifications should be sent on changes made by this request. This doesn't mute notifications sent by any workflow rules. Using this parameter requires Apply Commands Silently permission in all projects affected by the request. Available since 2021.3.
     */
    muteUpdateNotifications?: boolean;
    fields?: string;
  };
  url: "/articles/{id}";
};

export type PostArticlesByIdResponses = {
  /**
   * single Article
   */
  200: Article;
};

export type PostArticlesByIdResponse =
  PostArticlesByIdResponses[keyof PostArticlesByIdResponses];

export type GetArticlesByIdAttachmentsData = {
  body?: never;
  path: {
    id: string;
  };
  query?: {
    fields?: string;
    $skip?: number;
    $top?: number;
  };
  url: "/articles/{id}/attachments";
};

export type GetArticlesByIdAttachmentsResponses = {
  /**
   * collection of ArticleAttachment
   */
  200: Array<ArticleAttachment>;
};

export type GetArticlesByIdAttachmentsResponse =
  GetArticlesByIdAttachmentsResponses[keyof GetArticlesByIdAttachmentsResponses];

export type PostArticlesByIdAttachmentsData = {
  body?: ArticleAttachment;
  path: {
    id: string;
  };
  query?: {
    /**
     * Set this parameter to `true` if no notifications should be sent on changes made by this request. This doesn't mute notifications sent by any workflow rules. Using this parameter requires <control>Apply Commands Silently</control> permission in all projects affected by the request. Available since 2021.3.
     */
    muteUpdateNotifications?: boolean;
    fields?: string;
  };
  url: "/articles/{id}/attachments";
};

export type PostArticlesByIdAttachmentsResponses = {
  /**
   * single ArticleAttachment
   */
  200: ArticleAttachment;
};

export type PostArticlesByIdAttachmentsResponse =
  PostArticlesByIdAttachmentsResponses[keyof PostArticlesByIdAttachmentsResponses];

export type DeleteArticlesByIdAttachmentsByArticleAttachmentIdData = {
  body?: never;
  path: {
    id: string;
    articleAttachmentId: string;
  };
  query?: never;
  url: "/articles/{id}/attachments/{articleAttachmentId}";
};

export type DeleteArticlesByIdAttachmentsByArticleAttachmentIdResponses = {
  /**
   * OK
   */
  200: unknown;
};

export type GetArticlesByIdAttachmentsByArticleAttachmentIdData = {
  body?: never;
  path: {
    id: string;
    articleAttachmentId: string;
  };
  query?: {
    fields?: string;
  };
  url: "/articles/{id}/attachments/{articleAttachmentId}";
};

export type GetArticlesByIdAttachmentsByArticleAttachmentIdResponses = {
  /**
   * single ArticleAttachment
   */
  200: ArticleAttachment;
};

export type GetArticlesByIdAttachmentsByArticleAttachmentIdResponse =
  GetArticlesByIdAttachmentsByArticleAttachmentIdResponses[keyof GetArticlesByIdAttachmentsByArticleAttachmentIdResponses];

export type PostArticlesByIdAttachmentsByArticleAttachmentIdData = {
  body?: ArticleAttachment;
  path: {
    id: string;
    articleAttachmentId: string;
  };
  query?: {
    fields?: string;
  };
  url: "/articles/{id}/attachments/{articleAttachmentId}";
};

export type PostArticlesByIdAttachmentsByArticleAttachmentIdResponses = {
  /**
   * single ArticleAttachment
   */
  200: ArticleAttachment;
};

export type PostArticlesByIdAttachmentsByArticleAttachmentIdResponse =
  PostArticlesByIdAttachmentsByArticleAttachmentIdResponses[keyof PostArticlesByIdAttachmentsByArticleAttachmentIdResponses];

export type GetArticlesByIdChildArticlesData = {
  body?: never;
  path: {
    id: string;
  };
  query?: {
    fields?: string;
    $skip?: number;
    $top?: number;
  };
  url: "/articles/{id}/childArticles";
};

export type GetArticlesByIdChildArticlesResponses = {
  /**
   * collection of Article
   */
  200: Array<Article>;
};

export type GetArticlesByIdChildArticlesResponse =
  GetArticlesByIdChildArticlesResponses[keyof GetArticlesByIdChildArticlesResponses];

export type PostArticlesByIdChildArticlesData = {
  body?: Article;
  path: {
    id: string;
  };
  query?: {
    /**
     * Set this parameter to `true` if no notifications should be sent on changes made by this request. This doesn't mute notifications sent by any workflow rules. Using this parameter requires Apply Commands Silently permission in all projects affected by the request. Available since 2021.3.
     */
    muteUpdateNotifications?: boolean;
    fields?: string;
  };
  url: "/articles/{id}/childArticles";
};

export type PostArticlesByIdChildArticlesResponses = {
  /**
   * single Article
   */
  200: Article;
};

export type PostArticlesByIdChildArticlesResponse =
  PostArticlesByIdChildArticlesResponses[keyof PostArticlesByIdChildArticlesResponses];

export type DeleteArticlesByIdChildArticlesByArticleIdData = {
  body?: never;
  path: {
    id: string;
    articleId: string;
  };
  query?: never;
  url: "/articles/{id}/childArticles/{articleId}";
};

export type DeleteArticlesByIdChildArticlesByArticleIdResponses = {
  /**
   * OK
   */
  200: unknown;
};

export type GetArticlesByIdChildArticlesByArticleIdData = {
  body?: never;
  path: {
    id: string;
    articleId: string;
  };
  query?: {
    fields?: string;
  };
  url: "/articles/{id}/childArticles/{articleId}";
};

export type GetArticlesByIdChildArticlesByArticleIdResponses = {
  /**
   * single Article
   */
  200: Article;
};

export type GetArticlesByIdChildArticlesByArticleIdResponse =
  GetArticlesByIdChildArticlesByArticleIdResponses[keyof GetArticlesByIdChildArticlesByArticleIdResponses];

export type PostArticlesByIdChildArticlesByArticleIdData = {
  body?: Article;
  path: {
    id: string;
    articleId: string;
  };
  query?: {
    /**
     * Set this parameter to `true` if no notifications should be sent on changes made by this request. This doesn't mute notifications sent by any workflow rules. Using this parameter requires Apply Commands Silently permission in all projects affected by the request. Available since 2021.3.
     */
    muteUpdateNotifications?: boolean;
    fields?: string;
  };
  url: "/articles/{id}/childArticles/{articleId}";
};

export type PostArticlesByIdChildArticlesByArticleIdResponses = {
  /**
   * single Article
   */
  200: Article;
};

export type PostArticlesByIdChildArticlesByArticleIdResponse =
  PostArticlesByIdChildArticlesByArticleIdResponses[keyof PostArticlesByIdChildArticlesByArticleIdResponses];

export type GetArticlesByIdCommentsData = {
  body?: never;
  path: {
    id: string;
  };
  query?: {
    fields?: string;
    $skip?: number;
    $top?: number;
  };
  url: "/articles/{id}/comments";
};

export type GetArticlesByIdCommentsResponses = {
  /**
   * collection of ArticleComment
   */
  200: Array<ArticleComment>;
};

export type GetArticlesByIdCommentsResponse =
  GetArticlesByIdCommentsResponses[keyof GetArticlesByIdCommentsResponses];

export type PostArticlesByIdCommentsData = {
  body?: ArticleComment;
  path: {
    id: string;
  };
  query?: {
    /**
     * The ID of an existing draft that should be published. This parameter is optional.
     */
    draftId?: string;
    /**
     * Set this parameter to `true` if no notifications should be sent on changes made by this request. This doesn't mute notifications sent by any workflow rules. Using this parameter requires <control>Apply Commands Silently</control> permission in all projects affected by the request. Available since 2021.3.
     */
    muteUpdateNotifications?: boolean;
    fields?: string;
  };
  url: "/articles/{id}/comments";
};

export type PostArticlesByIdCommentsResponses = {
  /**
   * single ArticleComment
   */
  200: ArticleComment;
};

export type PostArticlesByIdCommentsResponse =
  PostArticlesByIdCommentsResponses[keyof PostArticlesByIdCommentsResponses];

export type DeleteArticlesByIdCommentsByArticleCommentIdData = {
  body?: never;
  path: {
    id: string;
    articleCommentId: string;
  };
  query?: never;
  url: "/articles/{id}/comments/{articleCommentId}";
};

export type DeleteArticlesByIdCommentsByArticleCommentIdResponses = {
  /**
   * OK
   */
  200: unknown;
};

export type GetArticlesByIdCommentsByArticleCommentIdData = {
  body?: never;
  path: {
    id: string;
    articleCommentId: string;
  };
  query?: {
    fields?: string;
  };
  url: "/articles/{id}/comments/{articleCommentId}";
};

export type GetArticlesByIdCommentsByArticleCommentIdResponses = {
  /**
   * single ArticleComment
   */
  200: ArticleComment;
};

export type GetArticlesByIdCommentsByArticleCommentIdResponse =
  GetArticlesByIdCommentsByArticleCommentIdResponses[keyof GetArticlesByIdCommentsByArticleCommentIdResponses];

export type PostArticlesByIdCommentsByArticleCommentIdData = {
  body?: ArticleComment;
  path: {
    id: string;
    articleCommentId: string;
  };
  query?: {
    /**
     * Set this parameter to `true` if no notifications should be sent on changes made by this request. This doesn't mute notifications sent by any workflow rules. Using this parameter requires <control>Apply Commands Silently</control> permission in all projects affected by the request. Available since 2021.3.
     */
    muteUpdateNotifications?: boolean;
    fields?: string;
  };
  url: "/articles/{id}/comments/{articleCommentId}";
};

export type PostArticlesByIdCommentsByArticleCommentIdResponses = {
  /**
   * single ArticleComment
   */
  200: ArticleComment;
};

export type PostArticlesByIdCommentsByArticleCommentIdResponse =
  PostArticlesByIdCommentsByArticleCommentIdResponses[keyof PostArticlesByIdCommentsByArticleCommentIdResponses];

export type GetArticlesByIdCommentsByArticleCommentIdReactionsData = {
  body?: never;
  path: {
    id: string;
    articleCommentId: string;
  };
  query?: {
    fields?: string;
    $skip?: number;
    $top?: number;
  };
  url: "/articles/{id}/comments/{articleCommentId}/reactions";
};

export type GetArticlesByIdCommentsByArticleCommentIdReactionsResponses = {
  /**
   * collection of Reaction
   */
  200: Array<Reaction>;
};

export type GetArticlesByIdCommentsByArticleCommentIdReactionsResponse =
  GetArticlesByIdCommentsByArticleCommentIdReactionsResponses[keyof GetArticlesByIdCommentsByArticleCommentIdReactionsResponses];

export type PostArticlesByIdCommentsByArticleCommentIdReactionsData = {
  body?: Reaction;
  path: {
    id: string;
    articleCommentId: string;
  };
  query?: {
    fields?: string;
  };
  url: "/articles/{id}/comments/{articleCommentId}/reactions";
};

export type PostArticlesByIdCommentsByArticleCommentIdReactionsResponses = {
  /**
   * single Reaction
   */
  200: Reaction;
};

export type PostArticlesByIdCommentsByArticleCommentIdReactionsResponse =
  PostArticlesByIdCommentsByArticleCommentIdReactionsResponses[keyof PostArticlesByIdCommentsByArticleCommentIdReactionsResponses];

export type DeleteArticlesByIdCommentsByArticleCommentIdReactionsByReactionIdData =
  {
    body?: never;
    path: {
      id: string;
      articleCommentId: string;
      reactionId: string;
    };
    query?: never;
    url: "/articles/{id}/comments/{articleCommentId}/reactions/{reactionId}";
  };

export type DeleteArticlesByIdCommentsByArticleCommentIdReactionsByReactionIdResponses =
  {
    /**
     * OK
     */
    200: unknown;
  };

export type GetArticlesByIdCommentsByArticleCommentIdReactionsByReactionIdData =
  {
    body?: never;
    path: {
      id: string;
      articleCommentId: string;
      reactionId: string;
    };
    query?: {
      fields?: string;
    };
    url: "/articles/{id}/comments/{articleCommentId}/reactions/{reactionId}";
  };

export type GetArticlesByIdCommentsByArticleCommentIdReactionsByReactionIdResponses =
  {
    /**
     * single Reaction
     */
    200: Reaction;
  };

export type GetArticlesByIdCommentsByArticleCommentIdReactionsByReactionIdResponse =
  GetArticlesByIdCommentsByArticleCommentIdReactionsByReactionIdResponses[keyof GetArticlesByIdCommentsByArticleCommentIdReactionsByReactionIdResponses];

export type GetArticlesByIdParentArticleData = {
  body?: never;
  path: {
    id: string;
  };
  query?: {
    fields?: string;
  };
  url: "/articles/{id}/parentArticle";
};

export type GetArticlesByIdParentArticleResponses = {
  /**
   * single Article
   */
  200: Article;
};

export type GetArticlesByIdParentArticleResponse =
  GetArticlesByIdParentArticleResponses[keyof GetArticlesByIdParentArticleResponses];

export type GetArticlesByIdTagsData = {
  body?: never;
  path: {
    id: string;
  };
  query?: {
    fields?: string;
    $skip?: number;
    $top?: number;
  };
  url: "/articles/{id}/tags";
};

export type GetArticlesByIdTagsResponses = {
  /**
   * collection of Tag
   */
  200: Array<Tag>;
};

export type GetArticlesByIdTagsResponse =
  GetArticlesByIdTagsResponses[keyof GetArticlesByIdTagsResponses];

export type PostArticlesByIdTagsData = {
  body?: Tag;
  path: {
    id: string;
  };
  query?: {
    fields?: string;
  };
  url: "/articles/{id}/tags";
};

export type PostArticlesByIdTagsResponses = {
  /**
   * single Tag
   */
  200: Tag;
};

export type PostArticlesByIdTagsResponse =
  PostArticlesByIdTagsResponses[keyof PostArticlesByIdTagsResponses];

export type DeleteArticlesByIdTagsByTagIdData = {
  body?: never;
  path: {
    id: string;
    tagId: string;
  };
  query?: never;
  url: "/articles/{id}/tags/{tagId}";
};

export type DeleteArticlesByIdTagsByTagIdResponses = {
  /**
   * OK
   */
  200: unknown;
};

export type GetArticlesByIdTagsByTagIdData = {
  body?: never;
  path: {
    id: string;
    tagId: string;
  };
  query?: {
    fields?: string;
  };
  url: "/articles/{id}/tags/{tagId}";
};

export type GetArticlesByIdTagsByTagIdResponses = {
  /**
   * single Tag
   */
  200: Tag;
};

export type GetArticlesByIdTagsByTagIdResponse =
  GetArticlesByIdTagsByTagIdResponses[keyof GetArticlesByIdTagsByTagIdResponses];

export type PostCommandsData = {
  body?: CommandList;
  path?: never;
  query?: {
    /**
     * Set this parameter to `true` if no notifications should be sent on changes made by this request. This doesn't mute notifications sent by any workflow rules. Using this parameter requires <control>Apply Commands Silently</control> permission in all projects affected by the request. Available since 2021.3.
     */
    muteUpdateNotifications?: boolean;
    fields?: string;
  };
  url: "/commands";
};

export type PostCommandsResponses = {
  /**
   * single CommandList
   */
  200: CommandList;
};

export type PostCommandsResponse =
  PostCommandsResponses[keyof PostCommandsResponses];

export type PostCommandsAssistData = {
  body?: CommandList;
  path?: never;
  query?: {
    fields?: string;
  };
  url: "/commands/assist";
};

export type PostCommandsAssistResponses = {
  /**
   * single CommandList
   */
  200: CommandList;
};

export type PostCommandsAssistResponse =
  PostCommandsAssistResponses[keyof PostCommandsAssistResponses];

export type GetGroupsData = {
  body?: never;
  path?: never;
  query?: {
    fields?: string;
    $skip?: number;
    $top?: number;
  };
  url: "/groups";
};

export type GetGroupsResponses = {
  /**
   * collection of UserGroup
   */
  200: Array<UserGroup>;
};

export type GetGroupsResponse = GetGroupsResponses[keyof GetGroupsResponses];

export type GetGroupsByIdData = {
  body?: never;
  path: {
    id: string;
  };
  query?: {
    fields?: string;
  };
  url: "/groups/{id}";
};

export type GetGroupsByIdResponses = {
  /**
   * single UserGroup
   */
  200: UserGroup;
};

export type GetGroupsByIdResponse =
  GetGroupsByIdResponses[keyof GetGroupsByIdResponses];

export type GetIssueLinkTypesData = {
  body?: never;
  path?: never;
  query?: {
    fields?: string;
    $skip?: number;
    $top?: number;
  };
  url: "/issueLinkTypes";
};

export type GetIssueLinkTypesResponses = {
  /**
   * collection of IssueLinkType
   */
  200: Array<IssueLinkType>;
};

export type GetIssueLinkTypesResponse =
  GetIssueLinkTypesResponses[keyof GetIssueLinkTypesResponses];

export type PostIssueLinkTypesData = {
  body?: IssueLinkType;
  path?: never;
  query?: {
    fields?: string;
  };
  url: "/issueLinkTypes";
};

export type PostIssueLinkTypesResponses = {
  /**
   * single IssueLinkType
   */
  200: IssueLinkType;
};

export type PostIssueLinkTypesResponse =
  PostIssueLinkTypesResponses[keyof PostIssueLinkTypesResponses];

export type DeleteIssueLinkTypesByIdData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: "/issueLinkTypes/{id}";
};

export type DeleteIssueLinkTypesByIdResponses = {
  /**
   * OK
   */
  200: unknown;
};

export type GetIssueLinkTypesByIdData = {
  body?: never;
  path: {
    id: string;
  };
  query?: {
    fields?: string;
  };
  url: "/issueLinkTypes/{id}";
};

export type GetIssueLinkTypesByIdResponses = {
  /**
   * single IssueLinkType
   */
  200: IssueLinkType;
};

export type GetIssueLinkTypesByIdResponse =
  GetIssueLinkTypesByIdResponses[keyof GetIssueLinkTypesByIdResponses];

export type PostIssueLinkTypesByIdData = {
  body?: IssueLinkType;
  path: {
    id: string;
  };
  query?: {
    fields?: string;
  };
  url: "/issueLinkTypes/{id}";
};

export type PostIssueLinkTypesByIdResponses = {
  /**
   * single IssueLinkType
   */
  200: IssueLinkType;
};

export type PostIssueLinkTypesByIdResponse =
  PostIssueLinkTypesByIdResponses[keyof PostIssueLinkTypesByIdResponses];

export type GetIssuesData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * Issue search query. Read more about the search syntax here: <a href="https://www.jetbrains.com/help/youtrack/cloud/?Search-and-Command-Attributes">Search Query Reference</a>
     */
    query?: string;
    /**
     * <p>The name of the custom field to show in the response. When you use this parameter and request the custom field data in the request URL, the response only shows the requested custom fields instead of all of them.</p><p>To show more than one custom field, use this parameter several times.</p><p>See Sample 2 for reference.</p>
     */
    customFields?: string;
    fields?: string;
    $skip?: number;
    $top?: number;
  };
  url: "/issues";
};

export type GetIssuesResponses = {
  /**
   * collection of Issue
   */
  200: Array<Issue>;
};

export type GetIssuesResponse = GetIssuesResponses[keyof GetIssuesResponses];

export type PostIssuesData = {
  body?: Issue;
  path?: never;
  query?: {
    /**
     * ID of a draft to report as the new issue. If no `draftId` is provided, the issue is created from scratch. In this case, you must specify the summary and the project in the request payload.
     */
    draftId?: string;
    /**
     * Set this parameter to `true` if no notifications should be sent on changes made by this request. This doesn't mute notifications sent by any workflow rules. Using this parameter requires <control>Apply Commands Silently</control> permission in all projects affected by the request. Available since 2021.3.
     */
    muteUpdateNotifications?: boolean;
    fields?: string;
  };
  url: "/issues";
};

export type PostIssuesResponses = {
  /**
   * single Issue
   */
  200: Issue;
};

export type PostIssuesResponse = PostIssuesResponses[keyof PostIssuesResponses];

export type DeleteIssuesByIdData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: "/issues/{id}";
};

export type DeleteIssuesByIdResponses = {
  /**
   * OK
   */
  200: unknown;
};

export type GetIssuesByIdData = {
  body?: never;
  path: {
    id: string;
  };
  query?: {
    fields?: string;
  };
  url: "/issues/{id}";
};

export type GetIssuesByIdResponses = {
  /**
   * single Issue
   */
  200: Issue;
};

export type GetIssuesByIdResponse =
  GetIssuesByIdResponses[keyof GetIssuesByIdResponses];

export type PostIssuesByIdData = {
  body?: Issue;
  path: {
    id: string;
  };
  query?: {
    /**
     * Set this parameter to `true` if no notifications should be sent on changes made by this request. This doesn't mute notifications sent by any workflow rules. Using this parameter requires <control>Apply Commands Silently</control> permission in all projects affected by the request. Available since 2021.3.
     */
    muteUpdateNotifications?: boolean;
    fields?: string;
  };
  url: "/issues/{id}";
};

export type PostIssuesByIdResponses = {
  /**
   * single Issue
   */
  200: Issue;
};

export type PostIssuesByIdResponse =
  PostIssuesByIdResponses[keyof PostIssuesByIdResponses];

export type GetIssuesByIdActivitiesData = {
  body?: never;
  path: {
    id: string;
  };
  query?: {
    categories?: string;
    /**
     * Indicates whether the order of returning activities is from newest to oldest or the opposite.
     * If `false`, then the oldest activity item that matches a selected filter is returned first.
     * If `true`, then the newest activity is returned first. By default, `false`.
     */
    reverse?: boolean;
    /**
     * The timestamp in milliseconds indicating the start of the time interval the activity timestamp belongs to.
     * Stored as a unix timestamp at UTC.
     * If the parameter is not set, it is considered to be 0.
     */
    start?: string;
    /**
     * The timestamp in milliseconds indicating the end of the time interval the activity timestamp belongs to.
     * Stored as a unix timestamp at UTC.
     * If the parameter is not set, it is considered as `Long.MAX_VALUE`.
     */
    end?: string;
    /**
     * Parameter to filter activities by the author. You can specify one of the following parameters: the database ID, login, Hub ID,
     * or `me` for the currently logged in user.
     */
    author?: string;
    fields?: string;
    $skip?: number;
    $top?: number;
  };
  url: "/issues/{id}/activities";
};

export type GetIssuesByIdActivitiesResponses = {
  /**
   * collection of ActivityItem
   */
  200: Array<ActivityItem>;
};

export type GetIssuesByIdActivitiesResponse =
  GetIssuesByIdActivitiesResponses[keyof GetIssuesByIdActivitiesResponses];

export type GetIssuesByIdActivitiesByActivityItemIdData = {
  body?: never;
  path: {
    id: string;
    activityItemId: string;
  };
  query?: {
    fields?: string;
  };
  url: "/issues/{id}/activities/{activityItemId}";
};

export type GetIssuesByIdActivitiesByActivityItemIdResponses = {
  /**
   * single ActivityItem
   */
  200: ActivityItem;
};

export type GetIssuesByIdActivitiesByActivityItemIdResponse =
  GetIssuesByIdActivitiesByActivityItemIdResponses[keyof GetIssuesByIdActivitiesByActivityItemIdResponses];

export type GetIssuesByIdActivitiesPageData = {
  body?: never;
  path: {
    id: string;
  };
  query?: {
    categories?: string;
    /**
     * Indicates whether the order of returning activities is from newest to oldest or the opposite.
     * If `false`, then the oldest activity item that matches a selected filter is returned first.
     * If `true`, then the newest activity is returned first. By default, `false`.
     */
    reverse?: boolean;
    /**
     * The timestamp in milliseconds indicating the start of the time interval the activity timestamp belongs to.
     * Stored as a unix timestamp at UTC.
     * If the parameter is not set, it is considered to be 0.
     */
    start?: string;
    /**
     * The timestamp in milliseconds indicating the end of the time interval the activity timestamp belongs to.
     * Stored as a unix timestamp at UTC.
     * If the parameter is not set, it is considered as `Long.MAX_VALUE`.
     */
    end?: string;
    /**
     * Parameter to filter activities by the author. You can specify one of the following parameters: the database ID, login, Hub ID,
     * or `me` for the currently logged in user.
     */
    author?: string;
    cursor?: string;
    /**
     * ID of the activity that should be included in the page. The activity is allocated to the middle of the page.
     */
    activityId?: string;
    fields?: string;
  };
  url: "/issues/{id}/activitiesPage";
};

export type GetIssuesByIdActivitiesPageResponses = {
  /**
   * single ActivityCursorPage
   */
  200: ActivityCursorPage;
};

export type GetIssuesByIdActivitiesPageResponse =
  GetIssuesByIdActivitiesPageResponses[keyof GetIssuesByIdActivitiesPageResponses];

export type GetIssuesByIdAttachmentsData = {
  body?: never;
  path: {
    id: string;
  };
  query?: {
    fields?: string;
    $skip?: number;
    $top?: number;
  };
  url: "/issues/{id}/attachments";
};

export type GetIssuesByIdAttachmentsResponses = {
  /**
   * collection of IssueAttachment
   */
  200: Array<IssueAttachment>;
};

export type GetIssuesByIdAttachmentsResponse =
  GetIssuesByIdAttachmentsResponses[keyof GetIssuesByIdAttachmentsResponses];

export type PostIssuesByIdAttachmentsData = {
  body?: {
    "files[0]"?: Blob | File;
  };
  path: {
    id: string;
  };
  query?: {
    /**
     * Set this parameter to `true` if no notifications should be sent on changes made by this request. This doesn't mute notifications sent by any workflow rules. Using this parameter requires <control>Apply Commands Silently</control> permission in all projects affected by the request. Available since 2021.3.
     */
    muteUpdateNotifications?: boolean;
    fields?: string;
  };
  url: "/issues/{id}/attachments";
};

export type PostIssuesByIdAttachmentsResponses = {
  /**
   * collection of IssueAttachment
   */
  200: Array<IssueAttachment>;
};

export type PostIssuesByIdAttachmentsResponse =
  PostIssuesByIdAttachmentsResponses[keyof PostIssuesByIdAttachmentsResponses];

export type DeleteIssuesByIdAttachmentsByIssueAttachmentIdData = {
  body?: never;
  path: {
    id: string;
    issueAttachmentId: string;
  };
  query?: never;
  url: "/issues/{id}/attachments/{issueAttachmentId}";
};

export type DeleteIssuesByIdAttachmentsByIssueAttachmentIdResponses = {
  /**
   * OK
   */
  200: unknown;
};

export type GetIssuesByIdAttachmentsByIssueAttachmentIdData = {
  body?: never;
  path: {
    id: string;
    issueAttachmentId: string;
  };
  query?: {
    fields?: string;
  };
  url: "/issues/{id}/attachments/{issueAttachmentId}";
};

export type GetIssuesByIdAttachmentsByIssueAttachmentIdResponses = {
  /**
   * single IssueAttachment
   */
  200: IssueAttachment;
};

export type GetIssuesByIdAttachmentsByIssueAttachmentIdResponse =
  GetIssuesByIdAttachmentsByIssueAttachmentIdResponses[keyof GetIssuesByIdAttachmentsByIssueAttachmentIdResponses];

export type PostIssuesByIdAttachmentsByIssueAttachmentIdData = {
  body?: IssueAttachment;
  path: {
    id: string;
    issueAttachmentId: string;
  };
  query?: {
    fields?: string;
  };
  url: "/issues/{id}/attachments/{issueAttachmentId}";
};

export type PostIssuesByIdAttachmentsByIssueAttachmentIdResponses = {
  /**
   * single IssueAttachment
   */
  200: IssueAttachment;
};

export type PostIssuesByIdAttachmentsByIssueAttachmentIdResponse =
  PostIssuesByIdAttachmentsByIssueAttachmentIdResponses[keyof PostIssuesByIdAttachmentsByIssueAttachmentIdResponses];

export type GetIssuesByIdCommentsData = {
  body?: never;
  path: {
    id: string;
  };
  query?: {
    fields?: string;
    $skip?: number;
    $top?: number;
  };
  url: "/issues/{id}/comments";
};

export type GetIssuesByIdCommentsResponses = {
  /**
   * collection of IssueComment
   */
  200: Array<IssueComment>;
};

export type GetIssuesByIdCommentsResponse =
  GetIssuesByIdCommentsResponses[keyof GetIssuesByIdCommentsResponses];

export type PostIssuesByIdCommentsData = {
  body?: IssueComment;
  path: {
    id: string;
  };
  query?: {
    /**
     * ID of an existing draft that should be published. This parameter is optional.
     */
    draftId?: string;
    /**
     * Set this parameter to `true` if no notifications should be sent on changes made by this request. This doesn't mute notifications sent by any workflow rules. Using this parameter requires <control>Apply Commands Silently</control> permission in all projects affected by the request. Available since 2021.3.
     */
    muteUpdateNotifications?: boolean;
    fields?: string;
  };
  url: "/issues/{id}/comments";
};

export type PostIssuesByIdCommentsResponses = {
  /**
   * single IssueComment
   */
  200: IssueComment;
};

export type PostIssuesByIdCommentsResponse =
  PostIssuesByIdCommentsResponses[keyof PostIssuesByIdCommentsResponses];

export type DeleteIssuesByIdCommentsByIssueCommentIdData = {
  body?: never;
  path: {
    id: string;
    issueCommentId: string;
  };
  query?: never;
  url: "/issues/{id}/comments/{issueCommentId}";
};

export type DeleteIssuesByIdCommentsByIssueCommentIdResponses = {
  /**
   * OK
   */
  200: unknown;
};

export type GetIssuesByIdCommentsByIssueCommentIdData = {
  body?: never;
  path: {
    id: string;
    issueCommentId: string;
  };
  query?: {
    fields?: string;
  };
  url: "/issues/{id}/comments/{issueCommentId}";
};

export type GetIssuesByIdCommentsByIssueCommentIdResponses = {
  /**
   * single IssueComment
   */
  200: IssueComment;
};

export type GetIssuesByIdCommentsByIssueCommentIdResponse =
  GetIssuesByIdCommentsByIssueCommentIdResponses[keyof GetIssuesByIdCommentsByIssueCommentIdResponses];

export type PostIssuesByIdCommentsByIssueCommentIdData = {
  body?: IssueComment;
  path: {
    id: string;
    issueCommentId: string;
  };
  query?: {
    /**
     * Set this parameter to `true` if no notifications should be sent on changes made by this request. This doesn't mute notifications sent by any workflow rules. Using this parameter requires <control>Apply Commands Silently</control> permission in all projects affected by the request. Available since 2021.3.
     */
    muteUpdateNotifications?: boolean;
    fields?: string;
  };
  url: "/issues/{id}/comments/{issueCommentId}";
};

export type PostIssuesByIdCommentsByIssueCommentIdResponses = {
  /**
   * single IssueComment
   */
  200: IssueComment;
};

export type PostIssuesByIdCommentsByIssueCommentIdResponse =
  PostIssuesByIdCommentsByIssueCommentIdResponses[keyof PostIssuesByIdCommentsByIssueCommentIdResponses];

export type GetIssuesByIdCommentsByIssueCommentIdReactionsData = {
  body?: never;
  path: {
    id: string;
    issueCommentId: string;
  };
  query?: {
    fields?: string;
    $skip?: number;
    $top?: number;
  };
  url: "/issues/{id}/comments/{issueCommentId}/reactions";
};

export type GetIssuesByIdCommentsByIssueCommentIdReactionsResponses = {
  /**
   * collection of Reaction
   */
  200: Array<Reaction>;
};

export type GetIssuesByIdCommentsByIssueCommentIdReactionsResponse =
  GetIssuesByIdCommentsByIssueCommentIdReactionsResponses[keyof GetIssuesByIdCommentsByIssueCommentIdReactionsResponses];

export type PostIssuesByIdCommentsByIssueCommentIdReactionsData = {
  body?: Reaction;
  path: {
    id: string;
    issueCommentId: string;
  };
  query?: {
    fields?: string;
  };
  url: "/issues/{id}/comments/{issueCommentId}/reactions";
};

export type PostIssuesByIdCommentsByIssueCommentIdReactionsResponses = {
  /**
   * single Reaction
   */
  200: Reaction;
};

export type PostIssuesByIdCommentsByIssueCommentIdReactionsResponse =
  PostIssuesByIdCommentsByIssueCommentIdReactionsResponses[keyof PostIssuesByIdCommentsByIssueCommentIdReactionsResponses];

export type DeleteIssuesByIdCommentsByIssueCommentIdReactionsByReactionIdData =
  {
    body?: never;
    path: {
      id: string;
      issueCommentId: string;
      reactionId: string;
    };
    query?: never;
    url: "/issues/{id}/comments/{issueCommentId}/reactions/{reactionId}";
  };

export type DeleteIssuesByIdCommentsByIssueCommentIdReactionsByReactionIdResponses =
  {
    /**
     * OK
     */
    200: unknown;
  };

export type GetIssuesByIdCommentsByIssueCommentIdReactionsByReactionIdData = {
  body?: never;
  path: {
    id: string;
    issueCommentId: string;
    reactionId: string;
  };
  query?: {
    fields?: string;
  };
  url: "/issues/{id}/comments/{issueCommentId}/reactions/{reactionId}";
};

export type GetIssuesByIdCommentsByIssueCommentIdReactionsByReactionIdResponses =
  {
    /**
     * single Reaction
     */
    200: Reaction;
  };

export type GetIssuesByIdCommentsByIssueCommentIdReactionsByReactionIdResponse =
  GetIssuesByIdCommentsByIssueCommentIdReactionsByReactionIdResponses[keyof GetIssuesByIdCommentsByIssueCommentIdReactionsByReactionIdResponses];

export type GetIssuesByIdCustomFieldsData = {
  body?: never;
  path: {
    id: string;
  };
  query?: {
    fields?: string;
    $skip?: number;
    $top?: number;
  };
  url: "/issues/{id}/customFields";
};

export type GetIssuesByIdCustomFieldsResponses = {
  /**
   * collection of IssueCustomField
   */
  200: Array<IssueCustomField>;
};

export type GetIssuesByIdCustomFieldsResponse =
  GetIssuesByIdCustomFieldsResponses[keyof GetIssuesByIdCustomFieldsResponses];

export type GetIssuesByIdCustomFieldsByIssueCustomFieldIdData = {
  body?: never;
  path: {
    id: string;
    issueCustomFieldId: string;
  };
  query?: {
    fields?: string;
  };
  url: "/issues/{id}/customFields/{issueCustomFieldId}";
};

export type GetIssuesByIdCustomFieldsByIssueCustomFieldIdResponses = {
  /**
   * single IssueCustomField
   */
  200: IssueCustomField;
};

export type GetIssuesByIdCustomFieldsByIssueCustomFieldIdResponse =
  GetIssuesByIdCustomFieldsByIssueCustomFieldIdResponses[keyof GetIssuesByIdCustomFieldsByIssueCustomFieldIdResponses];

export type PostIssuesByIdCustomFieldsByIssueCustomFieldIdData = {
  body?: IssueCustomField;
  path: {
    id: string;
    issueCustomFieldId: string;
  };
  query?: {
    /**
     * Set this parameter to `true` if no notifications should be sent on changes made by this request. This doesn't mute notifications sent by any workflow rules. Using this parameter requires <control>Apply Commands Silently</control> permission in all projects affected by the request. Available since 2021.3.
     */
    muteUpdateNotifications?: boolean;
    fields?: string;
  };
  url: "/issues/{id}/customFields/{issueCustomFieldId}";
};

export type PostIssuesByIdCustomFieldsByIssueCustomFieldIdResponses = {
  /**
   * single IssueCustomField
   */
  200: IssueCustomField;
};

export type PostIssuesByIdCustomFieldsByIssueCustomFieldIdResponse =
  PostIssuesByIdCustomFieldsByIssueCustomFieldIdResponses[keyof PostIssuesByIdCustomFieldsByIssueCustomFieldIdResponses];

export type GetIssuesByIdLinksData = {
  body?: never;
  path: {
    id: string;
  };
  query?: {
    fields?: string;
    $skip?: number;
    $top?: number;
  };
  url: "/issues/{id}/links";
};

export type GetIssuesByIdLinksResponses = {
  /**
   * collection of IssueLink
   */
  200: Array<IssueLink>;
};

export type GetIssuesByIdLinksResponse =
  GetIssuesByIdLinksResponses[keyof GetIssuesByIdLinksResponses];

export type GetIssuesByIdLinksByIssueLinkIdData = {
  body?: never;
  path: {
    id: string;
    issueLinkId: string;
  };
  query?: {
    fields?: string;
  };
  url: "/issues/{id}/links/{issueLinkId}";
};

export type GetIssuesByIdLinksByIssueLinkIdResponses = {
  /**
   * single IssueLink
   */
  200: IssueLink;
};

export type GetIssuesByIdLinksByIssueLinkIdResponse =
  GetIssuesByIdLinksByIssueLinkIdResponses[keyof GetIssuesByIdLinksByIssueLinkIdResponses];

export type GetIssuesByIdLinksByIssueLinkIdIssuesData = {
  body?: never;
  path: {
    id: string;
    issueLinkId: string;
  };
  query?: {
    fields?: string;
    $skip?: number;
    $top?: number;
  };
  url: "/issues/{id}/links/{issueLinkId}/issues";
};

export type GetIssuesByIdLinksByIssueLinkIdIssuesResponses = {
  /**
   * collection of Issue
   */
  200: Array<Issue>;
};

export type GetIssuesByIdLinksByIssueLinkIdIssuesResponse =
  GetIssuesByIdLinksByIssueLinkIdIssuesResponses[keyof GetIssuesByIdLinksByIssueLinkIdIssuesResponses];

export type PostIssuesByIdLinksByIssueLinkIdIssuesData = {
  body?: Issue;
  path: {
    id: string;
    issueLinkId: string;
  };
  query?: {
    /**
     * Set this parameter to `true` if no notifications should be sent on changes made by this request. This doesn't mute notifications sent by any workflow rules. Using this parameter requires <control>Apply Commands Silently</control> permission in all projects affected by the request. Available since 2021.3.
     */
    muteUpdateNotifications?: boolean;
    fields?: string;
  };
  url: "/issues/{id}/links/{issueLinkId}/issues";
};

export type PostIssuesByIdLinksByIssueLinkIdIssuesResponses = {
  /**
   * single Issue
   */
  200: Issue;
};

export type PostIssuesByIdLinksByIssueLinkIdIssuesResponse =
  PostIssuesByIdLinksByIssueLinkIdIssuesResponses[keyof PostIssuesByIdLinksByIssueLinkIdIssuesResponses];

export type DeleteIssuesByIdLinksByIssueLinkIdIssuesByIssueIdData = {
  body?: never;
  path: {
    id: string;
    issueLinkId: string;
    issueId: string;
  };
  query?: never;
  url: "/issues/{id}/links/{issueLinkId}/issues/{issueId}";
};

export type DeleteIssuesByIdLinksByIssueLinkIdIssuesByIssueIdResponses = {
  /**
   * OK
   */
  200: unknown;
};

export type GetIssuesByIdProjectData = {
  body?: never;
  path: {
    id: string;
  };
  query?: {
    fields?: string;
  };
  url: "/issues/{id}/project";
};

export type GetIssuesByIdProjectResponses = {
  /**
   * single Project
   */
  200: Project;
};

export type GetIssuesByIdProjectResponse =
  GetIssuesByIdProjectResponses[keyof GetIssuesByIdProjectResponses];

export type PostIssuesByIdProjectData = {
  body?: Project;
  path: {
    id: string;
  };
  query?: {
    /**
     * Set this parameter to `true` if no notifications should be sent on changes made by this request. This doesn't mute notifications sent by any workflow rules. Using this parameter requires <control>Apply Commands Silently</control> permission in all projects affected by the request. Available since 2021.3.
     */
    muteUpdateNotifications?: boolean;
    fields?: string;
  };
  url: "/issues/{id}/project";
};

export type PostIssuesByIdProjectResponses = {
  /**
   * single Project
   */
  200: Project;
};

export type PostIssuesByIdProjectResponse =
  PostIssuesByIdProjectResponses[keyof PostIssuesByIdProjectResponses];

export type GetIssuesByIdSprintsData = {
  body?: never;
  path: {
    id: string;
  };
  query?: {
    fields?: string;
    $skip?: number;
    $top?: number;
  };
  url: "/issues/{id}/sprints";
};

export type GetIssuesByIdSprintsResponses = {
  /**
   * collection of Sprint
   */
  200: Array<Sprint>;
};

export type GetIssuesByIdSprintsResponse =
  GetIssuesByIdSprintsResponses[keyof GetIssuesByIdSprintsResponses];

export type GetIssuesByIdTagsData = {
  body?: never;
  path: {
    id: string;
  };
  query?: {
    fields?: string;
    $skip?: number;
    $top?: number;
  };
  url: "/issues/{id}/tags";
};

export type GetIssuesByIdTagsResponses = {
  /**
   * collection of Tag
   */
  200: Array<Tag>;
};

export type GetIssuesByIdTagsResponse =
  GetIssuesByIdTagsResponses[keyof GetIssuesByIdTagsResponses];

export type PostIssuesByIdTagsData = {
  body?: Tag;
  path: {
    id: string;
  };
  query?: {
    fields?: string;
  };
  url: "/issues/{id}/tags";
};

export type PostIssuesByIdTagsResponses = {
  /**
   * single Tag
   */
  200: Tag;
};

export type PostIssuesByIdTagsResponse =
  PostIssuesByIdTagsResponses[keyof PostIssuesByIdTagsResponses];

export type DeleteIssuesByIdTagsByTagIdData = {
  body?: never;
  path: {
    id: string;
    tagId: string;
  };
  query?: never;
  url: "/issues/{id}/tags/{tagId}";
};

export type DeleteIssuesByIdTagsByTagIdResponses = {
  /**
   * OK
   */
  200: unknown;
};

export type GetIssuesByIdTagsByTagIdData = {
  body?: never;
  path: {
    id: string;
    tagId: string;
  };
  query?: {
    fields?: string;
  };
  url: "/issues/{id}/tags/{tagId}";
};

export type GetIssuesByIdTagsByTagIdResponses = {
  /**
   * single Tag
   */
  200: Tag;
};

export type GetIssuesByIdTagsByTagIdResponse =
  GetIssuesByIdTagsByTagIdResponses[keyof GetIssuesByIdTagsByTagIdResponses];

export type GetIssuesByIdTimeTrackingData = {
  body?: never;
  path: {
    id: string;
  };
  query?: {
    fields?: string;
  };
  url: "/issues/{id}/timeTracking";
};

export type GetIssuesByIdTimeTrackingResponses = {
  /**
   * single IssueTimeTracker
   */
  200: IssueTimeTracker;
};

export type GetIssuesByIdTimeTrackingResponse =
  GetIssuesByIdTimeTrackingResponses[keyof GetIssuesByIdTimeTrackingResponses];

export type GetIssuesByIdTimeTrackingWorkItemsData = {
  body?: never;
  path: {
    id: string;
  };
  query?: {
    fields?: string;
    $skip?: number;
    $top?: number;
  };
  url: "/issues/{id}/timeTracking/workItems";
};

export type GetIssuesByIdTimeTrackingWorkItemsResponses = {
  /**
   * collection of IssueWorkItem
   */
  200: Array<IssueWorkItem>;
};

export type GetIssuesByIdTimeTrackingWorkItemsResponse =
  GetIssuesByIdTimeTrackingWorkItemsResponses[keyof GetIssuesByIdTimeTrackingWorkItemsResponses];

export type PostIssuesByIdTimeTrackingWorkItemsData = {
  body?: IssueWorkItem;
  path: {
    id: string;
  };
  query?: {
    /**
     * Set this parameter to `true` if no notifications should be sent on changes made by this request. This doesn't mute notifications sent by any workflow rules. Using this parameter requires <control>Apply Commands Silently</control> permission in all projects affected by the request. Available since 2021.3.
     */
    muteUpdateNotifications?: boolean;
    fields?: string;
  };
  url: "/issues/{id}/timeTracking/workItems";
};

export type PostIssuesByIdTimeTrackingWorkItemsResponses = {
  /**
   * single IssueWorkItem
   */
  200: IssueWorkItem;
};

export type PostIssuesByIdTimeTrackingWorkItemsResponse =
  PostIssuesByIdTimeTrackingWorkItemsResponses[keyof PostIssuesByIdTimeTrackingWorkItemsResponses];

export type DeleteIssuesByIdTimeTrackingWorkItemsByIssueWorkItemIdData = {
  body?: never;
  path: {
    id: string;
    issueWorkItemId: string;
  };
  query?: never;
  url: "/issues/{id}/timeTracking/workItems/{issueWorkItemId}";
};

export type DeleteIssuesByIdTimeTrackingWorkItemsByIssueWorkItemIdResponses = {
  /**
   * OK
   */
  200: unknown;
};

export type GetIssuesByIdTimeTrackingWorkItemsByIssueWorkItemIdData = {
  body?: never;
  path: {
    id: string;
    issueWorkItemId: string;
  };
  query?: {
    fields?: string;
  };
  url: "/issues/{id}/timeTracking/workItems/{issueWorkItemId}";
};

export type GetIssuesByIdTimeTrackingWorkItemsByIssueWorkItemIdResponses = {
  /**
   * single IssueWorkItem
   */
  200: IssueWorkItem;
};

export type GetIssuesByIdTimeTrackingWorkItemsByIssueWorkItemIdResponse =
  GetIssuesByIdTimeTrackingWorkItemsByIssueWorkItemIdResponses[keyof GetIssuesByIdTimeTrackingWorkItemsByIssueWorkItemIdResponses];

export type PostIssuesByIdTimeTrackingWorkItemsByIssueWorkItemIdData = {
  body?: IssueWorkItem;
  path: {
    id: string;
    issueWorkItemId: string;
  };
  query?: {
    /**
     * Set this parameter to `true` if no notifications should be sent on changes made by this request. This doesn't mute notifications sent by any workflow rules. Using this parameter requires <control>Apply Commands Silently</control> permission in all projects affected by the request. Available since 2021.3.
     */
    muteUpdateNotifications?: boolean;
    fields?: string;
  };
  url: "/issues/{id}/timeTracking/workItems/{issueWorkItemId}";
};

export type PostIssuesByIdTimeTrackingWorkItemsByIssueWorkItemIdResponses = {
  /**
   * single IssueWorkItem
   */
  200: IssueWorkItem;
};

export type PostIssuesByIdTimeTrackingWorkItemsByIssueWorkItemIdResponse =
  PostIssuesByIdTimeTrackingWorkItemsByIssueWorkItemIdResponses[keyof PostIssuesByIdTimeTrackingWorkItemsByIssueWorkItemIdResponses];

export type GetIssuesByIdVcsChangesData = {
  body?: never;
  path: {
    id: string;
  };
  query?: {
    fields?: string;
    $skip?: number;
    $top?: number;
  };
  url: "/issues/{id}/vcsChanges";
};

export type GetIssuesByIdVcsChangesResponses = {
  /**
   * collection of VcsChange
   */
  200: Array<VcsChange>;
};

export type GetIssuesByIdVcsChangesResponse =
  GetIssuesByIdVcsChangesResponses[keyof GetIssuesByIdVcsChangesResponses];

export type PostIssuesByIdVcsChangesData = {
  body?: VcsChange;
  path: {
    id: string;
  };
  query?: {
    /**
     * Set this parameter to `true` if no notifications should be sent on issue changes caused by this request. This doesn't mute notifications sent by any workflow rules. Using this parameter requires <control>Apply Commands Silently</control> permission in all projects affected by the request. Available since 2021.3.
     */
    muteUpdateNotifications?: boolean;
    fields?: string;
  };
  url: "/issues/{id}/vcsChanges";
};

export type PostIssuesByIdVcsChangesResponses = {
  /**
   * single VcsChange
   */
  200: VcsChange;
};

export type PostIssuesByIdVcsChangesResponse =
  PostIssuesByIdVcsChangesResponses[keyof PostIssuesByIdVcsChangesResponses];

export type DeleteIssuesByIdVcsChangesByVcsChangeIdData = {
  body?: never;
  path: {
    id: string;
    vcsChangeId: string;
  };
  query?: never;
  url: "/issues/{id}/vcsChanges/{vcsChangeId}";
};

export type DeleteIssuesByIdVcsChangesByVcsChangeIdResponses = {
  /**
   * OK
   */
  200: unknown;
};

export type GetIssuesByIdVcsChangesByVcsChangeIdData = {
  body?: never;
  path: {
    id: string;
    vcsChangeId: string;
  };
  query?: {
    fields?: string;
  };
  url: "/issues/{id}/vcsChanges/{vcsChangeId}";
};

export type GetIssuesByIdVcsChangesByVcsChangeIdResponses = {
  /**
   * single VcsChange
   */
  200: VcsChange;
};

export type GetIssuesByIdVcsChangesByVcsChangeIdResponse =
  GetIssuesByIdVcsChangesByVcsChangeIdResponses[keyof GetIssuesByIdVcsChangesByVcsChangeIdResponses];

export type PostIssuesByIdVcsChangesByVcsChangeIdData = {
  body?: VcsChange;
  path: {
    id: string;
    vcsChangeId: string;
  };
  query?: {
    /**
     * Set this parameter to `true` if no notifications should be sent on changes made by this request. This doesn't mute notifications sent by any workflow rules. Using this parameter requires <control>Apply Commands Silently</control> permission in all projects affected by the request. Available since 2021.3.
     */
    muteUpdateNotifications?: boolean;
    fields?: string;
  };
  url: "/issues/{id}/vcsChanges/{vcsChangeId}";
};

export type PostIssuesByIdVcsChangesByVcsChangeIdResponses = {
  /**
   * single VcsChange
   */
  200: VcsChange;
};

export type PostIssuesByIdVcsChangesByVcsChangeIdResponse =
  PostIssuesByIdVcsChangesByVcsChangeIdResponses[keyof PostIssuesByIdVcsChangesByVcsChangeIdResponses];

export type PostIssuesGetterCountData = {
  body?: IssueCountResponse;
  path?: never;
  query?: {
    fields?: string;
  };
  url: "/issuesGetter/count";
};

export type PostIssuesGetterCountResponses = {
  /**
   * single IssueCountResponse
   */
  200: IssueCountResponse;
};

export type PostIssuesGetterCountResponse =
  PostIssuesGetterCountResponses[keyof PostIssuesGetterCountResponses];

export type GetSavedQueriesData = {
  body?: never;
  path?: never;
  query?: {
    fields?: string;
    $skip?: number;
    $top?: number;
  };
  url: "/savedQueries";
};

export type GetSavedQueriesResponses = {
  /**
   * collection of SavedQuery
   */
  200: Array<SavedQuery>;
};

export type GetSavedQueriesResponse =
  GetSavedQueriesResponses[keyof GetSavedQueriesResponses];

export type PostSavedQueriesData = {
  body?: SavedQuery;
  path?: never;
  query?: {
    fields?: string;
  };
  url: "/savedQueries";
};

export type PostSavedQueriesResponses = {
  /**
   * single SavedQuery
   */
  200: SavedQuery;
};

export type PostSavedQueriesResponse =
  PostSavedQueriesResponses[keyof PostSavedQueriesResponses];

export type DeleteSavedQueriesByIdData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: "/savedQueries/{id}";
};

export type DeleteSavedQueriesByIdResponses = {
  /**
   * OK
   */
  200: unknown;
};

export type GetSavedQueriesByIdData = {
  body?: never;
  path: {
    id: string;
  };
  query?: {
    fields?: string;
  };
  url: "/savedQueries/{id}";
};

export type GetSavedQueriesByIdResponses = {
  /**
   * single SavedQuery
   */
  200: SavedQuery;
};

export type GetSavedQueriesByIdResponse =
  GetSavedQueriesByIdResponses[keyof GetSavedQueriesByIdResponses];

export type PostSavedQueriesByIdData = {
  body?: SavedQuery;
  path: {
    id: string;
  };
  query?: {
    fields?: string;
  };
  url: "/savedQueries/{id}";
};

export type PostSavedQueriesByIdResponses = {
  /**
   * single SavedQuery
   */
  200: SavedQuery;
};

export type PostSavedQueriesByIdResponse =
  PostSavedQueriesByIdResponses[keyof PostSavedQueriesByIdResponses];

export type PostSearchAssistData = {
  body?: SearchSuggestions;
  path?: never;
  query?: {
    fields?: string;
  };
  url: "/search/assist";
};

export type PostSearchAssistResponses = {
  /**
   * single SearchSuggestions
   */
  200: SearchSuggestions;
};

export type PostSearchAssistResponse =
  PostSearchAssistResponses[keyof PostSearchAssistResponses];

export type GetTagsData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * Tag search query. Use the name of the tag to filter the list of tags. To learn more about search queries, see <a href="api-query-syntax.topic">Query Syntax</a>.
     */
    query?: string;
    fields?: string;
    $skip?: number;
    $top?: number;
  };
  url: "/tags";
};

export type GetTagsResponses = {
  /**
   * collection of Tag
   */
  200: Array<Tag>;
};

export type GetTagsResponse = GetTagsResponses[keyof GetTagsResponses];

export type PostTagsData = {
  body?: Tag;
  path?: never;
  query?: {
    fields?: string;
  };
  url: "/tags";
};

export type PostTagsResponses = {
  /**
   * single Tag
   */
  200: Tag;
};

export type PostTagsResponse = PostTagsResponses[keyof PostTagsResponses];

export type DeleteTagsByIdData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: "/tags/{id}";
};

export type DeleteTagsByIdResponses = {
  /**
   * OK
   */
  200: unknown;
};

export type GetTagsByIdData = {
  body?: never;
  path: {
    id: string;
  };
  query?: {
    fields?: string;
  };
  url: "/tags/{id}";
};

export type GetTagsByIdResponses = {
  /**
   * single Tag
   */
  200: Tag;
};

export type GetTagsByIdResponse =
  GetTagsByIdResponses[keyof GetTagsByIdResponses];

export type PostTagsByIdData = {
  body?: Tag;
  path: {
    id: string;
  };
  query?: {
    fields?: string;
  };
  url: "/tags/{id}";
};

export type PostTagsByIdResponses = {
  /**
   * single Tag
   */
  200: Tag;
};

export type PostTagsByIdResponse =
  PostTagsByIdResponses[keyof PostTagsByIdResponses];

export type GetTagsByIdIssuesData = {
  body?: never;
  path: {
    id: string;
  };
  query?: {
    /**
     * <p>The name of the custom field to show in the response. When you use this parameter and request the custom field data in the request URL, the response only shows the requested custom fields instead of all of them.</p><p>To show more than one custom field, use this parameter several times.</p><p>See Sample 2 for reference.</p>
     */
    customFields?: string;
    fields?: string;
    $skip?: number;
    $top?: number;
  };
  url: "/tags/{id}/issues";
};

export type GetTagsByIdIssuesResponses = {
  /**
   * collection of Issue
   */
  200: Array<Issue>;
};

export type GetTagsByIdIssuesResponse =
  GetTagsByIdIssuesResponses[keyof GetTagsByIdIssuesResponses];

export type GetUsersData = {
  body?: never;
  path?: never;
  query?: {
    fields?: string;
    $skip?: number;
    $top?: number;
  };
  url: "/users";
};

export type GetUsersResponses = {
  /**
   * collection of User
   */
  200: Array<User>;
};

export type GetUsersResponse = GetUsersResponses[keyof GetUsersResponses];

export type GetUsersByIdData = {
  body?: never;
  path: {
    id: string;
  };
  query?: {
    fields?: string;
  };
  url: "/users/{id}";
};

export type GetUsersByIdResponses = {
  /**
   * single User
   */
  200: User;
};

export type GetUsersByIdResponse =
  GetUsersByIdResponses[keyof GetUsersByIdResponses];

export type GetUsersByIdProfilesGeneralData = {
  body?: never;
  path: {
    id: string;
  };
  query?: {
    fields?: string;
  };
  url: "/users/{id}/profiles/general";
};

export type GetUsersByIdProfilesGeneralResponses = {
  /**
   * single GeneralUserProfile
   */
  200: GeneralUserProfile;
};

export type GetUsersByIdProfilesGeneralResponse =
  GetUsersByIdProfilesGeneralResponses[keyof GetUsersByIdProfilesGeneralResponses];

export type PostUsersByIdProfilesGeneralData = {
  body?: GeneralUserProfile;
  path: {
    id: string;
  };
  query?: {
    fields?: string;
  };
  url: "/users/{id}/profiles/general";
};

export type PostUsersByIdProfilesGeneralResponses = {
  /**
   * single GeneralUserProfile
   */
  200: GeneralUserProfile;
};

export type PostUsersByIdProfilesGeneralResponse =
  PostUsersByIdProfilesGeneralResponses[keyof PostUsersByIdProfilesGeneralResponses];

export type GetUsersByIdProfilesNotificationsData = {
  body?: never;
  path: {
    id: string;
  };
  query?: {
    fields?: string;
  };
  url: "/users/{id}/profiles/notifications";
};

export type GetUsersByIdProfilesNotificationsResponses = {
  /**
   * single NotificationsUserProfile
   */
  200: NotificationsUserProfile;
};

export type GetUsersByIdProfilesNotificationsResponse =
  GetUsersByIdProfilesNotificationsResponses[keyof GetUsersByIdProfilesNotificationsResponses];

export type PostUsersByIdProfilesNotificationsData = {
  body?: NotificationsUserProfile;
  path: {
    id: string;
  };
  query?: {
    fields?: string;
  };
  url: "/users/{id}/profiles/notifications";
};

export type PostUsersByIdProfilesNotificationsResponses = {
  /**
   * single NotificationsUserProfile
   */
  200: NotificationsUserProfile;
};

export type PostUsersByIdProfilesNotificationsResponse =
  PostUsersByIdProfilesNotificationsResponses[keyof PostUsersByIdProfilesNotificationsResponses];

export type GetUsersByIdProfilesTimetrackingData = {
  body?: never;
  path: {
    id: string;
  };
  query?: {
    fields?: string;
  };
  url: "/users/{id}/profiles/timetracking";
};

export type GetUsersByIdProfilesTimetrackingResponses = {
  /**
   * single TimeTrackingUserProfile
   */
  200: TimeTrackingUserProfile;
};

export type GetUsersByIdProfilesTimetrackingResponse =
  GetUsersByIdProfilesTimetrackingResponses[keyof GetUsersByIdProfilesTimetrackingResponses];

export type PostUsersByIdProfilesTimetrackingData = {
  body?: TimeTrackingUserProfile;
  path: {
    id: string;
  };
  query?: {
    fields?: string;
  };
  url: "/users/{id}/profiles/timetracking";
};

export type PostUsersByIdProfilesTimetrackingResponses = {
  /**
   * single TimeTrackingUserProfile
   */
  200: TimeTrackingUserProfile;
};

export type PostUsersByIdProfilesTimetrackingResponse =
  PostUsersByIdProfilesTimetrackingResponses[keyof PostUsersByIdProfilesTimetrackingResponses];

export type GetUsersByIdSavedQueriesData = {
  body?: never;
  path: {
    id: string;
  };
  query?: {
    fields?: string;
    $skip?: number;
    $top?: number;
  };
  url: "/users/{id}/savedQueries";
};

export type GetUsersByIdSavedQueriesResponses = {
  /**
   * collection of SavedQuery
   */
  200: Array<SavedQuery>;
};

export type GetUsersByIdSavedQueriesResponse =
  GetUsersByIdSavedQueriesResponses[keyof GetUsersByIdSavedQueriesResponses];

export type GetUsersByIdTagsData = {
  body?: never;
  path: {
    id: string;
  };
  query?: {
    fields?: string;
    $skip?: number;
    $top?: number;
  };
  url: "/users/{id}/tags";
};

export type GetUsersByIdTagsResponses = {
  /**
   * collection of Tag
   */
  200: Array<Tag>;
};

export type GetUsersByIdTagsResponse =
  GetUsersByIdTagsResponses[keyof GetUsersByIdTagsResponses];

export type GetUsersMeData = {
  body?: never;
  path?: never;
  query?: {
    fields?: string;
  };
  url: "/users/me";
};

export type GetUsersMeResponses = {
  /**
   * single Me
   */
  200: Me;
};

export type GetUsersMeResponse = GetUsersMeResponses[keyof GetUsersMeResponses];

export type GetWorkItemsData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * Issue search query. Read more about the search syntax here: <a href="https://www.jetbrains.com/help/youtrack/cloud/?Search-and-Command-Attributes">Search Query Reference</a>
     */
    query?: string;
    /**
     * The start date of the time interval where the work item dates belong. Accepts a date in a string format: `YYYY-MM-DD`.
     */
    startDate?: string;
    /**
     * The end date of the time interval where the work item dates belong. Accepts a date in a string format: `YYYY-MM-DD`.
     */
    endDate?: string;
    /**
     * A timestamp in milliseconds indicating the start of the interval where the work item dates belong.
     */
    start?: number;
    /**
     * A timestamp in milliseconds indicating the end of the interval where the work item dates belong.
     */
    end?: number;
    /**
     * A timestamp in milliseconds indicating the start of the interval during which work items were created.
     */
    createdStart?: number;
    /**
     * A timestamp in milliseconds indicating the end of the interval during which work items were created.
     */
    createdEnd?: number;
    /**
     * A timestamp in milliseconds indicating the start of the interval during which work items were updated.
     */
    updatedStart?: number;
    /**
     * A timestamp in milliseconds indicating the end of the interval during which work items were updated.
     */
    updatedEnd?: number;
    author?: string;
    creator?: string;
    fields?: string;
    $skip?: number;
    $top?: number;
  };
  url: "/workItems";
};

export type GetWorkItemsResponses = {
  /**
   * collection of IssueWorkItem
   */
  200: Array<IssueWorkItem>;
};

export type GetWorkItemsResponse =
  GetWorkItemsResponses[keyof GetWorkItemsResponses];

export type GetWorkItemsByIdData = {
  body?: never;
  path: {
    id: string;
  };
  query?: {
    fields?: string;
  };
  url: "/workItems/{id}";
};

export type GetWorkItemsByIdResponses = {
  /**
   * single IssueWorkItem
   */
  200: IssueWorkItem;
};

export type GetWorkItemsByIdResponse =
  GetWorkItemsByIdResponses[keyof GetWorkItemsByIdResponses];

export type ClientOptions = {
  baseUrl: "https://my-mcp-test.youtrack.cloud:443/api" | (string & {});
};
