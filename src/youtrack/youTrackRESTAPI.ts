/**
 * Generated by orval v7.7.0 üç∫
 * Do not edit manually.
 * YouTrack REST API
 * YouTrack issue tracking and project management system
 * OpenAPI spec version: 2025.1
 */
import * as axios from "axios";
import type { AxiosRequestConfig, AxiosResponse } from "axios";

import type {
  ActivityCursorPage,
  ActivityItem,
  Agile,
  AppearanceSettings,
  Article,
  ArticleAttachment,
  ArticleComment,
  BackupFile,
  BackupStatus,
  BuildBundle,
  BuildBundleElement,
  CommandList,
  CustomField,
  CustomFieldDefaults,
  DatabaseBackupSettings,
  EnumBundle,
  EnumBundleElement,
  FieldType,
  GeneralUserProfile,
  GetActivitiesIdParams,
  GetActivitiesPageParams,
  GetActivitiesParams,
  GetAdminCustomFieldSettingsBundlesBuildIdParams,
  GetAdminCustomFieldSettingsBundlesBuildIdValuesBuildBundleElementIdParams,
  GetAdminCustomFieldSettingsBundlesBuildIdValuesParams,
  GetAdminCustomFieldSettingsBundlesBuildParams,
  GetAdminCustomFieldSettingsBundlesEnumIdParams,
  GetAdminCustomFieldSettingsBundlesEnumIdValuesEnumBundleElementIdParams,
  GetAdminCustomFieldSettingsBundlesEnumIdValuesParams,
  GetAdminCustomFieldSettingsBundlesEnumParams,
  GetAdminCustomFieldSettingsBundlesOwnedFieldIdParams,
  GetAdminCustomFieldSettingsBundlesOwnedFieldIdValuesOwnedBundleElementIdParams,
  GetAdminCustomFieldSettingsBundlesOwnedFieldIdValuesParams,
  GetAdminCustomFieldSettingsBundlesOwnedFieldParams,
  GetAdminCustomFieldSettingsBundlesStateIdParams,
  GetAdminCustomFieldSettingsBundlesStateIdValuesParams,
  GetAdminCustomFieldSettingsBundlesStateIdValuesStateBundleElementIdParams,
  GetAdminCustomFieldSettingsBundlesStateParams,
  GetAdminCustomFieldSettingsBundlesUserIdAggregatedUsersParams,
  GetAdminCustomFieldSettingsBundlesUserIdGroupsParams,
  GetAdminCustomFieldSettingsBundlesUserIdGroupsUserGroupIdParams,
  GetAdminCustomFieldSettingsBundlesUserIdIndividualsParams,
  GetAdminCustomFieldSettingsBundlesUserIdIndividualsUserIdParams,
  GetAdminCustomFieldSettingsBundlesUserIdParams,
  GetAdminCustomFieldSettingsBundlesUserParams,
  GetAdminCustomFieldSettingsBundlesVersionIdParams,
  GetAdminCustomFieldSettingsBundlesVersionIdValuesParams,
  GetAdminCustomFieldSettingsBundlesVersionIdValuesVersionBundleElementIdParams,
  GetAdminCustomFieldSettingsBundlesVersionParams,
  GetAdminCustomFieldSettingsCustomFieldsIdFieldDefaultsParams,
  GetAdminCustomFieldSettingsCustomFieldsIdInstancesParams,
  GetAdminCustomFieldSettingsCustomFieldsIdParams,
  GetAdminCustomFieldSettingsCustomFieldsParams,
  GetAdminCustomFieldSettingsTypesParams,
  GetAdminDatabaseBackupBackupsIdParams,
  GetAdminDatabaseBackupBackupsParams,
  GetAdminDatabaseBackupSettingsBackupStatusParams,
  GetAdminDatabaseBackupSettingsParams,
  GetAdminGlobalSettingsAppearanceSettingsParams,
  GetAdminGlobalSettingsLicenseParams,
  GetAdminGlobalSettingsLocaleSettingsParams,
  GetAdminGlobalSettingsNotificationSettingsParams,
  GetAdminGlobalSettingsParams,
  GetAdminGlobalSettingsRestSettingsParams,
  GetAdminGlobalSettingsSystemSettingsParams,
  GetAdminProjectsIdArticlesParams,
  GetAdminProjectsIdCustomFieldsParams,
  GetAdminProjectsIdCustomFieldsProjectCustomFieldIdParams,
  GetAdminProjectsIdIssuesIssueIdParams,
  GetAdminProjectsIdIssuesParams,
  GetAdminProjectsIdParams,
  GetAdminProjectsIdTimeTrackingSettingsParams,
  GetAdminProjectsIdTimeTrackingSettingsWorkItemTypesParams,
  GetAdminProjectsIdTimeTrackingSettingsWorkItemTypesWorkItemTypeIdParams,
  GetAdminProjectsParams,
  GetAdminTelemetryParams,
  GetAdminTimeTrackingSettingsParams,
  GetAdminTimeTrackingSettingsWorkItemTypesParams,
  GetAdminTimeTrackingSettingsWorkItemTypesWorkItemTypeIdParams,
  GetAdminTimeTrackingSettingsWorkTimeSettingsParams,
  GetAgilesIdParams,
  GetAgilesIdSprintsParams,
  GetAgilesIdSprintsSprintIdParams,
  GetAgilesParams,
  GetArticlesIdAttachmentsArticleAttachmentIdParams,
  GetArticlesIdAttachmentsParams,
  GetArticlesIdChildArticlesArticleIdParams,
  GetArticlesIdChildArticlesParams,
  GetArticlesIdCommentsArticleCommentIdParams,
  GetArticlesIdCommentsArticleCommentIdReactionsParams,
  GetArticlesIdCommentsArticleCommentIdReactionsReactionIdParams,
  GetArticlesIdCommentsParams,
  GetArticlesIdParams,
  GetArticlesIdParentArticleParams,
  GetArticlesIdTagsParams,
  GetArticlesIdTagsTagIdParams,
  GetArticlesParams,
  GetGroupsIdParams,
  GetGroupsParams,
  GetIssueLinkTypesIdParams,
  GetIssueLinkTypesParams,
  GetIssuesIdActivitiesActivityItemIdParams,
  GetIssuesIdActivitiesPageParams,
  GetIssuesIdActivitiesParams,
  GetIssuesIdAttachmentsIssueAttachmentIdParams,
  GetIssuesIdAttachmentsParams,
  GetIssuesIdCommentsIssueCommentIdParams,
  GetIssuesIdCommentsIssueCommentIdReactionsParams,
  GetIssuesIdCommentsIssueCommentIdReactionsReactionIdParams,
  GetIssuesIdCommentsParams,
  GetIssuesIdCustomFieldsIssueCustomFieldIdParams,
  GetIssuesIdCustomFieldsParams,
  GetIssuesIdLinksIssueLinkIdIssuesParams,
  GetIssuesIdLinksIssueLinkIdParams,
  GetIssuesIdLinksParams,
  GetIssuesIdParams,
  GetIssuesIdProjectParams,
  GetIssuesIdSprintsParams,
  GetIssuesIdTagsParams,
  GetIssuesIdTagsTagIdParams,
  GetIssuesIdTimeTrackingParams,
  GetIssuesIdTimeTrackingWorkItemsIssueWorkItemIdParams,
  GetIssuesIdTimeTrackingWorkItemsParams,
  GetIssuesIdVcsChangesParams,
  GetIssuesIdVcsChangesVcsChangeIdParams,
  GetIssuesParams,
  GetSavedQueriesIdParams,
  GetSavedQueriesParams,
  GetTagsIdIssuesParams,
  GetTagsIdParams,
  GetTagsParams,
  GetUsersIdParams,
  GetUsersIdProfilesGeneralParams,
  GetUsersIdProfilesNotificationsParams,
  GetUsersIdProfilesTimetrackingParams,
  GetUsersIdSavedQueriesParams,
  GetUsersIdTagsParams,
  GetUsersMeParams,
  GetUsersParams,
  GetWorkItemsIdParams,
  GetWorkItemsParams,
  GlobalSettings,
  GlobalTimeTrackingSettings,
  Issue,
  IssueAttachment,
  IssueComment,
  IssueCountResponse,
  IssueCustomField,
  IssueLink,
  IssueLinkType,
  IssueTimeTracker,
  IssueWorkItem,
  License,
  LocaleSettings,
  Me,
  NotificationSettings,
  NotificationsUserProfile,
  OwnedBundle,
  OwnedBundleElement,
  PostAdminCustomFieldSettingsBundlesBuildIdParams,
  PostAdminCustomFieldSettingsBundlesBuildIdValuesBuildBundleElementIdParams,
  PostAdminCustomFieldSettingsBundlesBuildIdValuesParams,
  PostAdminCustomFieldSettingsBundlesBuildParams,
  PostAdminCustomFieldSettingsBundlesEnumIdParams,
  PostAdminCustomFieldSettingsBundlesEnumIdValuesEnumBundleElementIdParams,
  PostAdminCustomFieldSettingsBundlesEnumIdValuesParams,
  PostAdminCustomFieldSettingsBundlesEnumParams,
  PostAdminCustomFieldSettingsBundlesOwnedFieldIdParams,
  PostAdminCustomFieldSettingsBundlesOwnedFieldIdValuesOwnedBundleElementIdParams,
  PostAdminCustomFieldSettingsBundlesOwnedFieldIdValuesParams,
  PostAdminCustomFieldSettingsBundlesOwnedFieldParams,
  PostAdminCustomFieldSettingsBundlesStateIdParams,
  PostAdminCustomFieldSettingsBundlesStateIdValuesParams,
  PostAdminCustomFieldSettingsBundlesStateIdValuesStateBundleElementIdParams,
  PostAdminCustomFieldSettingsBundlesStateParams,
  PostAdminCustomFieldSettingsBundlesUserIdGroupsParams,
  PostAdminCustomFieldSettingsBundlesUserIdIndividualsParams,
  PostAdminCustomFieldSettingsBundlesUserIdParams,
  PostAdminCustomFieldSettingsBundlesUserParams,
  PostAdminCustomFieldSettingsBundlesVersionIdParams,
  PostAdminCustomFieldSettingsBundlesVersionIdValuesParams,
  PostAdminCustomFieldSettingsBundlesVersionIdValuesVersionBundleElementIdParams,
  PostAdminCustomFieldSettingsBundlesVersionParams,
  PostAdminCustomFieldSettingsCustomFieldsIdFieldDefaultsParams,
  PostAdminCustomFieldSettingsCustomFieldsIdParams,
  PostAdminCustomFieldSettingsCustomFieldsParams,
  PostAdminDatabaseBackupSettingsParams,
  PostAdminGlobalSettingsAppearanceSettingsParams,
  PostAdminGlobalSettingsLicenseParams,
  PostAdminGlobalSettingsLocaleSettingsParams,
  PostAdminGlobalSettingsNotificationSettingsParams,
  PostAdminGlobalSettingsParams,
  PostAdminGlobalSettingsRestSettingsParams,
  PostAdminGlobalSettingsSystemSettingsParams,
  PostAdminProjectsIdCustomFieldsParams,
  PostAdminProjectsIdCustomFieldsProjectCustomFieldIdParams,
  PostAdminProjectsIdIssuesIssueIdParams,
  PostAdminProjectsIdIssuesParams,
  PostAdminProjectsIdParams,
  PostAdminProjectsIdTimeTrackingSettingsParams,
  PostAdminProjectsIdTimeTrackingSettingsWorkItemTypesParams,
  PostAdminProjectsParams,
  PostAdminTimeTrackingSettingsWorkItemTypesParams,
  PostAdminTimeTrackingSettingsWorkItemTypesWorkItemTypeIdParams,
  PostAdminTimeTrackingSettingsWorkTimeSettingsParams,
  PostAgilesIdParams,
  PostAgilesIdSprintsParams,
  PostAgilesIdSprintsSprintIdParams,
  PostAgilesParams,
  PostArticlesIdAttachmentsArticleAttachmentIdParams,
  PostArticlesIdAttachmentsParams,
  PostArticlesIdChildArticlesArticleIdParams,
  PostArticlesIdChildArticlesParams,
  PostArticlesIdCommentsArticleCommentIdParams,
  PostArticlesIdCommentsArticleCommentIdReactionsParams,
  PostArticlesIdCommentsParams,
  PostArticlesIdParams,
  PostArticlesIdTagsParams,
  PostArticlesParams,
  PostCommandsAssistParams,
  PostCommandsParams,
  PostIssueLinkTypesIdParams,
  PostIssueLinkTypesParams,
  PostIssuesGetterCountParams,
  PostIssuesIdAttachmentsBody,
  PostIssuesIdAttachmentsIssueAttachmentIdParams,
  PostIssuesIdAttachmentsParams,
  PostIssuesIdCommentsIssueCommentIdParams,
  PostIssuesIdCommentsIssueCommentIdReactionsParams,
  PostIssuesIdCommentsParams,
  PostIssuesIdCustomFieldsIssueCustomFieldIdParams,
  PostIssuesIdLinksIssueLinkIdIssuesParams,
  PostIssuesIdParams,
  PostIssuesIdProjectParams,
  PostIssuesIdTagsParams,
  PostIssuesIdTimeTrackingWorkItemsIssueWorkItemIdParams,
  PostIssuesIdTimeTrackingWorkItemsParams,
  PostIssuesIdVcsChangesParams,
  PostIssuesIdVcsChangesVcsChangeIdParams,
  PostIssuesParams,
  PostSavedQueriesIdParams,
  PostSavedQueriesParams,
  PostSearchAssistParams,
  PostTagsIdParams,
  PostTagsParams,
  PostUsersIdProfilesGeneralParams,
  PostUsersIdProfilesNotificationsParams,
  PostUsersIdProfilesTimetrackingParams,
  Project,
  ProjectCustomField,
  ProjectTimeTrackingSettings,
  Reaction,
  RestCorsSettings,
  SavedQuery,
  SearchSuggestions,
  Sprint,
  StateBundle,
  StateBundleElement,
  SystemSettings,
  Tag,
  Telemetry,
  TimeTrackingUserProfile,
  User,
  UserBundle,
  UserGroup,
  VcsChange,
  VersionBundle,
  VersionBundleElement,
  WorkItemType,
  WorkTimeSettings,
} from "./models";

// https://stackoverflow.com/questions/49579094/typescript-conditional-types-filter-out-readonly-properties-pick-only-requir/49579497#49579497
type IfEquals<X, Y, A = X, B = never> =
  (<T>() => T extends X ? 1 : 2) extends <T>() => T extends Y ? 1 : 2 ? A : B;

type WritableKeys<T> = {
  [P in keyof T]-?: IfEquals<
    { [Q in P]: T[P] },
    { -readonly [Q in P]: T[P] },
    P
  >;
}[keyof T];

type UnionToIntersection<U> = (U extends any ? (k: U) => void : never) extends (
  k: infer I,
) => void
  ? I
  : never;
type DistributeReadOnlyOverUnions<T> = T extends any ? NonReadonly<T> : never;

type Writable<T> = Pick<T, WritableKeys<T>>;
type NonReadonly<T> = [T] extends [UnionToIntersection<T>]
  ? {
      [P in keyof Writable<T>]: T[P] extends object
        ? NonReadonly<NonNullable<T[P]>>
        : T[P];
    }
  : DistributeReadOnlyOverUnions<T>;

export const getYouTrackRESTAPI = () => {
  const getActivities = <TData = AxiosResponse<ActivityItem[]>>(
    params?: GetActivitiesParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.get(`/activities`, {
      ...options,
      params: { ...params, ...options?.params },
    });
  };

  const getActivitiesId = <TData = AxiosResponse<ActivityItem>>(
    id: string,
    params?: GetActivitiesIdParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.get(`/activities/${id}`, {
      ...options,
      params: { ...params, ...options?.params },
    });
  };

  const getActivitiesPage = <TData = AxiosResponse<ActivityCursorPage>>(
    params?: GetActivitiesPageParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.get(`/activitiesPage`, {
      ...options,
      params: { ...params, ...options?.params },
    });
  };

  const getAdminCustomFieldSettingsBundlesBuild = <
    TData = AxiosResponse<BuildBundle[]>,
  >(
    params?: GetAdminCustomFieldSettingsBundlesBuildParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.get(`/admin/customFieldSettings/bundles/build`, {
      ...options,
      params: { ...params, ...options?.params },
    });
  };

  const postAdminCustomFieldSettingsBundlesBuild = <
    TData = AxiosResponse<BuildBundle>,
  >(
    buildBundle: NonReadonly<BuildBundle>,
    params?: PostAdminCustomFieldSettingsBundlesBuildParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.post(
      `/admin/customFieldSettings/bundles/build`,
      buildBundle,
      {
        ...options,
        params: { ...params, ...options?.params },
      },
    );
  };

  const getAdminCustomFieldSettingsBundlesBuildId = <
    TData = AxiosResponse<BuildBundle>,
  >(
    id: string,
    params?: GetAdminCustomFieldSettingsBundlesBuildIdParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.get(`/admin/customFieldSettings/bundles/build/${id}`, {
      ...options,
      params: { ...params, ...options?.params },
    });
  };

  const postAdminCustomFieldSettingsBundlesBuildId = <
    TData = AxiosResponse<BuildBundle>,
  >(
    id: string,
    buildBundle: NonReadonly<BuildBundle>,
    params?: PostAdminCustomFieldSettingsBundlesBuildIdParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.post(
      `/admin/customFieldSettings/bundles/build/${id}`,
      buildBundle,
      {
        ...options,
        params: { ...params, ...options?.params },
      },
    );
  };

  const deleteAdminCustomFieldSettingsBundlesBuildId = <
    TData = AxiosResponse<void>,
  >(
    id: string,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.delete(
      `/admin/customFieldSettings/bundles/build/${id}`,
      options,
    );
  };

  const getAdminCustomFieldSettingsBundlesBuildIdValues = <
    TData = AxiosResponse<BuildBundleElement[]>,
  >(
    id: string,
    params?: GetAdminCustomFieldSettingsBundlesBuildIdValuesParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.get(
      `/admin/customFieldSettings/bundles/build/${id}/values`,
      {
        ...options,
        params: { ...params, ...options?.params },
      },
    );
  };

  const postAdminCustomFieldSettingsBundlesBuildIdValues = <
    TData = AxiosResponse<BuildBundleElement>,
  >(
    id: string,
    buildBundleElement: NonReadonly<BuildBundleElement>,
    params?: PostAdminCustomFieldSettingsBundlesBuildIdValuesParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.post(
      `/admin/customFieldSettings/bundles/build/${id}/values`,
      buildBundleElement,
      {
        ...options,
        params: { ...params, ...options?.params },
      },
    );
  };

  const getAdminCustomFieldSettingsBundlesBuildIdValuesBuildBundleElementId = <
    TData = AxiosResponse<BuildBundleElement>,
  >(
    id: string,
    buildBundleElementId: string,
    params?: GetAdminCustomFieldSettingsBundlesBuildIdValuesBuildBundleElementIdParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.get(
      `/admin/customFieldSettings/bundles/build/${id}/values/${buildBundleElementId}`,
      {
        ...options,
        params: { ...params, ...options?.params },
      },
    );
  };

  const postAdminCustomFieldSettingsBundlesBuildIdValuesBuildBundleElementId = <
    TData = AxiosResponse<BuildBundleElement>,
  >(
    id: string,
    buildBundleElementId: string,
    buildBundleElement: NonReadonly<BuildBundleElement>,
    params?: PostAdminCustomFieldSettingsBundlesBuildIdValuesBuildBundleElementIdParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.post(
      `/admin/customFieldSettings/bundles/build/${id}/values/${buildBundleElementId}`,
      buildBundleElement,
      {
        ...options,
        params: { ...params, ...options?.params },
      },
    );
  };

  const deleteAdminCustomFieldSettingsBundlesBuildIdValuesBuildBundleElementId =
    <TData = AxiosResponse<void>>(
      id: string,
      buildBundleElementId: string,
      options?: AxiosRequestConfig,
    ): Promise<TData> => {
      return axios.default.delete(
        `/admin/customFieldSettings/bundles/build/${id}/values/${buildBundleElementId}`,
        options,
      );
    };

  const getAdminCustomFieldSettingsBundlesEnum = <
    TData = AxiosResponse<EnumBundle[]>,
  >(
    params?: GetAdminCustomFieldSettingsBundlesEnumParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.get(`/admin/customFieldSettings/bundles/enum`, {
      ...options,
      params: { ...params, ...options?.params },
    });
  };

  const postAdminCustomFieldSettingsBundlesEnum = <
    TData = AxiosResponse<EnumBundle>,
  >(
    enumBundle: NonReadonly<EnumBundle>,
    params?: PostAdminCustomFieldSettingsBundlesEnumParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.post(
      `/admin/customFieldSettings/bundles/enum`,
      enumBundle,
      {
        ...options,
        params: { ...params, ...options?.params },
      },
    );
  };

  const getAdminCustomFieldSettingsBundlesEnumId = <
    TData = AxiosResponse<EnumBundle>,
  >(
    id: string,
    params?: GetAdminCustomFieldSettingsBundlesEnumIdParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.get(`/admin/customFieldSettings/bundles/enum/${id}`, {
      ...options,
      params: { ...params, ...options?.params },
    });
  };

  const postAdminCustomFieldSettingsBundlesEnumId = <
    TData = AxiosResponse<EnumBundle>,
  >(
    id: string,
    enumBundle: NonReadonly<EnumBundle>,
    params?: PostAdminCustomFieldSettingsBundlesEnumIdParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.post(
      `/admin/customFieldSettings/bundles/enum/${id}`,
      enumBundle,
      {
        ...options,
        params: { ...params, ...options?.params },
      },
    );
  };

  const deleteAdminCustomFieldSettingsBundlesEnumId = <
    TData = AxiosResponse<void>,
  >(
    id: string,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.delete(
      `/admin/customFieldSettings/bundles/enum/${id}`,
      options,
    );
  };

  const getAdminCustomFieldSettingsBundlesEnumIdValues = <
    TData = AxiosResponse<EnumBundleElement[]>,
  >(
    id: string,
    params?: GetAdminCustomFieldSettingsBundlesEnumIdValuesParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.get(
      `/admin/customFieldSettings/bundles/enum/${id}/values`,
      {
        ...options,
        params: { ...params, ...options?.params },
      },
    );
  };

  const postAdminCustomFieldSettingsBundlesEnumIdValues = <
    TData = AxiosResponse<EnumBundleElement>,
  >(
    id: string,
    enumBundleElement: NonReadonly<EnumBundleElement>,
    params?: PostAdminCustomFieldSettingsBundlesEnumIdValuesParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.post(
      `/admin/customFieldSettings/bundles/enum/${id}/values`,
      enumBundleElement,
      {
        ...options,
        params: { ...params, ...options?.params },
      },
    );
  };

  const getAdminCustomFieldSettingsBundlesEnumIdValuesEnumBundleElementId = <
    TData = AxiosResponse<EnumBundleElement>,
  >(
    id: string,
    enumBundleElementId: string,
    params?: GetAdminCustomFieldSettingsBundlesEnumIdValuesEnumBundleElementIdParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.get(
      `/admin/customFieldSettings/bundles/enum/${id}/values/${enumBundleElementId}`,
      {
        ...options,
        params: { ...params, ...options?.params },
      },
    );
  };

  const postAdminCustomFieldSettingsBundlesEnumIdValuesEnumBundleElementId = <
    TData = AxiosResponse<EnumBundleElement>,
  >(
    id: string,
    enumBundleElementId: string,
    enumBundleElement: NonReadonly<EnumBundleElement>,
    params?: PostAdminCustomFieldSettingsBundlesEnumIdValuesEnumBundleElementIdParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.post(
      `/admin/customFieldSettings/bundles/enum/${id}/values/${enumBundleElementId}`,
      enumBundleElement,
      {
        ...options,
        params: { ...params, ...options?.params },
      },
    );
  };

  const deleteAdminCustomFieldSettingsBundlesEnumIdValuesEnumBundleElementId = <
    TData = AxiosResponse<void>,
  >(
    id: string,
    enumBundleElementId: string,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.delete(
      `/admin/customFieldSettings/bundles/enum/${id}/values/${enumBundleElementId}`,
      options,
    );
  };

  const getAdminCustomFieldSettingsBundlesOwnedField = <
    TData = AxiosResponse<OwnedBundle[]>,
  >(
    params?: GetAdminCustomFieldSettingsBundlesOwnedFieldParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.get(`/admin/customFieldSettings/bundles/ownedField`, {
      ...options,
      params: { ...params, ...options?.params },
    });
  };

  const postAdminCustomFieldSettingsBundlesOwnedField = <
    TData = AxiosResponse<OwnedBundle>,
  >(
    ownedBundle: NonReadonly<OwnedBundle>,
    params?: PostAdminCustomFieldSettingsBundlesOwnedFieldParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.post(
      `/admin/customFieldSettings/bundles/ownedField`,
      ownedBundle,
      {
        ...options,
        params: { ...params, ...options?.params },
      },
    );
  };

  const getAdminCustomFieldSettingsBundlesOwnedFieldId = <
    TData = AxiosResponse<OwnedBundle>,
  >(
    id: string,
    params?: GetAdminCustomFieldSettingsBundlesOwnedFieldIdParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.get(
      `/admin/customFieldSettings/bundles/ownedField/${id}`,
      {
        ...options,
        params: { ...params, ...options?.params },
      },
    );
  };

  const postAdminCustomFieldSettingsBundlesOwnedFieldId = <
    TData = AxiosResponse<OwnedBundle>,
  >(
    id: string,
    ownedBundle: NonReadonly<OwnedBundle>,
    params?: PostAdminCustomFieldSettingsBundlesOwnedFieldIdParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.post(
      `/admin/customFieldSettings/bundles/ownedField/${id}`,
      ownedBundle,
      {
        ...options,
        params: { ...params, ...options?.params },
      },
    );
  };

  const deleteAdminCustomFieldSettingsBundlesOwnedFieldId = <
    TData = AxiosResponse<void>,
  >(
    id: string,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.delete(
      `/admin/customFieldSettings/bundles/ownedField/${id}`,
      options,
    );
  };

  const getAdminCustomFieldSettingsBundlesOwnedFieldIdValues = <
    TData = AxiosResponse<OwnedBundleElement[]>,
  >(
    id: string,
    params?: GetAdminCustomFieldSettingsBundlesOwnedFieldIdValuesParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.get(
      `/admin/customFieldSettings/bundles/ownedField/${id}/values`,
      {
        ...options,
        params: { ...params, ...options?.params },
      },
    );
  };

  const postAdminCustomFieldSettingsBundlesOwnedFieldIdValues = <
    TData = AxiosResponse<OwnedBundleElement>,
  >(
    id: string,
    ownedBundleElement: NonReadonly<OwnedBundleElement>,
    params?: PostAdminCustomFieldSettingsBundlesOwnedFieldIdValuesParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.post(
      `/admin/customFieldSettings/bundles/ownedField/${id}/values`,
      ownedBundleElement,
      {
        ...options,
        params: { ...params, ...options?.params },
      },
    );
  };

  const getAdminCustomFieldSettingsBundlesOwnedFieldIdValuesOwnedBundleElementId =
    <TData = AxiosResponse<OwnedBundleElement>>(
      id: string,
      ownedBundleElementId: string,
      params?: GetAdminCustomFieldSettingsBundlesOwnedFieldIdValuesOwnedBundleElementIdParams,
      options?: AxiosRequestConfig,
    ): Promise<TData> => {
      return axios.default.get(
        `/admin/customFieldSettings/bundles/ownedField/${id}/values/${ownedBundleElementId}`,
        {
          ...options,
          params: { ...params, ...options?.params },
        },
      );
    };

  const postAdminCustomFieldSettingsBundlesOwnedFieldIdValuesOwnedBundleElementId =
    <TData = AxiosResponse<OwnedBundleElement>>(
      id: string,
      ownedBundleElementId: string,
      ownedBundleElement: NonReadonly<OwnedBundleElement>,
      params?: PostAdminCustomFieldSettingsBundlesOwnedFieldIdValuesOwnedBundleElementIdParams,
      options?: AxiosRequestConfig,
    ): Promise<TData> => {
      return axios.default.post(
        `/admin/customFieldSettings/bundles/ownedField/${id}/values/${ownedBundleElementId}`,
        ownedBundleElement,
        {
          ...options,
          params: { ...params, ...options?.params },
        },
      );
    };

  const deleteAdminCustomFieldSettingsBundlesOwnedFieldIdValuesOwnedBundleElementId =
    <TData = AxiosResponse<void>>(
      id: string,
      ownedBundleElementId: string,
      options?: AxiosRequestConfig,
    ): Promise<TData> => {
      return axios.default.delete(
        `/admin/customFieldSettings/bundles/ownedField/${id}/values/${ownedBundleElementId}`,
        options,
      );
    };

  const getAdminCustomFieldSettingsBundlesState = <
    TData = AxiosResponse<StateBundle[]>,
  >(
    params?: GetAdminCustomFieldSettingsBundlesStateParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.get(`/admin/customFieldSettings/bundles/state`, {
      ...options,
      params: { ...params, ...options?.params },
    });
  };

  const postAdminCustomFieldSettingsBundlesState = <
    TData = AxiosResponse<StateBundle>,
  >(
    stateBundle: NonReadonly<StateBundle>,
    params?: PostAdminCustomFieldSettingsBundlesStateParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.post(
      `/admin/customFieldSettings/bundles/state`,
      stateBundle,
      {
        ...options,
        params: { ...params, ...options?.params },
      },
    );
  };

  const getAdminCustomFieldSettingsBundlesStateId = <
    TData = AxiosResponse<StateBundle>,
  >(
    id: string,
    params?: GetAdminCustomFieldSettingsBundlesStateIdParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.get(`/admin/customFieldSettings/bundles/state/${id}`, {
      ...options,
      params: { ...params, ...options?.params },
    });
  };

  const postAdminCustomFieldSettingsBundlesStateId = <
    TData = AxiosResponse<StateBundle>,
  >(
    id: string,
    stateBundle: NonReadonly<StateBundle>,
    params?: PostAdminCustomFieldSettingsBundlesStateIdParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.post(
      `/admin/customFieldSettings/bundles/state/${id}`,
      stateBundle,
      {
        ...options,
        params: { ...params, ...options?.params },
      },
    );
  };

  const deleteAdminCustomFieldSettingsBundlesStateId = <
    TData = AxiosResponse<void>,
  >(
    id: string,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.delete(
      `/admin/customFieldSettings/bundles/state/${id}`,
      options,
    );
  };

  const getAdminCustomFieldSettingsBundlesStateIdValues = <
    TData = AxiosResponse<StateBundleElement[]>,
  >(
    id: string,
    params?: GetAdminCustomFieldSettingsBundlesStateIdValuesParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.get(
      `/admin/customFieldSettings/bundles/state/${id}/values`,
      {
        ...options,
        params: { ...params, ...options?.params },
      },
    );
  };

  const postAdminCustomFieldSettingsBundlesStateIdValues = <
    TData = AxiosResponse<StateBundleElement>,
  >(
    id: string,
    stateBundleElement: NonReadonly<StateBundleElement>,
    params?: PostAdminCustomFieldSettingsBundlesStateIdValuesParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.post(
      `/admin/customFieldSettings/bundles/state/${id}/values`,
      stateBundleElement,
      {
        ...options,
        params: { ...params, ...options?.params },
      },
    );
  };

  const getAdminCustomFieldSettingsBundlesStateIdValuesStateBundleElementId = <
    TData = AxiosResponse<StateBundleElement>,
  >(
    id: string,
    stateBundleElementId: string,
    params?: GetAdminCustomFieldSettingsBundlesStateIdValuesStateBundleElementIdParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.get(
      `/admin/customFieldSettings/bundles/state/${id}/values/${stateBundleElementId}`,
      {
        ...options,
        params: { ...params, ...options?.params },
      },
    );
  };

  const postAdminCustomFieldSettingsBundlesStateIdValuesStateBundleElementId = <
    TData = AxiosResponse<StateBundleElement>,
  >(
    id: string,
    stateBundleElementId: string,
    stateBundleElement: NonReadonly<StateBundleElement>,
    params?: PostAdminCustomFieldSettingsBundlesStateIdValuesStateBundleElementIdParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.post(
      `/admin/customFieldSettings/bundles/state/${id}/values/${stateBundleElementId}`,
      stateBundleElement,
      {
        ...options,
        params: { ...params, ...options?.params },
      },
    );
  };

  const deleteAdminCustomFieldSettingsBundlesStateIdValuesStateBundleElementId =
    <TData = AxiosResponse<void>>(
      id: string,
      stateBundleElementId: string,
      options?: AxiosRequestConfig,
    ): Promise<TData> => {
      return axios.default.delete(
        `/admin/customFieldSettings/bundles/state/${id}/values/${stateBundleElementId}`,
        options,
      );
    };

  const getAdminCustomFieldSettingsBundlesUser = <
    TData = AxiosResponse<UserBundle[]>,
  >(
    params?: GetAdminCustomFieldSettingsBundlesUserParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.get(`/admin/customFieldSettings/bundles/user`, {
      ...options,
      params: { ...params, ...options?.params },
    });
  };

  const postAdminCustomFieldSettingsBundlesUser = <
    TData = AxiosResponse<UserBundle>,
  >(
    userBundle: NonReadonly<UserBundle>,
    params?: PostAdminCustomFieldSettingsBundlesUserParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.post(
      `/admin/customFieldSettings/bundles/user`,
      userBundle,
      {
        ...options,
        params: { ...params, ...options?.params },
      },
    );
  };

  const getAdminCustomFieldSettingsBundlesUserId = <
    TData = AxiosResponse<UserBundle>,
  >(
    id: string,
    params?: GetAdminCustomFieldSettingsBundlesUserIdParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.get(`/admin/customFieldSettings/bundles/user/${id}`, {
      ...options,
      params: { ...params, ...options?.params },
    });
  };

  const postAdminCustomFieldSettingsBundlesUserId = <
    TData = AxiosResponse<UserBundle>,
  >(
    id: string,
    userBundle: NonReadonly<UserBundle>,
    params?: PostAdminCustomFieldSettingsBundlesUserIdParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.post(
      `/admin/customFieldSettings/bundles/user/${id}`,
      userBundle,
      {
        ...options,
        params: { ...params, ...options?.params },
      },
    );
  };

  const deleteAdminCustomFieldSettingsBundlesUserId = <
    TData = AxiosResponse<void>,
  >(
    id: string,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.delete(
      `/admin/customFieldSettings/bundles/user/${id}`,
      options,
    );
  };

  const getAdminCustomFieldSettingsBundlesUserIdAggregatedUsers = <
    TData = AxiosResponse<User[]>,
  >(
    id: string,
    params?: GetAdminCustomFieldSettingsBundlesUserIdAggregatedUsersParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.get(
      `/admin/customFieldSettings/bundles/user/${id}/aggregatedUsers`,
      {
        ...options,
        params: { ...params, ...options?.params },
      },
    );
  };

  const getAdminCustomFieldSettingsBundlesUserIdGroups = <
    TData = AxiosResponse<UserGroup[]>,
  >(
    id: string,
    params?: GetAdminCustomFieldSettingsBundlesUserIdGroupsParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.get(
      `/admin/customFieldSettings/bundles/user/${id}/groups`,
      {
        ...options,
        params: { ...params, ...options?.params },
      },
    );
  };

  const postAdminCustomFieldSettingsBundlesUserIdGroups = <
    TData = AxiosResponse<UserGroup>,
  >(
    id: string,
    userGroup: NonReadonly<UserGroup>,
    params?: PostAdminCustomFieldSettingsBundlesUserIdGroupsParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.post(
      `/admin/customFieldSettings/bundles/user/${id}/groups`,
      userGroup,
      {
        ...options,
        params: { ...params, ...options?.params },
      },
    );
  };

  const getAdminCustomFieldSettingsBundlesUserIdGroupsUserGroupId = <
    TData = AxiosResponse<UserGroup>,
  >(
    id: string,
    userGroupId: string,
    params?: GetAdminCustomFieldSettingsBundlesUserIdGroupsUserGroupIdParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.get(
      `/admin/customFieldSettings/bundles/user/${id}/groups/${userGroupId}`,
      {
        ...options,
        params: { ...params, ...options?.params },
      },
    );
  };

  const deleteAdminCustomFieldSettingsBundlesUserIdGroupsUserGroupId = <
    TData = AxiosResponse<void>,
  >(
    id: string,
    userGroupId: string,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.delete(
      `/admin/customFieldSettings/bundles/user/${id}/groups/${userGroupId}`,
      options,
    );
  };

  const getAdminCustomFieldSettingsBundlesUserIdIndividuals = <
    TData = AxiosResponse<User[]>,
  >(
    id: string,
    params?: GetAdminCustomFieldSettingsBundlesUserIdIndividualsParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.get(
      `/admin/customFieldSettings/bundles/user/${id}/individuals`,
      {
        ...options,
        params: { ...params, ...options?.params },
      },
    );
  };

  const postAdminCustomFieldSettingsBundlesUserIdIndividuals = <
    TData = AxiosResponse<User>,
  >(
    id: string,
    user: NonReadonly<User>,
    params?: PostAdminCustomFieldSettingsBundlesUserIdIndividualsParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.post(
      `/admin/customFieldSettings/bundles/user/${id}/individuals`,
      user,
      {
        ...options,
        params: { ...params, ...options?.params },
      },
    );
  };

  const getAdminCustomFieldSettingsBundlesUserIdIndividualsUserId = <
    TData = AxiosResponse<User>,
  >(
    id: string,
    userId: string,
    params?: GetAdminCustomFieldSettingsBundlesUserIdIndividualsUserIdParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.get(
      `/admin/customFieldSettings/bundles/user/${id}/individuals/${userId}`,
      {
        ...options,
        params: { ...params, ...options?.params },
      },
    );
  };

  const deleteAdminCustomFieldSettingsBundlesUserIdIndividualsUserId = <
    TData = AxiosResponse<void>,
  >(
    id: string,
    userId: string,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.delete(
      `/admin/customFieldSettings/bundles/user/${id}/individuals/${userId}`,
      options,
    );
  };

  const getAdminCustomFieldSettingsBundlesVersion = <
    TData = AxiosResponse<VersionBundle[]>,
  >(
    params?: GetAdminCustomFieldSettingsBundlesVersionParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.get(`/admin/customFieldSettings/bundles/version`, {
      ...options,
      params: { ...params, ...options?.params },
    });
  };

  const postAdminCustomFieldSettingsBundlesVersion = <
    TData = AxiosResponse<VersionBundle>,
  >(
    versionBundle: NonReadonly<VersionBundle>,
    params?: PostAdminCustomFieldSettingsBundlesVersionParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.post(
      `/admin/customFieldSettings/bundles/version`,
      versionBundle,
      {
        ...options,
        params: { ...params, ...options?.params },
      },
    );
  };

  const getAdminCustomFieldSettingsBundlesVersionId = <
    TData = AxiosResponse<VersionBundle>,
  >(
    id: string,
    params?: GetAdminCustomFieldSettingsBundlesVersionIdParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.get(
      `/admin/customFieldSettings/bundles/version/${id}`,
      {
        ...options,
        params: { ...params, ...options?.params },
      },
    );
  };

  const postAdminCustomFieldSettingsBundlesVersionId = <
    TData = AxiosResponse<VersionBundle>,
  >(
    id: string,
    versionBundle: NonReadonly<VersionBundle>,
    params?: PostAdminCustomFieldSettingsBundlesVersionIdParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.post(
      `/admin/customFieldSettings/bundles/version/${id}`,
      versionBundle,
      {
        ...options,
        params: { ...params, ...options?.params },
      },
    );
  };

  const deleteAdminCustomFieldSettingsBundlesVersionId = <
    TData = AxiosResponse<void>,
  >(
    id: string,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.delete(
      `/admin/customFieldSettings/bundles/version/${id}`,
      options,
    );
  };

  const getAdminCustomFieldSettingsBundlesVersionIdValues = <
    TData = AxiosResponse<VersionBundleElement[]>,
  >(
    id: string,
    params?: GetAdminCustomFieldSettingsBundlesVersionIdValuesParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.get(
      `/admin/customFieldSettings/bundles/version/${id}/values`,
      {
        ...options,
        params: { ...params, ...options?.params },
      },
    );
  };

  const postAdminCustomFieldSettingsBundlesVersionIdValues = <
    TData = AxiosResponse<VersionBundleElement>,
  >(
    id: string,
    versionBundleElement: NonReadonly<VersionBundleElement>,
    params?: PostAdminCustomFieldSettingsBundlesVersionIdValuesParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.post(
      `/admin/customFieldSettings/bundles/version/${id}/values`,
      versionBundleElement,
      {
        ...options,
        params: { ...params, ...options?.params },
      },
    );
  };

  const getAdminCustomFieldSettingsBundlesVersionIdValuesVersionBundleElementId =
    <TData = AxiosResponse<VersionBundleElement>>(
      id: string,
      versionBundleElementId: string,
      params?: GetAdminCustomFieldSettingsBundlesVersionIdValuesVersionBundleElementIdParams,
      options?: AxiosRequestConfig,
    ): Promise<TData> => {
      return axios.default.get(
        `/admin/customFieldSettings/bundles/version/${id}/values/${versionBundleElementId}`,
        {
          ...options,
          params: { ...params, ...options?.params },
        },
      );
    };

  const postAdminCustomFieldSettingsBundlesVersionIdValuesVersionBundleElementId =
    <TData = AxiosResponse<VersionBundleElement>>(
      id: string,
      versionBundleElementId: string,
      versionBundleElement: NonReadonly<VersionBundleElement>,
      params?: PostAdminCustomFieldSettingsBundlesVersionIdValuesVersionBundleElementIdParams,
      options?: AxiosRequestConfig,
    ): Promise<TData> => {
      return axios.default.post(
        `/admin/customFieldSettings/bundles/version/${id}/values/${versionBundleElementId}`,
        versionBundleElement,
        {
          ...options,
          params: { ...params, ...options?.params },
        },
      );
    };

  const deleteAdminCustomFieldSettingsBundlesVersionIdValuesVersionBundleElementId =
    <TData = AxiosResponse<void>>(
      id: string,
      versionBundleElementId: string,
      options?: AxiosRequestConfig,
    ): Promise<TData> => {
      return axios.default.delete(
        `/admin/customFieldSettings/bundles/version/${id}/values/${versionBundleElementId}`,
        options,
      );
    };

  const getAdminCustomFieldSettingsCustomFields = <
    TData = AxiosResponse<CustomField[]>,
  >(
    params?: GetAdminCustomFieldSettingsCustomFieldsParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.get(`/admin/customFieldSettings/customFields`, {
      ...options,
      params: { ...params, ...options?.params },
    });
  };

  const postAdminCustomFieldSettingsCustomFields = <
    TData = AxiosResponse<CustomField>,
  >(
    customField: NonReadonly<CustomField>,
    params?: PostAdminCustomFieldSettingsCustomFieldsParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.post(
      `/admin/customFieldSettings/customFields`,
      customField,
      {
        ...options,
        params: { ...params, ...options?.params },
      },
    );
  };

  const getAdminCustomFieldSettingsCustomFieldsId = <
    TData = AxiosResponse<CustomField>,
  >(
    id: string,
    params?: GetAdminCustomFieldSettingsCustomFieldsIdParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.get(`/admin/customFieldSettings/customFields/${id}`, {
      ...options,
      params: { ...params, ...options?.params },
    });
  };

  const postAdminCustomFieldSettingsCustomFieldsId = <
    TData = AxiosResponse<CustomField>,
  >(
    id: string,
    customField: NonReadonly<CustomField>,
    params?: PostAdminCustomFieldSettingsCustomFieldsIdParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.post(
      `/admin/customFieldSettings/customFields/${id}`,
      customField,
      {
        ...options,
        params: { ...params, ...options?.params },
      },
    );
  };

  const deleteAdminCustomFieldSettingsCustomFieldsId = <
    TData = AxiosResponse<void>,
  >(
    id: string,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.delete(
      `/admin/customFieldSettings/customFields/${id}`,
      options,
    );
  };

  const getAdminCustomFieldSettingsCustomFieldsIdFieldDefaults = <
    TData = AxiosResponse<CustomFieldDefaults>,
  >(
    id: string,
    params?: GetAdminCustomFieldSettingsCustomFieldsIdFieldDefaultsParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.get(
      `/admin/customFieldSettings/customFields/${id}/fieldDefaults`,
      {
        ...options,
        params: { ...params, ...options?.params },
      },
    );
  };

  const postAdminCustomFieldSettingsCustomFieldsIdFieldDefaults = <
    TData = AxiosResponse<CustomFieldDefaults>,
  >(
    id: string,
    customFieldDefaults: NonReadonly<CustomFieldDefaults>,
    params?: PostAdminCustomFieldSettingsCustomFieldsIdFieldDefaultsParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.post(
      `/admin/customFieldSettings/customFields/${id}/fieldDefaults`,
      customFieldDefaults,
      {
        ...options,
        params: { ...params, ...options?.params },
      },
    );
  };

  const getAdminCustomFieldSettingsCustomFieldsIdInstances = <
    TData = AxiosResponse<ProjectCustomField[]>,
  >(
    id: string,
    params?: GetAdminCustomFieldSettingsCustomFieldsIdInstancesParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.get(
      `/admin/customFieldSettings/customFields/${id}/instances`,
      {
        ...options,
        params: { ...params, ...options?.params },
      },
    );
  };

  const getAdminCustomFieldSettingsTypes = <TData = AxiosResponse<FieldType[]>>(
    params?: GetAdminCustomFieldSettingsTypesParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.get(`/admin/customFieldSettings/types`, {
      ...options,
      params: { ...params, ...options?.params },
    });
  };

  const getAdminDatabaseBackupBackups = <TData = AxiosResponse<BackupFile[]>>(
    params?: GetAdminDatabaseBackupBackupsParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.get(`/admin/databaseBackup/backups`, {
      ...options,
      params: { ...params, ...options?.params },
    });
  };

  const getAdminDatabaseBackupBackupsId = <TData = AxiosResponse<BackupFile>>(
    id: string,
    params?: GetAdminDatabaseBackupBackupsIdParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.get(`/admin/databaseBackup/backups/${id}`, {
      ...options,
      params: { ...params, ...options?.params },
    });
  };

  const getAdminDatabaseBackupSettings = <
    TData = AxiosResponse<DatabaseBackupSettings>,
  >(
    params?: GetAdminDatabaseBackupSettingsParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.get(`/admin/databaseBackup/settings`, {
      ...options,
      params: { ...params, ...options?.params },
    });
  };

  const postAdminDatabaseBackupSettings = <
    TData = AxiosResponse<DatabaseBackupSettings>,
  >(
    databaseBackupSettings: NonReadonly<DatabaseBackupSettings>,
    params?: PostAdminDatabaseBackupSettingsParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.post(
      `/admin/databaseBackup/settings`,
      databaseBackupSettings,
      {
        ...options,
        params: { ...params, ...options?.params },
      },
    );
  };

  const getAdminDatabaseBackupSettingsBackupStatus = <
    TData = AxiosResponse<BackupStatus>,
  >(
    params?: GetAdminDatabaseBackupSettingsBackupStatusParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.get(`/admin/databaseBackup/settings/backupStatus`, {
      ...options,
      params: { ...params, ...options?.params },
    });
  };

  const getAdminGlobalSettings = <TData = AxiosResponse<GlobalSettings>>(
    params?: GetAdminGlobalSettingsParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.get(`/admin/globalSettings`, {
      ...options,
      params: { ...params, ...options?.params },
    });
  };

  const postAdminGlobalSettings = <TData = AxiosResponse<GlobalSettings>>(
    globalSettings: NonReadonly<GlobalSettings>,
    params?: PostAdminGlobalSettingsParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.post(`/admin/globalSettings`, globalSettings, {
      ...options,
      params: { ...params, ...options?.params },
    });
  };

  const getAdminGlobalSettingsAppearanceSettings = <
    TData = AxiosResponse<AppearanceSettings>,
  >(
    params?: GetAdminGlobalSettingsAppearanceSettingsParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.get(`/admin/globalSettings/appearanceSettings`, {
      ...options,
      params: { ...params, ...options?.params },
    });
  };

  const postAdminGlobalSettingsAppearanceSettings = <
    TData = AxiosResponse<AppearanceSettings>,
  >(
    appearanceSettings: NonReadonly<AppearanceSettings>,
    params?: PostAdminGlobalSettingsAppearanceSettingsParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.post(
      `/admin/globalSettings/appearanceSettings`,
      appearanceSettings,
      {
        ...options,
        params: { ...params, ...options?.params },
      },
    );
  };

  const getAdminGlobalSettingsLicense = <TData = AxiosResponse<License>>(
    params?: GetAdminGlobalSettingsLicenseParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.get(`/admin/globalSettings/license`, {
      ...options,
      params: { ...params, ...options?.params },
    });
  };

  const postAdminGlobalSettingsLicense = <TData = AxiosResponse<License>>(
    license: NonReadonly<License>,
    params?: PostAdminGlobalSettingsLicenseParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.post(`/admin/globalSettings/license`, license, {
      ...options,
      params: { ...params, ...options?.params },
    });
  };

  const getAdminGlobalSettingsLocaleSettings = <
    TData = AxiosResponse<LocaleSettings>,
  >(
    params?: GetAdminGlobalSettingsLocaleSettingsParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.get(`/admin/globalSettings/localeSettings`, {
      ...options,
      params: { ...params, ...options?.params },
    });
  };

  const postAdminGlobalSettingsLocaleSettings = <
    TData = AxiosResponse<LocaleSettings>,
  >(
    localeSettings: NonReadonly<LocaleSettings>,
    params?: PostAdminGlobalSettingsLocaleSettingsParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.post(
      `/admin/globalSettings/localeSettings`,
      localeSettings,
      {
        ...options,
        params: { ...params, ...options?.params },
      },
    );
  };

  const getAdminGlobalSettingsNotificationSettings = <
    TData = AxiosResponse<NotificationSettings>,
  >(
    params?: GetAdminGlobalSettingsNotificationSettingsParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.get(`/admin/globalSettings/notificationSettings`, {
      ...options,
      params: { ...params, ...options?.params },
    });
  };

  const postAdminGlobalSettingsNotificationSettings = <
    TData = AxiosResponse<NotificationSettings>,
  >(
    notificationSettings: NonReadonly<NotificationSettings>,
    params?: PostAdminGlobalSettingsNotificationSettingsParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.post(
      `/admin/globalSettings/notificationSettings`,
      notificationSettings,
      {
        ...options,
        params: { ...params, ...options?.params },
      },
    );
  };

  const getAdminGlobalSettingsRestSettings = <
    TData = AxiosResponse<RestCorsSettings>,
  >(
    params?: GetAdminGlobalSettingsRestSettingsParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.get(`/admin/globalSettings/restSettings`, {
      ...options,
      params: { ...params, ...options?.params },
    });
  };

  const postAdminGlobalSettingsRestSettings = <
    TData = AxiosResponse<RestCorsSettings>,
  >(
    restCorsSettings: NonReadonly<RestCorsSettings>,
    params?: PostAdminGlobalSettingsRestSettingsParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.post(
      `/admin/globalSettings/restSettings`,
      restCorsSettings,
      {
        ...options,
        params: { ...params, ...options?.params },
      },
    );
  };

  const getAdminGlobalSettingsSystemSettings = <
    TData = AxiosResponse<SystemSettings>,
  >(
    params?: GetAdminGlobalSettingsSystemSettingsParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.get(`/admin/globalSettings/systemSettings`, {
      ...options,
      params: { ...params, ...options?.params },
    });
  };

  const postAdminGlobalSettingsSystemSettings = <
    TData = AxiosResponse<SystemSettings>,
  >(
    systemSettings: NonReadonly<SystemSettings>,
    params?: PostAdminGlobalSettingsSystemSettingsParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.post(
      `/admin/globalSettings/systemSettings`,
      systemSettings,
      {
        ...options,
        params: { ...params, ...options?.params },
      },
    );
  };

  const getAdminProjects = <TData = AxiosResponse<Project[]>>(
    params?: GetAdminProjectsParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.get(`/admin/projects`, {
      ...options,
      params: { ...params, ...options?.params },
    });
  };

  const postAdminProjects = <TData = AxiosResponse<Project>>(
    project: NonReadonly<Project>,
    params?: PostAdminProjectsParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.post(`/admin/projects`, project, {
      ...options,
      params: { ...params, ...options?.params },
    });
  };

  const getAdminProjectsId = <TData = AxiosResponse<Project>>(
    id: string,
    params?: GetAdminProjectsIdParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.get(`/admin/projects/${id}`, {
      ...options,
      params: { ...params, ...options?.params },
    });
  };

  const postAdminProjectsId = <TData = AxiosResponse<Project>>(
    id: string,
    project: NonReadonly<Project>,
    params?: PostAdminProjectsIdParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.post(`/admin/projects/${id}`, project, {
      ...options,
      params: { ...params, ...options?.params },
    });
  };

  const deleteAdminProjectsId = <TData = AxiosResponse<void>>(
    id: string,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.delete(`/admin/projects/${id}`, options);
  };

  const getAdminProjectsIdArticles = <TData = AxiosResponse<Article[]>>(
    id: string,
    params?: GetAdminProjectsIdArticlesParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.get(`/admin/projects/${id}/articles`, {
      ...options,
      params: { ...params, ...options?.params },
    });
  };

  const getAdminProjectsIdCustomFields = <
    TData = AxiosResponse<ProjectCustomField[]>,
  >(
    id: string,
    params?: GetAdminProjectsIdCustomFieldsParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.get(`/admin/projects/${id}/customFields`, {
      ...options,
      params: { ...params, ...options?.params },
    });
  };

  const postAdminProjectsIdCustomFields = <
    TData = AxiosResponse<ProjectCustomField>,
  >(
    id: string,
    projectCustomField: NonReadonly<ProjectCustomField>,
    params?: PostAdminProjectsIdCustomFieldsParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.post(
      `/admin/projects/${id}/customFields`,
      projectCustomField,
      {
        ...options,
        params: { ...params, ...options?.params },
      },
    );
  };

  const getAdminProjectsIdCustomFieldsProjectCustomFieldId = <
    TData = AxiosResponse<ProjectCustomField>,
  >(
    id: string,
    projectCustomFieldId: string,
    params?: GetAdminProjectsIdCustomFieldsProjectCustomFieldIdParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.get(
      `/admin/projects/${id}/customFields/${projectCustomFieldId}`,
      {
        ...options,
        params: { ...params, ...options?.params },
      },
    );
  };

  const postAdminProjectsIdCustomFieldsProjectCustomFieldId = <
    TData = AxiosResponse<ProjectCustomField>,
  >(
    id: string,
    projectCustomFieldId: string,
    projectCustomField: NonReadonly<ProjectCustomField>,
    params?: PostAdminProjectsIdCustomFieldsProjectCustomFieldIdParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.post(
      `/admin/projects/${id}/customFields/${projectCustomFieldId}`,
      projectCustomField,
      {
        ...options,
        params: { ...params, ...options?.params },
      },
    );
  };

  const deleteAdminProjectsIdCustomFieldsProjectCustomFieldId = <
    TData = AxiosResponse<void>,
  >(
    id: string,
    projectCustomFieldId: string,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.delete(
      `/admin/projects/${id}/customFields/${projectCustomFieldId}`,
      options,
    );
  };

  const getAdminProjectsIdIssues = <TData = AxiosResponse<Issue[]>>(
    id: string,
    params?: GetAdminProjectsIdIssuesParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.get(`/admin/projects/${id}/issues`, {
      ...options,
      params: { ...params, ...options?.params },
    });
  };

  const postAdminProjectsIdIssues = <TData = AxiosResponse<Issue>>(
    id: string,
    issue: NonReadonly<Issue>,
    params?: PostAdminProjectsIdIssuesParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.post(`/admin/projects/${id}/issues`, issue, {
      ...options,
      params: { ...params, ...options?.params },
    });
  };

  const getAdminProjectsIdIssuesIssueId = <TData = AxiosResponse<Issue>>(
    id: string,
    issueId: string,
    params?: GetAdminProjectsIdIssuesIssueIdParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.get(`/admin/projects/${id}/issues/${issueId}`, {
      ...options,
      params: { ...params, ...options?.params },
    });
  };

  const postAdminProjectsIdIssuesIssueId = <TData = AxiosResponse<Issue>>(
    id: string,
    issueId: string,
    issue: NonReadonly<Issue>,
    params?: PostAdminProjectsIdIssuesIssueIdParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.post(
      `/admin/projects/${id}/issues/${issueId}`,
      issue,
      {
        ...options,
        params: { ...params, ...options?.params },
      },
    );
  };

  const deleteAdminProjectsIdIssuesIssueId = <TData = AxiosResponse<void>>(
    id: string,
    issueId: string,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.delete(
      `/admin/projects/${id}/issues/${issueId}`,
      options,
    );
  };

  const getAdminProjectsIdTimeTrackingSettings = <
    TData = AxiosResponse<ProjectTimeTrackingSettings>,
  >(
    id: string,
    params?: GetAdminProjectsIdTimeTrackingSettingsParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.get(`/admin/projects/${id}/timeTrackingSettings`, {
      ...options,
      params: { ...params, ...options?.params },
    });
  };

  const postAdminProjectsIdTimeTrackingSettings = <
    TData = AxiosResponse<ProjectTimeTrackingSettings>,
  >(
    id: string,
    projectTimeTrackingSettings: NonReadonly<ProjectTimeTrackingSettings>,
    params?: PostAdminProjectsIdTimeTrackingSettingsParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.post(
      `/admin/projects/${id}/timeTrackingSettings`,
      projectTimeTrackingSettings,
      {
        ...options,
        params: { ...params, ...options?.params },
      },
    );
  };

  const getAdminProjectsIdTimeTrackingSettingsWorkItemTypes = <
    TData = AxiosResponse<WorkItemType[]>,
  >(
    id: string,
    params?: GetAdminProjectsIdTimeTrackingSettingsWorkItemTypesParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.get(
      `/admin/projects/${id}/timeTrackingSettings/workItemTypes`,
      {
        ...options,
        params: { ...params, ...options?.params },
      },
    );
  };

  const postAdminProjectsIdTimeTrackingSettingsWorkItemTypes = <
    TData = AxiosResponse<WorkItemType>,
  >(
    id: string,
    workItemType: NonReadonly<WorkItemType>,
    params?: PostAdminProjectsIdTimeTrackingSettingsWorkItemTypesParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.post(
      `/admin/projects/${id}/timeTrackingSettings/workItemTypes`,
      workItemType,
      {
        ...options,
        params: { ...params, ...options?.params },
      },
    );
  };

  const getAdminProjectsIdTimeTrackingSettingsWorkItemTypesWorkItemTypeId = <
    TData = AxiosResponse<WorkItemType>,
  >(
    id: string,
    workItemTypeId: string,
    params?: GetAdminProjectsIdTimeTrackingSettingsWorkItemTypesWorkItemTypeIdParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.get(
      `/admin/projects/${id}/timeTrackingSettings/workItemTypes/${workItemTypeId}`,
      {
        ...options,
        params: { ...params, ...options?.params },
      },
    );
  };

  const deleteAdminProjectsIdTimeTrackingSettingsWorkItemTypesWorkItemTypeId = <
    TData = AxiosResponse<void>,
  >(
    id: string,
    workItemTypeId: string,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.delete(
      `/admin/projects/${id}/timeTrackingSettings/workItemTypes/${workItemTypeId}`,
      options,
    );
  };

  const getAdminTelemetry = <TData = AxiosResponse<Telemetry>>(
    params?: GetAdminTelemetryParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.get(`/admin/telemetry`, {
      ...options,
      params: { ...params, ...options?.params },
    });
  };

  const getAdminTimeTrackingSettings = <
    TData = AxiosResponse<GlobalTimeTrackingSettings>,
  >(
    params?: GetAdminTimeTrackingSettingsParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.get(`/admin/timeTrackingSettings`, {
      ...options,
      params: { ...params, ...options?.params },
    });
  };

  const getAdminTimeTrackingSettingsWorkItemTypes = <
    TData = AxiosResponse<WorkItemType[]>,
  >(
    params?: GetAdminTimeTrackingSettingsWorkItemTypesParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.get(`/admin/timeTrackingSettings/workItemTypes`, {
      ...options,
      params: { ...params, ...options?.params },
    });
  };

  const postAdminTimeTrackingSettingsWorkItemTypes = <
    TData = AxiosResponse<WorkItemType>,
  >(
    workItemType: NonReadonly<WorkItemType>,
    params?: PostAdminTimeTrackingSettingsWorkItemTypesParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.post(
      `/admin/timeTrackingSettings/workItemTypes`,
      workItemType,
      {
        ...options,
        params: { ...params, ...options?.params },
      },
    );
  };

  const getAdminTimeTrackingSettingsWorkItemTypesWorkItemTypeId = <
    TData = AxiosResponse<WorkItemType>,
  >(
    workItemTypeId: string,
    params?: GetAdminTimeTrackingSettingsWorkItemTypesWorkItemTypeIdParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.get(
      `/admin/timeTrackingSettings/workItemTypes/${workItemTypeId}`,
      {
        ...options,
        params: { ...params, ...options?.params },
      },
    );
  };

  const postAdminTimeTrackingSettingsWorkItemTypesWorkItemTypeId = <
    TData = AxiosResponse<WorkItemType>,
  >(
    workItemTypeId: string,
    workItemType: NonReadonly<WorkItemType>,
    params?: PostAdminTimeTrackingSettingsWorkItemTypesWorkItemTypeIdParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.post(
      `/admin/timeTrackingSettings/workItemTypes/${workItemTypeId}`,
      workItemType,
      {
        ...options,
        params: { ...params, ...options?.params },
      },
    );
  };

  const deleteAdminTimeTrackingSettingsWorkItemTypesWorkItemTypeId = <
    TData = AxiosResponse<void>,
  >(
    workItemTypeId: string,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.delete(
      `/admin/timeTrackingSettings/workItemTypes/${workItemTypeId}`,
      options,
    );
  };

  const getAdminTimeTrackingSettingsWorkTimeSettings = <
    TData = AxiosResponse<WorkTimeSettings>,
  >(
    params?: GetAdminTimeTrackingSettingsWorkTimeSettingsParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.get(`/admin/timeTrackingSettings/workTimeSettings`, {
      ...options,
      params: { ...params, ...options?.params },
    });
  };

  const postAdminTimeTrackingSettingsWorkTimeSettings = <
    TData = AxiosResponse<WorkTimeSettings>,
  >(
    workTimeSettings: NonReadonly<WorkTimeSettings>,
    params?: PostAdminTimeTrackingSettingsWorkTimeSettingsParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.post(
      `/admin/timeTrackingSettings/workTimeSettings`,
      workTimeSettings,
      {
        ...options,
        params: { ...params, ...options?.params },
      },
    );
  };

  const getAgiles = <TData = AxiosResponse<Agile[]>>(
    params?: GetAgilesParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.get(`/agiles`, {
      ...options,
      params: { ...params, ...options?.params },
    });
  };

  const postAgiles = <TData = AxiosResponse<Agile>>(
    agile: NonReadonly<Agile>,
    params?: PostAgilesParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.post(`/agiles`, agile, {
      ...options,
      params: { ...params, ...options?.params },
    });
  };

  const getAgilesId = <TData = AxiosResponse<Agile>>(
    id: string,
    params?: GetAgilesIdParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.get(`/agiles/${id}`, {
      ...options,
      params: { ...params, ...options?.params },
    });
  };

  const postAgilesId = <TData = AxiosResponse<Agile>>(
    id: string,
    agile: NonReadonly<Agile>,
    params?: PostAgilesIdParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.post(`/agiles/${id}`, agile, {
      ...options,
      params: { ...params, ...options?.params },
    });
  };

  const deleteAgilesId = <TData = AxiosResponse<void>>(
    id: string,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.delete(`/agiles/${id}`, options);
  };

  const getAgilesIdSprints = <TData = AxiosResponse<Sprint[]>>(
    id: string,
    params?: GetAgilesIdSprintsParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.get(`/agiles/${id}/sprints`, {
      ...options,
      params: { ...params, ...options?.params },
    });
  };

  const postAgilesIdSprints = <TData = AxiosResponse<Sprint>>(
    id: string,
    sprint: NonReadonly<Sprint>,
    params?: PostAgilesIdSprintsParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.post(`/agiles/${id}/sprints`, sprint, {
      ...options,
      params: { ...params, ...options?.params },
    });
  };

  const getAgilesIdSprintsSprintId = <TData = AxiosResponse<Sprint>>(
    id: string,
    sprintId: string,
    params?: GetAgilesIdSprintsSprintIdParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.get(`/agiles/${id}/sprints/${sprintId}`, {
      ...options,
      params: { ...params, ...options?.params },
    });
  };

  const postAgilesIdSprintsSprintId = <TData = AxiosResponse<Sprint>>(
    id: string,
    sprintId: string,
    sprint: NonReadonly<Sprint>,
    params?: PostAgilesIdSprintsSprintIdParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.post(`/agiles/${id}/sprints/${sprintId}`, sprint, {
      ...options,
      params: { ...params, ...options?.params },
    });
  };

  const deleteAgilesIdSprintsSprintId = <TData = AxiosResponse<void>>(
    id: string,
    sprintId: string,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.delete(`/agiles/${id}/sprints/${sprintId}`, options);
  };

  const getArticles = <TData = AxiosResponse<Article[]>>(
    params?: GetArticlesParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.get(`/articles`, {
      ...options,
      params: { ...params, ...options?.params },
    });
  };

  const postArticles = <TData = AxiosResponse<Article>>(
    article: NonReadonly<Article>,
    params?: PostArticlesParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.post(`/articles`, article, {
      ...options,
      params: { ...params, ...options?.params },
    });
  };

  const getArticlesId = <TData = AxiosResponse<Article>>(
    id: string,
    params?: GetArticlesIdParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.get(`/articles/${id}`, {
      ...options,
      params: { ...params, ...options?.params },
    });
  };

  const postArticlesId = <TData = AxiosResponse<Article>>(
    id: string,
    article: NonReadonly<Article>,
    params?: PostArticlesIdParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.post(`/articles/${id}`, article, {
      ...options,
      params: { ...params, ...options?.params },
    });
  };

  const deleteArticlesId = <TData = AxiosResponse<void>>(
    id: string,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.delete(`/articles/${id}`, options);
  };

  const getArticlesIdAttachments = <TData = AxiosResponse<ArticleAttachment[]>>(
    id: string,
    params?: GetArticlesIdAttachmentsParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.get(`/articles/${id}/attachments`, {
      ...options,
      params: { ...params, ...options?.params },
    });
  };

  const postArticlesIdAttachments = <TData = AxiosResponse<ArticleAttachment>>(
    id: string,
    articleAttachment: NonReadonly<ArticleAttachment>,
    params?: PostArticlesIdAttachmentsParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.post(
      `/articles/${id}/attachments`,
      articleAttachment,
      {
        ...options,
        params: { ...params, ...options?.params },
      },
    );
  };

  const getArticlesIdAttachmentsArticleAttachmentId = <
    TData = AxiosResponse<ArticleAttachment>,
  >(
    id: string,
    articleAttachmentId: string,
    params?: GetArticlesIdAttachmentsArticleAttachmentIdParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.get(
      `/articles/${id}/attachments/${articleAttachmentId}`,
      {
        ...options,
        params: { ...params, ...options?.params },
      },
    );
  };

  const postArticlesIdAttachmentsArticleAttachmentId = <
    TData = AxiosResponse<ArticleAttachment>,
  >(
    id: string,
    articleAttachmentId: string,
    articleAttachment: NonReadonly<ArticleAttachment>,
    params?: PostArticlesIdAttachmentsArticleAttachmentIdParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.post(
      `/articles/${id}/attachments/${articleAttachmentId}`,
      articleAttachment,
      {
        ...options,
        params: { ...params, ...options?.params },
      },
    );
  };

  const deleteArticlesIdAttachmentsArticleAttachmentId = <
    TData = AxiosResponse<void>,
  >(
    id: string,
    articleAttachmentId: string,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.delete(
      `/articles/${id}/attachments/${articleAttachmentId}`,
      options,
    );
  };

  const getArticlesIdChildArticles = <TData = AxiosResponse<Article[]>>(
    id: string,
    params?: GetArticlesIdChildArticlesParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.get(`/articles/${id}/childArticles`, {
      ...options,
      params: { ...params, ...options?.params },
    });
  };

  const postArticlesIdChildArticles = <TData = AxiosResponse<Article>>(
    id: string,
    article: NonReadonly<Article>,
    params?: PostArticlesIdChildArticlesParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.post(`/articles/${id}/childArticles`, article, {
      ...options,
      params: { ...params, ...options?.params },
    });
  };

  const getArticlesIdChildArticlesArticleId = <TData = AxiosResponse<Article>>(
    id: string,
    articleId: string,
    params?: GetArticlesIdChildArticlesArticleIdParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.get(`/articles/${id}/childArticles/${articleId}`, {
      ...options,
      params: { ...params, ...options?.params },
    });
  };

  const postArticlesIdChildArticlesArticleId = <TData = AxiosResponse<Article>>(
    id: string,
    articleId: string,
    article: NonReadonly<Article>,
    params?: PostArticlesIdChildArticlesArticleIdParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.post(
      `/articles/${id}/childArticles/${articleId}`,
      article,
      {
        ...options,
        params: { ...params, ...options?.params },
      },
    );
  };

  const deleteArticlesIdChildArticlesArticleId = <TData = AxiosResponse<void>>(
    id: string,
    articleId: string,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.delete(
      `/articles/${id}/childArticles/${articleId}`,
      options,
    );
  };

  const getArticlesIdComments = <TData = AxiosResponse<ArticleComment[]>>(
    id: string,
    params?: GetArticlesIdCommentsParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.get(`/articles/${id}/comments`, {
      ...options,
      params: { ...params, ...options?.params },
    });
  };

  const postArticlesIdComments = <TData = AxiosResponse<ArticleComment>>(
    id: string,
    articleComment: NonReadonly<ArticleComment>,
    params?: PostArticlesIdCommentsParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.post(`/articles/${id}/comments`, articleComment, {
      ...options,
      params: { ...params, ...options?.params },
    });
  };

  const getArticlesIdCommentsArticleCommentId = <
    TData = AxiosResponse<ArticleComment>,
  >(
    id: string,
    articleCommentId: string,
    params?: GetArticlesIdCommentsArticleCommentIdParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.get(`/articles/${id}/comments/${articleCommentId}`, {
      ...options,
      params: { ...params, ...options?.params },
    });
  };

  const postArticlesIdCommentsArticleCommentId = <
    TData = AxiosResponse<ArticleComment>,
  >(
    id: string,
    articleCommentId: string,
    articleComment: NonReadonly<ArticleComment>,
    params?: PostArticlesIdCommentsArticleCommentIdParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.post(
      `/articles/${id}/comments/${articleCommentId}`,
      articleComment,
      {
        ...options,
        params: { ...params, ...options?.params },
      },
    );
  };

  const deleteArticlesIdCommentsArticleCommentId = <
    TData = AxiosResponse<void>,
  >(
    id: string,
    articleCommentId: string,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.delete(
      `/articles/${id}/comments/${articleCommentId}`,
      options,
    );
  };

  const getArticlesIdCommentsArticleCommentIdReactions = <
    TData = AxiosResponse<Reaction[]>,
  >(
    id: string,
    articleCommentId: string,
    params?: GetArticlesIdCommentsArticleCommentIdReactionsParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.get(
      `/articles/${id}/comments/${articleCommentId}/reactions`,
      {
        ...options,
        params: { ...params, ...options?.params },
      },
    );
  };

  const postArticlesIdCommentsArticleCommentIdReactions = <
    TData = AxiosResponse<Reaction>,
  >(
    id: string,
    articleCommentId: string,
    reaction: NonReadonly<Reaction>,
    params?: PostArticlesIdCommentsArticleCommentIdReactionsParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.post(
      `/articles/${id}/comments/${articleCommentId}/reactions`,
      reaction,
      {
        ...options,
        params: { ...params, ...options?.params },
      },
    );
  };

  const getArticlesIdCommentsArticleCommentIdReactionsReactionId = <
    TData = AxiosResponse<Reaction>,
  >(
    id: string,
    articleCommentId: string,
    reactionId: string,
    params?: GetArticlesIdCommentsArticleCommentIdReactionsReactionIdParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.get(
      `/articles/${id}/comments/${articleCommentId}/reactions/${reactionId}`,
      {
        ...options,
        params: { ...params, ...options?.params },
      },
    );
  };

  const deleteArticlesIdCommentsArticleCommentIdReactionsReactionId = <
    TData = AxiosResponse<void>,
  >(
    id: string,
    articleCommentId: string,
    reactionId: string,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.delete(
      `/articles/${id}/comments/${articleCommentId}/reactions/${reactionId}`,
      options,
    );
  };

  const getArticlesIdParentArticle = <TData = AxiosResponse<Article>>(
    id: string,
    params?: GetArticlesIdParentArticleParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.get(`/articles/${id}/parentArticle`, {
      ...options,
      params: { ...params, ...options?.params },
    });
  };

  const getArticlesIdTags = <TData = AxiosResponse<Tag[]>>(
    id: string,
    params?: GetArticlesIdTagsParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.get(`/articles/${id}/tags`, {
      ...options,
      params: { ...params, ...options?.params },
    });
  };

  const postArticlesIdTags = <TData = AxiosResponse<Tag>>(
    id: string,
    tag: NonReadonly<Tag>,
    params?: PostArticlesIdTagsParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.post(`/articles/${id}/tags`, tag, {
      ...options,
      params: { ...params, ...options?.params },
    });
  };

  const getArticlesIdTagsTagId = <TData = AxiosResponse<Tag>>(
    id: string,
    tagId: string,
    params?: GetArticlesIdTagsTagIdParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.get(`/articles/${id}/tags/${tagId}`, {
      ...options,
      params: { ...params, ...options?.params },
    });
  };

  const deleteArticlesIdTagsTagId = <TData = AxiosResponse<void>>(
    id: string,
    tagId: string,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.delete(`/articles/${id}/tags/${tagId}`, options);
  };

  const postCommands = <TData = AxiosResponse<CommandList>>(
    commandList: NonReadonly<CommandList>,
    params?: PostCommandsParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.post(`/commands`, commandList, {
      ...options,
      params: { ...params, ...options?.params },
    });
  };

  const postCommandsAssist = <TData = AxiosResponse<CommandList>>(
    commandList: NonReadonly<CommandList>,
    params?: PostCommandsAssistParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.post(`/commands/assist`, commandList, {
      ...options,
      params: { ...params, ...options?.params },
    });
  };

  const getGroups = <TData = AxiosResponse<UserGroup[]>>(
    params?: GetGroupsParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.get(`/groups`, {
      ...options,
      params: { ...params, ...options?.params },
    });
  };

  const getGroupsId = <TData = AxiosResponse<UserGroup>>(
    id: string,
    params?: GetGroupsIdParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.get(`/groups/${id}`, {
      ...options,
      params: { ...params, ...options?.params },
    });
  };

  const getIssueLinkTypes = <TData = AxiosResponse<IssueLinkType[]>>(
    params?: GetIssueLinkTypesParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.get(`/issueLinkTypes`, {
      ...options,
      params: { ...params, ...options?.params },
    });
  };

  const postIssueLinkTypes = <TData = AxiosResponse<IssueLinkType>>(
    issueLinkType: NonReadonly<IssueLinkType>,
    params?: PostIssueLinkTypesParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.post(`/issueLinkTypes`, issueLinkType, {
      ...options,
      params: { ...params, ...options?.params },
    });
  };

  const getIssueLinkTypesId = <TData = AxiosResponse<IssueLinkType>>(
    id: string,
    params?: GetIssueLinkTypesIdParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.get(`/issueLinkTypes/${id}`, {
      ...options,
      params: { ...params, ...options?.params },
    });
  };

  const postIssueLinkTypesId = <TData = AxiosResponse<IssueLinkType>>(
    id: string,
    issueLinkType: NonReadonly<IssueLinkType>,
    params?: PostIssueLinkTypesIdParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.post(`/issueLinkTypes/${id}`, issueLinkType, {
      ...options,
      params: { ...params, ...options?.params },
    });
  };

  const deleteIssueLinkTypesId = <TData = AxiosResponse<void>>(
    id: string,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.delete(`/issueLinkTypes/${id}`, options);
  };

  const getIssues = <TData = AxiosResponse<Issue[]>>(
    params?: GetIssuesParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.get(`/issues`, {
      ...options,
      params: { ...params, ...options?.params },
    });
  };

  const postIssues = <TData = AxiosResponse<Issue>>(
    issue: NonReadonly<Issue>,
    params?: PostIssuesParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.post(`/issues`, issue, {
      ...options,
      params: { ...params, ...options?.params },
    });
  };

  const getIssuesId = <TData = AxiosResponse<Issue>>(
    id: string,
    params?: GetIssuesIdParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.get(`/issues/${id}`, {
      ...options,
      params: { ...params, ...options?.params },
    });
  };

  const postIssuesId = <TData = AxiosResponse<Issue>>(
    id: string,
    issue: NonReadonly<Issue>,
    params?: PostIssuesIdParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.post(`/issues/${id}`, issue, {
      ...options,
      params: { ...params, ...options?.params },
    });
  };

  const deleteIssuesId = <TData = AxiosResponse<void>>(
    id: string,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.delete(`/issues/${id}`, options);
  };

  const getIssuesIdActivities = <TData = AxiosResponse<ActivityItem[]>>(
    id: string,
    params?: GetIssuesIdActivitiesParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.get(`/issues/${id}/activities`, {
      ...options,
      params: { ...params, ...options?.params },
    });
  };

  const getIssuesIdActivitiesActivityItemId = <
    TData = AxiosResponse<ActivityItem>,
  >(
    id: string,
    activityItemId: string,
    params?: GetIssuesIdActivitiesActivityItemIdParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.get(`/issues/${id}/activities/${activityItemId}`, {
      ...options,
      params: { ...params, ...options?.params },
    });
  };

  const getIssuesIdActivitiesPage = <TData = AxiosResponse<ActivityCursorPage>>(
    id: string,
    params?: GetIssuesIdActivitiesPageParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.get(`/issues/${id}/activitiesPage`, {
      ...options,
      params: { ...params, ...options?.params },
    });
  };

  const getIssuesIdAttachments = <TData = AxiosResponse<IssueAttachment[]>>(
    id: string,
    params?: GetIssuesIdAttachmentsParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.get(`/issues/${id}/attachments`, {
      ...options,
      params: { ...params, ...options?.params },
    });
  };

  const postIssuesIdAttachments = <TData = AxiosResponse<IssueAttachment[]>>(
    id: string,
    postIssuesIdAttachmentsBody: PostIssuesIdAttachmentsBody,
    params?: PostIssuesIdAttachmentsParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    const formData = new FormData();
    if (postIssuesIdAttachmentsBody["files[0]"] !== undefined) {
      formData.append("files[0]", postIssuesIdAttachmentsBody["files[0]"]);
    }

    return axios.default.post(`/issues/${id}/attachments`, formData, {
      ...options,
      params: { ...params, ...options?.params },
    });
  };

  const getIssuesIdAttachmentsIssueAttachmentId = <
    TData = AxiosResponse<IssueAttachment>,
  >(
    id: string,
    issueAttachmentId: string,
    params?: GetIssuesIdAttachmentsIssueAttachmentIdParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.get(`/issues/${id}/attachments/${issueAttachmentId}`, {
      ...options,
      params: { ...params, ...options?.params },
    });
  };

  const postIssuesIdAttachmentsIssueAttachmentId = <
    TData = AxiosResponse<IssueAttachment>,
  >(
    id: string,
    issueAttachmentId: string,
    issueAttachment: NonReadonly<IssueAttachment>,
    params?: PostIssuesIdAttachmentsIssueAttachmentIdParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.post(
      `/issues/${id}/attachments/${issueAttachmentId}`,
      issueAttachment,
      {
        ...options,
        params: { ...params, ...options?.params },
      },
    );
  };

  const deleteIssuesIdAttachmentsIssueAttachmentId = <
    TData = AxiosResponse<void>,
  >(
    id: string,
    issueAttachmentId: string,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.delete(
      `/issues/${id}/attachments/${issueAttachmentId}`,
      options,
    );
  };

  const getIssuesIdComments = <TData = AxiosResponse<IssueComment[]>>(
    id: string,
    params?: GetIssuesIdCommentsParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.get(`/issues/${id}/comments`, {
      ...options,
      params: { ...params, ...options?.params },
    });
  };

  const postIssuesIdComments = <TData = AxiosResponse<IssueComment>>(
    id: string,
    issueComment: NonReadonly<IssueComment>,
    params?: PostIssuesIdCommentsParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.post(`/issues/${id}/comments`, issueComment, {
      ...options,
      params: { ...params, ...options?.params },
    });
  };

  const getIssuesIdCommentsIssueCommentId = <
    TData = AxiosResponse<IssueComment>,
  >(
    id: string,
    issueCommentId: string,
    params?: GetIssuesIdCommentsIssueCommentIdParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.get(`/issues/${id}/comments/${issueCommentId}`, {
      ...options,
      params: { ...params, ...options?.params },
    });
  };

  const postIssuesIdCommentsIssueCommentId = <
    TData = AxiosResponse<IssueComment>,
  >(
    id: string,
    issueCommentId: string,
    issueComment: NonReadonly<IssueComment>,
    params?: PostIssuesIdCommentsIssueCommentIdParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.post(
      `/issues/${id}/comments/${issueCommentId}`,
      issueComment,
      {
        ...options,
        params: { ...params, ...options?.params },
      },
    );
  };

  const deleteIssuesIdCommentsIssueCommentId = <TData = AxiosResponse<void>>(
    id: string,
    issueCommentId: string,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.delete(
      `/issues/${id}/comments/${issueCommentId}`,
      options,
    );
  };

  const getIssuesIdCommentsIssueCommentIdReactions = <
    TData = AxiosResponse<Reaction[]>,
  >(
    id: string,
    issueCommentId: string,
    params?: GetIssuesIdCommentsIssueCommentIdReactionsParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.get(
      `/issues/${id}/comments/${issueCommentId}/reactions`,
      {
        ...options,
        params: { ...params, ...options?.params },
      },
    );
  };

  const postIssuesIdCommentsIssueCommentIdReactions = <
    TData = AxiosResponse<Reaction>,
  >(
    id: string,
    issueCommentId: string,
    reaction: NonReadonly<Reaction>,
    params?: PostIssuesIdCommentsIssueCommentIdReactionsParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.post(
      `/issues/${id}/comments/${issueCommentId}/reactions`,
      reaction,
      {
        ...options,
        params: { ...params, ...options?.params },
      },
    );
  };

  const getIssuesIdCommentsIssueCommentIdReactionsReactionId = <
    TData = AxiosResponse<Reaction>,
  >(
    id: string,
    issueCommentId: string,
    reactionId: string,
    params?: GetIssuesIdCommentsIssueCommentIdReactionsReactionIdParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.get(
      `/issues/${id}/comments/${issueCommentId}/reactions/${reactionId}`,
      {
        ...options,
        params: { ...params, ...options?.params },
      },
    );
  };

  const deleteIssuesIdCommentsIssueCommentIdReactionsReactionId = <
    TData = AxiosResponse<void>,
  >(
    id: string,
    issueCommentId: string,
    reactionId: string,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.delete(
      `/issues/${id}/comments/${issueCommentId}/reactions/${reactionId}`,
      options,
    );
  };

  const getIssuesIdCustomFields = <TData = AxiosResponse<IssueCustomField[]>>(
    id: string,
    params?: GetIssuesIdCustomFieldsParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.get(`/issues/${id}/customFields`, {
      ...options,
      params: { ...params, ...options?.params },
    });
  };

  const getIssuesIdCustomFieldsIssueCustomFieldId = <
    TData = AxiosResponse<IssueCustomField>,
  >(
    id: string,
    issueCustomFieldId: string,
    params?: GetIssuesIdCustomFieldsIssueCustomFieldIdParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.get(
      `/issues/${id}/customFields/${issueCustomFieldId}`,
      {
        ...options,
        params: { ...params, ...options?.params },
      },
    );
  };

  const postIssuesIdCustomFieldsIssueCustomFieldId = <
    TData = AxiosResponse<IssueCustomField>,
  >(
    id: string,
    issueCustomFieldId: string,
    issueCustomField: NonReadonly<IssueCustomField>,
    params?: PostIssuesIdCustomFieldsIssueCustomFieldIdParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.post(
      `/issues/${id}/customFields/${issueCustomFieldId}`,
      issueCustomField,
      {
        ...options,
        params: { ...params, ...options?.params },
      },
    );
  };

  const getIssuesIdLinks = <TData = AxiosResponse<IssueLink[]>>(
    id: string,
    params?: GetIssuesIdLinksParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.get(`/issues/${id}/links`, {
      ...options,
      params: { ...params, ...options?.params },
    });
  };

  const getIssuesIdLinksIssueLinkId = <TData = AxiosResponse<IssueLink>>(
    id: string,
    issueLinkId: string,
    params?: GetIssuesIdLinksIssueLinkIdParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.get(`/issues/${id}/links/${issueLinkId}`, {
      ...options,
      params: { ...params, ...options?.params },
    });
  };

  const getIssuesIdLinksIssueLinkIdIssues = <TData = AxiosResponse<Issue[]>>(
    id: string,
    issueLinkId: string,
    params?: GetIssuesIdLinksIssueLinkIdIssuesParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.get(`/issues/${id}/links/${issueLinkId}/issues`, {
      ...options,
      params: { ...params, ...options?.params },
    });
  };

  const postIssuesIdLinksIssueLinkIdIssues = <TData = AxiosResponse<Issue>>(
    id: string,
    issueLinkId: string,
    issue: NonReadonly<Issue>,
    params?: PostIssuesIdLinksIssueLinkIdIssuesParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.post(
      `/issues/${id}/links/${issueLinkId}/issues`,
      issue,
      {
        ...options,
        params: { ...params, ...options?.params },
      },
    );
  };

  const deleteIssuesIdLinksIssueLinkIdIssuesIssueId = <
    TData = AxiosResponse<void>,
  >(
    id: string,
    issueLinkId: string,
    issueId: string,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.delete(
      `/issues/${id}/links/${issueLinkId}/issues/${issueId}`,
      options,
    );
  };

  const getIssuesIdProject = <TData = AxiosResponse<Project>>(
    id: string,
    params?: GetIssuesIdProjectParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.get(`/issues/${id}/project`, {
      ...options,
      params: { ...params, ...options?.params },
    });
  };

  const postIssuesIdProject = <TData = AxiosResponse<Project>>(
    id: string,
    project: NonReadonly<Project>,
    params?: PostIssuesIdProjectParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.post(`/issues/${id}/project`, project, {
      ...options,
      params: { ...params, ...options?.params },
    });
  };

  const getIssuesIdSprints = <TData = AxiosResponse<Sprint[]>>(
    id: string,
    params?: GetIssuesIdSprintsParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.get(`/issues/${id}/sprints`, {
      ...options,
      params: { ...params, ...options?.params },
    });
  };

  const getIssuesIdTags = <TData = AxiosResponse<Tag[]>>(
    id: string,
    params?: GetIssuesIdTagsParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.get(`/issues/${id}/tags`, {
      ...options,
      params: { ...params, ...options?.params },
    });
  };

  const postIssuesIdTags = <TData = AxiosResponse<Tag>>(
    id: string,
    tag: NonReadonly<Tag>,
    params?: PostIssuesIdTagsParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.post(`/issues/${id}/tags`, tag, {
      ...options,
      params: { ...params, ...options?.params },
    });
  };

  const getIssuesIdTagsTagId = <TData = AxiosResponse<Tag>>(
    id: string,
    tagId: string,
    params?: GetIssuesIdTagsTagIdParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.get(`/issues/${id}/tags/${tagId}`, {
      ...options,
      params: { ...params, ...options?.params },
    });
  };

  const deleteIssuesIdTagsTagId = <TData = AxiosResponse<void>>(
    id: string,
    tagId: string,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.delete(`/issues/${id}/tags/${tagId}`, options);
  };

  const getIssuesIdTimeTracking = <TData = AxiosResponse<IssueTimeTracker>>(
    id: string,
    params?: GetIssuesIdTimeTrackingParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.get(`/issues/${id}/timeTracking`, {
      ...options,
      params: { ...params, ...options?.params },
    });
  };

  const getIssuesIdTimeTrackingWorkItems = <
    TData = AxiosResponse<IssueWorkItem[]>,
  >(
    id: string,
    params?: GetIssuesIdTimeTrackingWorkItemsParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.get(`/issues/${id}/timeTracking/workItems`, {
      ...options,
      params: { ...params, ...options?.params },
    });
  };

  const postIssuesIdTimeTrackingWorkItems = <
    TData = AxiosResponse<IssueWorkItem>,
  >(
    id: string,
    issueWorkItem: NonReadonly<IssueWorkItem>,
    params?: PostIssuesIdTimeTrackingWorkItemsParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.post(
      `/issues/${id}/timeTracking/workItems`,
      issueWorkItem,
      {
        ...options,
        params: { ...params, ...options?.params },
      },
    );
  };

  const getIssuesIdTimeTrackingWorkItemsIssueWorkItemId = <
    TData = AxiosResponse<IssueWorkItem>,
  >(
    id: string,
    issueWorkItemId: string,
    params?: GetIssuesIdTimeTrackingWorkItemsIssueWorkItemIdParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.get(
      `/issues/${id}/timeTracking/workItems/${issueWorkItemId}`,
      {
        ...options,
        params: { ...params, ...options?.params },
      },
    );
  };

  const postIssuesIdTimeTrackingWorkItemsIssueWorkItemId = <
    TData = AxiosResponse<IssueWorkItem>,
  >(
    id: string,
    issueWorkItemId: string,
    issueWorkItem: NonReadonly<IssueWorkItem>,
    params?: PostIssuesIdTimeTrackingWorkItemsIssueWorkItemIdParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.post(
      `/issues/${id}/timeTracking/workItems/${issueWorkItemId}`,
      issueWorkItem,
      {
        ...options,
        params: { ...params, ...options?.params },
      },
    );
  };

  const deleteIssuesIdTimeTrackingWorkItemsIssueWorkItemId = <
    TData = AxiosResponse<void>,
  >(
    id: string,
    issueWorkItemId: string,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.delete(
      `/issues/${id}/timeTracking/workItems/${issueWorkItemId}`,
      options,
    );
  };

  const getIssuesIdVcsChanges = <TData = AxiosResponse<VcsChange[]>>(
    id: string,
    params?: GetIssuesIdVcsChangesParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.get(`/issues/${id}/vcsChanges`, {
      ...options,
      params: { ...params, ...options?.params },
    });
  };

  const postIssuesIdVcsChanges = <TData = AxiosResponse<VcsChange>>(
    id: string,
    vcsChange: NonReadonly<VcsChange>,
    params?: PostIssuesIdVcsChangesParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.post(`/issues/${id}/vcsChanges`, vcsChange, {
      ...options,
      params: { ...params, ...options?.params },
    });
  };

  const getIssuesIdVcsChangesVcsChangeId = <TData = AxiosResponse<VcsChange>>(
    id: string,
    vcsChangeId: string,
    params?: GetIssuesIdVcsChangesVcsChangeIdParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.get(`/issues/${id}/vcsChanges/${vcsChangeId}`, {
      ...options,
      params: { ...params, ...options?.params },
    });
  };

  const postIssuesIdVcsChangesVcsChangeId = <TData = AxiosResponse<VcsChange>>(
    id: string,
    vcsChangeId: string,
    vcsChange: NonReadonly<VcsChange>,
    params?: PostIssuesIdVcsChangesVcsChangeIdParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.post(
      `/issues/${id}/vcsChanges/${vcsChangeId}`,
      vcsChange,
      {
        ...options,
        params: { ...params, ...options?.params },
      },
    );
  };

  const deleteIssuesIdVcsChangesVcsChangeId = <TData = AxiosResponse<void>>(
    id: string,
    vcsChangeId: string,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.delete(
      `/issues/${id}/vcsChanges/${vcsChangeId}`,
      options,
    );
  };

  const postIssuesGetterCount = <TData = AxiosResponse<IssueCountResponse>>(
    issueCountResponse: NonReadonly<IssueCountResponse>,
    params?: PostIssuesGetterCountParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.post(`/issuesGetter/count`, issueCountResponse, {
      ...options,
      params: { ...params, ...options?.params },
    });
  };

  const getSavedQueries = <TData = AxiosResponse<SavedQuery[]>>(
    params?: GetSavedQueriesParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.get(`/savedQueries`, {
      ...options,
      params: { ...params, ...options?.params },
    });
  };

  const postSavedQueries = <TData = AxiosResponse<SavedQuery>>(
    savedQuery: NonReadonly<SavedQuery>,
    params?: PostSavedQueriesParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.post(`/savedQueries`, savedQuery, {
      ...options,
      params: { ...params, ...options?.params },
    });
  };

  const getSavedQueriesId = <TData = AxiosResponse<SavedQuery>>(
    id: string,
    params?: GetSavedQueriesIdParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.get(`/savedQueries/${id}`, {
      ...options,
      params: { ...params, ...options?.params },
    });
  };

  const postSavedQueriesId = <TData = AxiosResponse<SavedQuery>>(
    id: string,
    savedQuery: NonReadonly<SavedQuery>,
    params?: PostSavedQueriesIdParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.post(`/savedQueries/${id}`, savedQuery, {
      ...options,
      params: { ...params, ...options?.params },
    });
  };

  const deleteSavedQueriesId = <TData = AxiosResponse<void>>(
    id: string,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.delete(`/savedQueries/${id}`, options);
  };

  const postSearchAssist = <TData = AxiosResponse<SearchSuggestions>>(
    searchSuggestions: NonReadonly<SearchSuggestions>,
    params?: PostSearchAssistParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.post(`/search/assist`, searchSuggestions, {
      ...options,
      params: { ...params, ...options?.params },
    });
  };

  const getTags = <TData = AxiosResponse<Tag[]>>(
    params?: GetTagsParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.get(`/tags`, {
      ...options,
      params: { ...params, ...options?.params },
    });
  };

  const postTags = <TData = AxiosResponse<Tag>>(
    tag: NonReadonly<Tag>,
    params?: PostTagsParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.post(`/tags`, tag, {
      ...options,
      params: { ...params, ...options?.params },
    });
  };

  const getTagsId = <TData = AxiosResponse<Tag>>(
    id: string,
    params?: GetTagsIdParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.get(`/tags/${id}`, {
      ...options,
      params: { ...params, ...options?.params },
    });
  };

  const postTagsId = <TData = AxiosResponse<Tag>>(
    id: string,
    tag: NonReadonly<Tag>,
    params?: PostTagsIdParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.post(`/tags/${id}`, tag, {
      ...options,
      params: { ...params, ...options?.params },
    });
  };

  const deleteTagsId = <TData = AxiosResponse<void>>(
    id: string,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.delete(`/tags/${id}`, options);
  };

  const getTagsIdIssues = <TData = AxiosResponse<Issue[]>>(
    id: string,
    params?: GetTagsIdIssuesParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.get(`/tags/${id}/issues`, {
      ...options,
      params: { ...params, ...options?.params },
    });
  };

  const getUsers = <TData = AxiosResponse<User[]>>(
    params?: GetUsersParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.get(`/users`, {
      ...options,
      params: { ...params, ...options?.params },
    });
  };

  const getUsersId = <TData = AxiosResponse<User>>(
    id: string,
    params?: GetUsersIdParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.get(`/users/${id}`, {
      ...options,
      params: { ...params, ...options?.params },
    });
  };

  const getUsersIdProfilesGeneral = <TData = AxiosResponse<GeneralUserProfile>>(
    id: string,
    params?: GetUsersIdProfilesGeneralParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.get(`/users/${id}/profiles/general`, {
      ...options,
      params: { ...params, ...options?.params },
    });
  };

  const postUsersIdProfilesGeneral = <
    TData = AxiosResponse<GeneralUserProfile>,
  >(
    id: string,
    generalUserProfile: NonReadonly<GeneralUserProfile>,
    params?: PostUsersIdProfilesGeneralParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.post(
      `/users/${id}/profiles/general`,
      generalUserProfile,
      {
        ...options,
        params: { ...params, ...options?.params },
      },
    );
  };

  const getUsersIdProfilesNotifications = <
    TData = AxiosResponse<NotificationsUserProfile>,
  >(
    id: string,
    params?: GetUsersIdProfilesNotificationsParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.get(`/users/${id}/profiles/notifications`, {
      ...options,
      params: { ...params, ...options?.params },
    });
  };

  const postUsersIdProfilesNotifications = <
    TData = AxiosResponse<NotificationsUserProfile>,
  >(
    id: string,
    notificationsUserProfile: NonReadonly<NotificationsUserProfile>,
    params?: PostUsersIdProfilesNotificationsParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.post(
      `/users/${id}/profiles/notifications`,
      notificationsUserProfile,
      {
        ...options,
        params: { ...params, ...options?.params },
      },
    );
  };

  const getUsersIdProfilesTimetracking = <
    TData = AxiosResponse<TimeTrackingUserProfile>,
  >(
    id: string,
    params?: GetUsersIdProfilesTimetrackingParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.get(`/users/${id}/profiles/timetracking`, {
      ...options,
      params: { ...params, ...options?.params },
    });
  };

  const postUsersIdProfilesTimetracking = <
    TData = AxiosResponse<TimeTrackingUserProfile>,
  >(
    id: string,
    timeTrackingUserProfile: NonReadonly<TimeTrackingUserProfile>,
    params?: PostUsersIdProfilesTimetrackingParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.post(
      `/users/${id}/profiles/timetracking`,
      timeTrackingUserProfile,
      {
        ...options,
        params: { ...params, ...options?.params },
      },
    );
  };

  const getUsersIdSavedQueries = <TData = AxiosResponse<SavedQuery[]>>(
    id: string,
    params?: GetUsersIdSavedQueriesParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.get(`/users/${id}/savedQueries`, {
      ...options,
      params: { ...params, ...options?.params },
    });
  };

  const getUsersIdTags = <TData = AxiosResponse<Tag[]>>(
    id: string,
    params?: GetUsersIdTagsParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.get(`/users/${id}/tags`, {
      ...options,
      params: { ...params, ...options?.params },
    });
  };

  const getUsersMe = <TData = AxiosResponse<Me>>(
    params?: GetUsersMeParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.get(`/users/me`, {
      ...options,
      params: { ...params, ...options?.params },
    });
  };

  const getWorkItems = <TData = AxiosResponse<IssueWorkItem[]>>(
    params?: GetWorkItemsParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.get(`/workItems`, {
      ...options,
      params: { ...params, ...options?.params },
    });
  };

  const getWorkItemsId = <TData = AxiosResponse<IssueWorkItem>>(
    id: string,
    params?: GetWorkItemsIdParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.get(`/workItems/${id}`, {
      ...options,
      params: { ...params, ...options?.params },
    });
  };

  return {
    getActivities,
    getActivitiesId,
    getActivitiesPage,
    getAdminCustomFieldSettingsBundlesBuild,
    postAdminCustomFieldSettingsBundlesBuild,
    getAdminCustomFieldSettingsBundlesBuildId,
    postAdminCustomFieldSettingsBundlesBuildId,
    deleteAdminCustomFieldSettingsBundlesBuildId,
    getAdminCustomFieldSettingsBundlesBuildIdValues,
    postAdminCustomFieldSettingsBundlesBuildIdValues,
    getAdminCustomFieldSettingsBundlesBuildIdValuesBuildBundleElementId,
    postAdminCustomFieldSettingsBundlesBuildIdValuesBuildBundleElementId,
    deleteAdminCustomFieldSettingsBundlesBuildIdValuesBuildBundleElementId,
    getAdminCustomFieldSettingsBundlesEnum,
    postAdminCustomFieldSettingsBundlesEnum,
    getAdminCustomFieldSettingsBundlesEnumId,
    postAdminCustomFieldSettingsBundlesEnumId,
    deleteAdminCustomFieldSettingsBundlesEnumId,
    getAdminCustomFieldSettingsBundlesEnumIdValues,
    postAdminCustomFieldSettingsBundlesEnumIdValues,
    getAdminCustomFieldSettingsBundlesEnumIdValuesEnumBundleElementId,
    postAdminCustomFieldSettingsBundlesEnumIdValuesEnumBundleElementId,
    deleteAdminCustomFieldSettingsBundlesEnumIdValuesEnumBundleElementId,
    getAdminCustomFieldSettingsBundlesOwnedField,
    postAdminCustomFieldSettingsBundlesOwnedField,
    getAdminCustomFieldSettingsBundlesOwnedFieldId,
    postAdminCustomFieldSettingsBundlesOwnedFieldId,
    deleteAdminCustomFieldSettingsBundlesOwnedFieldId,
    getAdminCustomFieldSettingsBundlesOwnedFieldIdValues,
    postAdminCustomFieldSettingsBundlesOwnedFieldIdValues,
    getAdminCustomFieldSettingsBundlesOwnedFieldIdValuesOwnedBundleElementId,
    postAdminCustomFieldSettingsBundlesOwnedFieldIdValuesOwnedBundleElementId,
    deleteAdminCustomFieldSettingsBundlesOwnedFieldIdValuesOwnedBundleElementId,
    getAdminCustomFieldSettingsBundlesState,
    postAdminCustomFieldSettingsBundlesState,
    getAdminCustomFieldSettingsBundlesStateId,
    postAdminCustomFieldSettingsBundlesStateId,
    deleteAdminCustomFieldSettingsBundlesStateId,
    getAdminCustomFieldSettingsBundlesStateIdValues,
    postAdminCustomFieldSettingsBundlesStateIdValues,
    getAdminCustomFieldSettingsBundlesStateIdValuesStateBundleElementId,
    postAdminCustomFieldSettingsBundlesStateIdValuesStateBundleElementId,
    deleteAdminCustomFieldSettingsBundlesStateIdValuesStateBundleElementId,
    getAdminCustomFieldSettingsBundlesUser,
    postAdminCustomFieldSettingsBundlesUser,
    getAdminCustomFieldSettingsBundlesUserId,
    postAdminCustomFieldSettingsBundlesUserId,
    deleteAdminCustomFieldSettingsBundlesUserId,
    getAdminCustomFieldSettingsBundlesUserIdAggregatedUsers,
    getAdminCustomFieldSettingsBundlesUserIdGroups,
    postAdminCustomFieldSettingsBundlesUserIdGroups,
    getAdminCustomFieldSettingsBundlesUserIdGroupsUserGroupId,
    deleteAdminCustomFieldSettingsBundlesUserIdGroupsUserGroupId,
    getAdminCustomFieldSettingsBundlesUserIdIndividuals,
    postAdminCustomFieldSettingsBundlesUserIdIndividuals,
    getAdminCustomFieldSettingsBundlesUserIdIndividualsUserId,
    deleteAdminCustomFieldSettingsBundlesUserIdIndividualsUserId,
    getAdminCustomFieldSettingsBundlesVersion,
    postAdminCustomFieldSettingsBundlesVersion,
    getAdminCustomFieldSettingsBundlesVersionId,
    postAdminCustomFieldSettingsBundlesVersionId,
    deleteAdminCustomFieldSettingsBundlesVersionId,
    getAdminCustomFieldSettingsBundlesVersionIdValues,
    postAdminCustomFieldSettingsBundlesVersionIdValues,
    getAdminCustomFieldSettingsBundlesVersionIdValuesVersionBundleElementId,
    postAdminCustomFieldSettingsBundlesVersionIdValuesVersionBundleElementId,
    deleteAdminCustomFieldSettingsBundlesVersionIdValuesVersionBundleElementId,
    getAdminCustomFieldSettingsCustomFields,
    postAdminCustomFieldSettingsCustomFields,
    getAdminCustomFieldSettingsCustomFieldsId,
    postAdminCustomFieldSettingsCustomFieldsId,
    deleteAdminCustomFieldSettingsCustomFieldsId,
    getAdminCustomFieldSettingsCustomFieldsIdFieldDefaults,
    postAdminCustomFieldSettingsCustomFieldsIdFieldDefaults,
    getAdminCustomFieldSettingsCustomFieldsIdInstances,
    getAdminCustomFieldSettingsTypes,
    getAdminDatabaseBackupBackups,
    getAdminDatabaseBackupBackupsId,
    getAdminDatabaseBackupSettings,
    postAdminDatabaseBackupSettings,
    getAdminDatabaseBackupSettingsBackupStatus,
    getAdminGlobalSettings,
    postAdminGlobalSettings,
    getAdminGlobalSettingsAppearanceSettings,
    postAdminGlobalSettingsAppearanceSettings,
    getAdminGlobalSettingsLicense,
    postAdminGlobalSettingsLicense,
    getAdminGlobalSettingsLocaleSettings,
    postAdminGlobalSettingsLocaleSettings,
    getAdminGlobalSettingsNotificationSettings,
    postAdminGlobalSettingsNotificationSettings,
    getAdminGlobalSettingsRestSettings,
    postAdminGlobalSettingsRestSettings,
    getAdminGlobalSettingsSystemSettings,
    postAdminGlobalSettingsSystemSettings,
    getAdminProjects,
    postAdminProjects,
    getAdminProjectsId,
    postAdminProjectsId,
    deleteAdminProjectsId,
    getAdminProjectsIdArticles,
    getAdminProjectsIdCustomFields,
    postAdminProjectsIdCustomFields,
    getAdminProjectsIdCustomFieldsProjectCustomFieldId,
    postAdminProjectsIdCustomFieldsProjectCustomFieldId,
    deleteAdminProjectsIdCustomFieldsProjectCustomFieldId,
    getAdminProjectsIdIssues,
    postAdminProjectsIdIssues,
    getAdminProjectsIdIssuesIssueId,
    postAdminProjectsIdIssuesIssueId,
    deleteAdminProjectsIdIssuesIssueId,
    getAdminProjectsIdTimeTrackingSettings,
    postAdminProjectsIdTimeTrackingSettings,
    getAdminProjectsIdTimeTrackingSettingsWorkItemTypes,
    postAdminProjectsIdTimeTrackingSettingsWorkItemTypes,
    getAdminProjectsIdTimeTrackingSettingsWorkItemTypesWorkItemTypeId,
    deleteAdminProjectsIdTimeTrackingSettingsWorkItemTypesWorkItemTypeId,
    getAdminTelemetry,
    getAdminTimeTrackingSettings,
    getAdminTimeTrackingSettingsWorkItemTypes,
    postAdminTimeTrackingSettingsWorkItemTypes,
    getAdminTimeTrackingSettingsWorkItemTypesWorkItemTypeId,
    postAdminTimeTrackingSettingsWorkItemTypesWorkItemTypeId,
    deleteAdminTimeTrackingSettingsWorkItemTypesWorkItemTypeId,
    getAdminTimeTrackingSettingsWorkTimeSettings,
    postAdminTimeTrackingSettingsWorkTimeSettings,
    getAgiles,
    postAgiles,
    getAgilesId,
    postAgilesId,
    deleteAgilesId,
    getAgilesIdSprints,
    postAgilesIdSprints,
    getAgilesIdSprintsSprintId,
    postAgilesIdSprintsSprintId,
    deleteAgilesIdSprintsSprintId,
    getArticles,
    postArticles,
    getArticlesId,
    postArticlesId,
    deleteArticlesId,
    getArticlesIdAttachments,
    postArticlesIdAttachments,
    getArticlesIdAttachmentsArticleAttachmentId,
    postArticlesIdAttachmentsArticleAttachmentId,
    deleteArticlesIdAttachmentsArticleAttachmentId,
    getArticlesIdChildArticles,
    postArticlesIdChildArticles,
    getArticlesIdChildArticlesArticleId,
    postArticlesIdChildArticlesArticleId,
    deleteArticlesIdChildArticlesArticleId,
    getArticlesIdComments,
    postArticlesIdComments,
    getArticlesIdCommentsArticleCommentId,
    postArticlesIdCommentsArticleCommentId,
    deleteArticlesIdCommentsArticleCommentId,
    getArticlesIdCommentsArticleCommentIdReactions,
    postArticlesIdCommentsArticleCommentIdReactions,
    getArticlesIdCommentsArticleCommentIdReactionsReactionId,
    deleteArticlesIdCommentsArticleCommentIdReactionsReactionId,
    getArticlesIdParentArticle,
    getArticlesIdTags,
    postArticlesIdTags,
    getArticlesIdTagsTagId,
    deleteArticlesIdTagsTagId,
    postCommands,
    postCommandsAssist,
    getGroups,
    getGroupsId,
    getIssueLinkTypes,
    postIssueLinkTypes,
    getIssueLinkTypesId,
    postIssueLinkTypesId,
    deleteIssueLinkTypesId,
    getIssues,
    postIssues,
    getIssuesId,
    postIssuesId,
    deleteIssuesId,
    getIssuesIdActivities,
    getIssuesIdActivitiesActivityItemId,
    getIssuesIdActivitiesPage,
    getIssuesIdAttachments,
    postIssuesIdAttachments,
    getIssuesIdAttachmentsIssueAttachmentId,
    postIssuesIdAttachmentsIssueAttachmentId,
    deleteIssuesIdAttachmentsIssueAttachmentId,
    getIssuesIdComments,
    postIssuesIdComments,
    getIssuesIdCommentsIssueCommentId,
    postIssuesIdCommentsIssueCommentId,
    deleteIssuesIdCommentsIssueCommentId,
    getIssuesIdCommentsIssueCommentIdReactions,
    postIssuesIdCommentsIssueCommentIdReactions,
    getIssuesIdCommentsIssueCommentIdReactionsReactionId,
    deleteIssuesIdCommentsIssueCommentIdReactionsReactionId,
    getIssuesIdCustomFields,
    getIssuesIdCustomFieldsIssueCustomFieldId,
    postIssuesIdCustomFieldsIssueCustomFieldId,
    getIssuesIdLinks,
    getIssuesIdLinksIssueLinkId,
    getIssuesIdLinksIssueLinkIdIssues,
    postIssuesIdLinksIssueLinkIdIssues,
    deleteIssuesIdLinksIssueLinkIdIssuesIssueId,
    getIssuesIdProject,
    postIssuesIdProject,
    getIssuesIdSprints,
    getIssuesIdTags,
    postIssuesIdTags,
    getIssuesIdTagsTagId,
    deleteIssuesIdTagsTagId,
    getIssuesIdTimeTracking,
    getIssuesIdTimeTrackingWorkItems,
    postIssuesIdTimeTrackingWorkItems,
    getIssuesIdTimeTrackingWorkItemsIssueWorkItemId,
    postIssuesIdTimeTrackingWorkItemsIssueWorkItemId,
    deleteIssuesIdTimeTrackingWorkItemsIssueWorkItemId,
    getIssuesIdVcsChanges,
    postIssuesIdVcsChanges,
    getIssuesIdVcsChangesVcsChangeId,
    postIssuesIdVcsChangesVcsChangeId,
    deleteIssuesIdVcsChangesVcsChangeId,
    postIssuesGetterCount,
    getSavedQueries,
    postSavedQueries,
    getSavedQueriesId,
    postSavedQueriesId,
    deleteSavedQueriesId,
    postSearchAssist,
    getTags,
    postTags,
    getTagsId,
    postTagsId,
    deleteTagsId,
    getTagsIdIssues,
    getUsers,
    getUsersId,
    getUsersIdProfilesGeneral,
    postUsersIdProfilesGeneral,
    getUsersIdProfilesNotifications,
    postUsersIdProfilesNotifications,
    getUsersIdProfilesTimetracking,
    postUsersIdProfilesTimetracking,
    getUsersIdSavedQueries,
    getUsersIdTags,
    getUsersMe,
    getWorkItems,
    getWorkItemsId,
  };
};
export type GetActivitiesResult = AxiosResponse<ActivityItem[]>;
export type GetActivitiesIdResult = AxiosResponse<ActivityItem>;
export type GetActivitiesPageResult = AxiosResponse<ActivityCursorPage>;
export type GetAdminCustomFieldSettingsBundlesBuildResult = AxiosResponse<
  BuildBundle[]
>;
export type PostAdminCustomFieldSettingsBundlesBuildResult =
  AxiosResponse<BuildBundle>;
export type GetAdminCustomFieldSettingsBundlesBuildIdResult =
  AxiosResponse<BuildBundle>;
export type PostAdminCustomFieldSettingsBundlesBuildIdResult =
  AxiosResponse<BuildBundle>;
export type DeleteAdminCustomFieldSettingsBundlesBuildIdResult =
  AxiosResponse<void>;
export type GetAdminCustomFieldSettingsBundlesBuildIdValuesResult =
  AxiosResponse<BuildBundleElement[]>;
export type PostAdminCustomFieldSettingsBundlesBuildIdValuesResult =
  AxiosResponse<BuildBundleElement>;
export type GetAdminCustomFieldSettingsBundlesBuildIdValuesBuildBundleElementIdResult =
  AxiosResponse<BuildBundleElement>;
export type PostAdminCustomFieldSettingsBundlesBuildIdValuesBuildBundleElementIdResult =
  AxiosResponse<BuildBundleElement>;
export type DeleteAdminCustomFieldSettingsBundlesBuildIdValuesBuildBundleElementIdResult =
  AxiosResponse<void>;
export type GetAdminCustomFieldSettingsBundlesEnumResult = AxiosResponse<
  EnumBundle[]
>;
export type PostAdminCustomFieldSettingsBundlesEnumResult =
  AxiosResponse<EnumBundle>;
export type GetAdminCustomFieldSettingsBundlesEnumIdResult =
  AxiosResponse<EnumBundle>;
export type PostAdminCustomFieldSettingsBundlesEnumIdResult =
  AxiosResponse<EnumBundle>;
export type DeleteAdminCustomFieldSettingsBundlesEnumIdResult =
  AxiosResponse<void>;
export type GetAdminCustomFieldSettingsBundlesEnumIdValuesResult =
  AxiosResponse<EnumBundleElement[]>;
export type PostAdminCustomFieldSettingsBundlesEnumIdValuesResult =
  AxiosResponse<EnumBundleElement>;
export type GetAdminCustomFieldSettingsBundlesEnumIdValuesEnumBundleElementIdResult =
  AxiosResponse<EnumBundleElement>;
export type PostAdminCustomFieldSettingsBundlesEnumIdValuesEnumBundleElementIdResult =
  AxiosResponse<EnumBundleElement>;
export type DeleteAdminCustomFieldSettingsBundlesEnumIdValuesEnumBundleElementIdResult =
  AxiosResponse<void>;
export type GetAdminCustomFieldSettingsBundlesOwnedFieldResult = AxiosResponse<
  OwnedBundle[]
>;
export type PostAdminCustomFieldSettingsBundlesOwnedFieldResult =
  AxiosResponse<OwnedBundle>;
export type GetAdminCustomFieldSettingsBundlesOwnedFieldIdResult =
  AxiosResponse<OwnedBundle>;
export type PostAdminCustomFieldSettingsBundlesOwnedFieldIdResult =
  AxiosResponse<OwnedBundle>;
export type DeleteAdminCustomFieldSettingsBundlesOwnedFieldIdResult =
  AxiosResponse<void>;
export type GetAdminCustomFieldSettingsBundlesOwnedFieldIdValuesResult =
  AxiosResponse<OwnedBundleElement[]>;
export type PostAdminCustomFieldSettingsBundlesOwnedFieldIdValuesResult =
  AxiosResponse<OwnedBundleElement>;
export type GetAdminCustomFieldSettingsBundlesOwnedFieldIdValuesOwnedBundleElementIdResult =
  AxiosResponse<OwnedBundleElement>;
export type PostAdminCustomFieldSettingsBundlesOwnedFieldIdValuesOwnedBundleElementIdResult =
  AxiosResponse<OwnedBundleElement>;
export type DeleteAdminCustomFieldSettingsBundlesOwnedFieldIdValuesOwnedBundleElementIdResult =
  AxiosResponse<void>;
export type GetAdminCustomFieldSettingsBundlesStateResult = AxiosResponse<
  StateBundle[]
>;
export type PostAdminCustomFieldSettingsBundlesStateResult =
  AxiosResponse<StateBundle>;
export type GetAdminCustomFieldSettingsBundlesStateIdResult =
  AxiosResponse<StateBundle>;
export type PostAdminCustomFieldSettingsBundlesStateIdResult =
  AxiosResponse<StateBundle>;
export type DeleteAdminCustomFieldSettingsBundlesStateIdResult =
  AxiosResponse<void>;
export type GetAdminCustomFieldSettingsBundlesStateIdValuesResult =
  AxiosResponse<StateBundleElement[]>;
export type PostAdminCustomFieldSettingsBundlesStateIdValuesResult =
  AxiosResponse<StateBundleElement>;
export type GetAdminCustomFieldSettingsBundlesStateIdValuesStateBundleElementIdResult =
  AxiosResponse<StateBundleElement>;
export type PostAdminCustomFieldSettingsBundlesStateIdValuesStateBundleElementIdResult =
  AxiosResponse<StateBundleElement>;
export type DeleteAdminCustomFieldSettingsBundlesStateIdValuesStateBundleElementIdResult =
  AxiosResponse<void>;
export type GetAdminCustomFieldSettingsBundlesUserResult = AxiosResponse<
  UserBundle[]
>;
export type PostAdminCustomFieldSettingsBundlesUserResult =
  AxiosResponse<UserBundle>;
export type GetAdminCustomFieldSettingsBundlesUserIdResult =
  AxiosResponse<UserBundle>;
export type PostAdminCustomFieldSettingsBundlesUserIdResult =
  AxiosResponse<UserBundle>;
export type DeleteAdminCustomFieldSettingsBundlesUserIdResult =
  AxiosResponse<void>;
export type GetAdminCustomFieldSettingsBundlesUserIdAggregatedUsersResult =
  AxiosResponse<User[]>;
export type GetAdminCustomFieldSettingsBundlesUserIdGroupsResult =
  AxiosResponse<UserGroup[]>;
export type PostAdminCustomFieldSettingsBundlesUserIdGroupsResult =
  AxiosResponse<UserGroup>;
export type GetAdminCustomFieldSettingsBundlesUserIdGroupsUserGroupIdResult =
  AxiosResponse<UserGroup>;
export type DeleteAdminCustomFieldSettingsBundlesUserIdGroupsUserGroupIdResult =
  AxiosResponse<void>;
export type GetAdminCustomFieldSettingsBundlesUserIdIndividualsResult =
  AxiosResponse<User[]>;
export type PostAdminCustomFieldSettingsBundlesUserIdIndividualsResult =
  AxiosResponse<User>;
export type GetAdminCustomFieldSettingsBundlesUserIdIndividualsUserIdResult =
  AxiosResponse<User>;
export type DeleteAdminCustomFieldSettingsBundlesUserIdIndividualsUserIdResult =
  AxiosResponse<void>;
export type GetAdminCustomFieldSettingsBundlesVersionResult = AxiosResponse<
  VersionBundle[]
>;
export type PostAdminCustomFieldSettingsBundlesVersionResult =
  AxiosResponse<VersionBundle>;
export type GetAdminCustomFieldSettingsBundlesVersionIdResult =
  AxiosResponse<VersionBundle>;
export type PostAdminCustomFieldSettingsBundlesVersionIdResult =
  AxiosResponse<VersionBundle>;
export type DeleteAdminCustomFieldSettingsBundlesVersionIdResult =
  AxiosResponse<void>;
export type GetAdminCustomFieldSettingsBundlesVersionIdValuesResult =
  AxiosResponse<VersionBundleElement[]>;
export type PostAdminCustomFieldSettingsBundlesVersionIdValuesResult =
  AxiosResponse<VersionBundleElement>;
export type GetAdminCustomFieldSettingsBundlesVersionIdValuesVersionBundleElementIdResult =
  AxiosResponse<VersionBundleElement>;
export type PostAdminCustomFieldSettingsBundlesVersionIdValuesVersionBundleElementIdResult =
  AxiosResponse<VersionBundleElement>;
export type DeleteAdminCustomFieldSettingsBundlesVersionIdValuesVersionBundleElementIdResult =
  AxiosResponse<void>;
export type GetAdminCustomFieldSettingsCustomFieldsResult = AxiosResponse<
  CustomField[]
>;
export type PostAdminCustomFieldSettingsCustomFieldsResult =
  AxiosResponse<CustomField>;
export type GetAdminCustomFieldSettingsCustomFieldsIdResult =
  AxiosResponse<CustomField>;
export type PostAdminCustomFieldSettingsCustomFieldsIdResult =
  AxiosResponse<CustomField>;
export type DeleteAdminCustomFieldSettingsCustomFieldsIdResult =
  AxiosResponse<void>;
export type GetAdminCustomFieldSettingsCustomFieldsIdFieldDefaultsResult =
  AxiosResponse<CustomFieldDefaults>;
export type PostAdminCustomFieldSettingsCustomFieldsIdFieldDefaultsResult =
  AxiosResponse<CustomFieldDefaults>;
export type GetAdminCustomFieldSettingsCustomFieldsIdInstancesResult =
  AxiosResponse<ProjectCustomField[]>;
export type GetAdminCustomFieldSettingsTypesResult = AxiosResponse<FieldType[]>;
export type GetAdminDatabaseBackupBackupsResult = AxiosResponse<BackupFile[]>;
export type GetAdminDatabaseBackupBackupsIdResult = AxiosResponse<BackupFile>;
export type GetAdminDatabaseBackupSettingsResult =
  AxiosResponse<DatabaseBackupSettings>;
export type PostAdminDatabaseBackupSettingsResult =
  AxiosResponse<DatabaseBackupSettings>;
export type GetAdminDatabaseBackupSettingsBackupStatusResult =
  AxiosResponse<BackupStatus>;
export type GetAdminGlobalSettingsResult = AxiosResponse<GlobalSettings>;
export type PostAdminGlobalSettingsResult = AxiosResponse<GlobalSettings>;
export type GetAdminGlobalSettingsAppearanceSettingsResult =
  AxiosResponse<AppearanceSettings>;
export type PostAdminGlobalSettingsAppearanceSettingsResult =
  AxiosResponse<AppearanceSettings>;
export type GetAdminGlobalSettingsLicenseResult = AxiosResponse<License>;
export type PostAdminGlobalSettingsLicenseResult = AxiosResponse<License>;
export type GetAdminGlobalSettingsLocaleSettingsResult =
  AxiosResponse<LocaleSettings>;
export type PostAdminGlobalSettingsLocaleSettingsResult =
  AxiosResponse<LocaleSettings>;
export type GetAdminGlobalSettingsNotificationSettingsResult =
  AxiosResponse<NotificationSettings>;
export type PostAdminGlobalSettingsNotificationSettingsResult =
  AxiosResponse<NotificationSettings>;
export type GetAdminGlobalSettingsRestSettingsResult =
  AxiosResponse<RestCorsSettings>;
export type PostAdminGlobalSettingsRestSettingsResult =
  AxiosResponse<RestCorsSettings>;
export type GetAdminGlobalSettingsSystemSettingsResult =
  AxiosResponse<SystemSettings>;
export type PostAdminGlobalSettingsSystemSettingsResult =
  AxiosResponse<SystemSettings>;
export type GetAdminProjectsResult = AxiosResponse<Project[]>;
export type PostAdminProjectsResult = AxiosResponse<Project>;
export type GetAdminProjectsIdResult = AxiosResponse<Project>;
export type PostAdminProjectsIdResult = AxiosResponse<Project>;
export type DeleteAdminProjectsIdResult = AxiosResponse<void>;
export type GetAdminProjectsIdArticlesResult = AxiosResponse<Article[]>;
export type GetAdminProjectsIdCustomFieldsResult = AxiosResponse<
  ProjectCustomField[]
>;
export type PostAdminProjectsIdCustomFieldsResult =
  AxiosResponse<ProjectCustomField>;
export type GetAdminProjectsIdCustomFieldsProjectCustomFieldIdResult =
  AxiosResponse<ProjectCustomField>;
export type PostAdminProjectsIdCustomFieldsProjectCustomFieldIdResult =
  AxiosResponse<ProjectCustomField>;
export type DeleteAdminProjectsIdCustomFieldsProjectCustomFieldIdResult =
  AxiosResponse<void>;
export type GetAdminProjectsIdIssuesResult = AxiosResponse<Issue[]>;
export type PostAdminProjectsIdIssuesResult = AxiosResponse<Issue>;
export type GetAdminProjectsIdIssuesIssueIdResult = AxiosResponse<Issue>;
export type PostAdminProjectsIdIssuesIssueIdResult = AxiosResponse<Issue>;
export type DeleteAdminProjectsIdIssuesIssueIdResult = AxiosResponse<void>;
export type GetAdminProjectsIdTimeTrackingSettingsResult =
  AxiosResponse<ProjectTimeTrackingSettings>;
export type PostAdminProjectsIdTimeTrackingSettingsResult =
  AxiosResponse<ProjectTimeTrackingSettings>;
export type GetAdminProjectsIdTimeTrackingSettingsWorkItemTypesResult =
  AxiosResponse<WorkItemType[]>;
export type PostAdminProjectsIdTimeTrackingSettingsWorkItemTypesResult =
  AxiosResponse<WorkItemType>;
export type GetAdminProjectsIdTimeTrackingSettingsWorkItemTypesWorkItemTypeIdResult =
  AxiosResponse<WorkItemType>;
export type DeleteAdminProjectsIdTimeTrackingSettingsWorkItemTypesWorkItemTypeIdResult =
  AxiosResponse<void>;
export type GetAdminTelemetryResult = AxiosResponse<Telemetry>;
export type GetAdminTimeTrackingSettingsResult =
  AxiosResponse<GlobalTimeTrackingSettings>;
export type GetAdminTimeTrackingSettingsWorkItemTypesResult = AxiosResponse<
  WorkItemType[]
>;
export type PostAdminTimeTrackingSettingsWorkItemTypesResult =
  AxiosResponse<WorkItemType>;
export type GetAdminTimeTrackingSettingsWorkItemTypesWorkItemTypeIdResult =
  AxiosResponse<WorkItemType>;
export type PostAdminTimeTrackingSettingsWorkItemTypesWorkItemTypeIdResult =
  AxiosResponse<WorkItemType>;
export type DeleteAdminTimeTrackingSettingsWorkItemTypesWorkItemTypeIdResult =
  AxiosResponse<void>;
export type GetAdminTimeTrackingSettingsWorkTimeSettingsResult =
  AxiosResponse<WorkTimeSettings>;
export type PostAdminTimeTrackingSettingsWorkTimeSettingsResult =
  AxiosResponse<WorkTimeSettings>;
export type GetAgilesResult = AxiosResponse<Agile[]>;
export type PostAgilesResult = AxiosResponse<Agile>;
export type GetAgilesIdResult = AxiosResponse<Agile>;
export type PostAgilesIdResult = AxiosResponse<Agile>;
export type DeleteAgilesIdResult = AxiosResponse<void>;
export type GetAgilesIdSprintsResult = AxiosResponse<Sprint[]>;
export type PostAgilesIdSprintsResult = AxiosResponse<Sprint>;
export type GetAgilesIdSprintsSprintIdResult = AxiosResponse<Sprint>;
export type PostAgilesIdSprintsSprintIdResult = AxiosResponse<Sprint>;
export type DeleteAgilesIdSprintsSprintIdResult = AxiosResponse<void>;
export type GetArticlesResult = AxiosResponse<Article[]>;
export type PostArticlesResult = AxiosResponse<Article>;
export type GetArticlesIdResult = AxiosResponse<Article>;
export type PostArticlesIdResult = AxiosResponse<Article>;
export type DeleteArticlesIdResult = AxiosResponse<void>;
export type GetArticlesIdAttachmentsResult = AxiosResponse<ArticleAttachment[]>;
export type PostArticlesIdAttachmentsResult = AxiosResponse<ArticleAttachment>;
export type GetArticlesIdAttachmentsArticleAttachmentIdResult =
  AxiosResponse<ArticleAttachment>;
export type PostArticlesIdAttachmentsArticleAttachmentIdResult =
  AxiosResponse<ArticleAttachment>;
export type DeleteArticlesIdAttachmentsArticleAttachmentIdResult =
  AxiosResponse<void>;
export type GetArticlesIdChildArticlesResult = AxiosResponse<Article[]>;
export type PostArticlesIdChildArticlesResult = AxiosResponse<Article>;
export type GetArticlesIdChildArticlesArticleIdResult = AxiosResponse<Article>;
export type PostArticlesIdChildArticlesArticleIdResult = AxiosResponse<Article>;
export type DeleteArticlesIdChildArticlesArticleIdResult = AxiosResponse<void>;
export type GetArticlesIdCommentsResult = AxiosResponse<ArticleComment[]>;
export type PostArticlesIdCommentsResult = AxiosResponse<ArticleComment>;
export type GetArticlesIdCommentsArticleCommentIdResult =
  AxiosResponse<ArticleComment>;
export type PostArticlesIdCommentsArticleCommentIdResult =
  AxiosResponse<ArticleComment>;
export type DeleteArticlesIdCommentsArticleCommentIdResult =
  AxiosResponse<void>;
export type GetArticlesIdCommentsArticleCommentIdReactionsResult =
  AxiosResponse<Reaction[]>;
export type PostArticlesIdCommentsArticleCommentIdReactionsResult =
  AxiosResponse<Reaction>;
export type GetArticlesIdCommentsArticleCommentIdReactionsReactionIdResult =
  AxiosResponse<Reaction>;
export type DeleteArticlesIdCommentsArticleCommentIdReactionsReactionIdResult =
  AxiosResponse<void>;
export type GetArticlesIdParentArticleResult = AxiosResponse<Article>;
export type GetArticlesIdTagsResult = AxiosResponse<Tag[]>;
export type PostArticlesIdTagsResult = AxiosResponse<Tag>;
export type GetArticlesIdTagsTagIdResult = AxiosResponse<Tag>;
export type DeleteArticlesIdTagsTagIdResult = AxiosResponse<void>;
export type PostCommandsResult = AxiosResponse<CommandList>;
export type PostCommandsAssistResult = AxiosResponse<CommandList>;
export type GetGroupsResult = AxiosResponse<UserGroup[]>;
export type GetGroupsIdResult = AxiosResponse<UserGroup>;
export type GetIssueLinkTypesResult = AxiosResponse<IssueLinkType[]>;
export type PostIssueLinkTypesResult = AxiosResponse<IssueLinkType>;
export type GetIssueLinkTypesIdResult = AxiosResponse<IssueLinkType>;
export type PostIssueLinkTypesIdResult = AxiosResponse<IssueLinkType>;
export type DeleteIssueLinkTypesIdResult = AxiosResponse<void>;
export type GetIssuesResult = AxiosResponse<Issue[]>;
export type PostIssuesResult = AxiosResponse<Issue>;
export type GetIssuesIdResult = AxiosResponse<Issue>;
export type PostIssuesIdResult = AxiosResponse<Issue>;
export type DeleteIssuesIdResult = AxiosResponse<void>;
export type GetIssuesIdActivitiesResult = AxiosResponse<ActivityItem[]>;
export type GetIssuesIdActivitiesActivityItemIdResult =
  AxiosResponse<ActivityItem>;
export type GetIssuesIdActivitiesPageResult = AxiosResponse<ActivityCursorPage>;
export type GetIssuesIdAttachmentsResult = AxiosResponse<IssueAttachment[]>;
export type PostIssuesIdAttachmentsResult = AxiosResponse<IssueAttachment[]>;
export type GetIssuesIdAttachmentsIssueAttachmentIdResult =
  AxiosResponse<IssueAttachment>;
export type PostIssuesIdAttachmentsIssueAttachmentIdResult =
  AxiosResponse<IssueAttachment>;
export type DeleteIssuesIdAttachmentsIssueAttachmentIdResult =
  AxiosResponse<void>;
export type GetIssuesIdCommentsResult = AxiosResponse<IssueComment[]>;
export type PostIssuesIdCommentsResult = AxiosResponse<IssueComment>;
export type GetIssuesIdCommentsIssueCommentIdResult =
  AxiosResponse<IssueComment>;
export type PostIssuesIdCommentsIssueCommentIdResult =
  AxiosResponse<IssueComment>;
export type DeleteIssuesIdCommentsIssueCommentIdResult = AxiosResponse<void>;
export type GetIssuesIdCommentsIssueCommentIdReactionsResult = AxiosResponse<
  Reaction[]
>;
export type PostIssuesIdCommentsIssueCommentIdReactionsResult =
  AxiosResponse<Reaction>;
export type GetIssuesIdCommentsIssueCommentIdReactionsReactionIdResult =
  AxiosResponse<Reaction>;
export type DeleteIssuesIdCommentsIssueCommentIdReactionsReactionIdResult =
  AxiosResponse<void>;
export type GetIssuesIdCustomFieldsResult = AxiosResponse<IssueCustomField[]>;
export type GetIssuesIdCustomFieldsIssueCustomFieldIdResult =
  AxiosResponse<IssueCustomField>;
export type PostIssuesIdCustomFieldsIssueCustomFieldIdResult =
  AxiosResponse<IssueCustomField>;
export type GetIssuesIdLinksResult = AxiosResponse<IssueLink[]>;
export type GetIssuesIdLinksIssueLinkIdResult = AxiosResponse<IssueLink>;
export type GetIssuesIdLinksIssueLinkIdIssuesResult = AxiosResponse<Issue[]>;
export type PostIssuesIdLinksIssueLinkIdIssuesResult = AxiosResponse<Issue>;
export type DeleteIssuesIdLinksIssueLinkIdIssuesIssueIdResult =
  AxiosResponse<void>;
export type GetIssuesIdProjectResult = AxiosResponse<Project>;
export type PostIssuesIdProjectResult = AxiosResponse<Project>;
export type GetIssuesIdSprintsResult = AxiosResponse<Sprint[]>;
export type GetIssuesIdTagsResult = AxiosResponse<Tag[]>;
export type PostIssuesIdTagsResult = AxiosResponse<Tag>;
export type GetIssuesIdTagsTagIdResult = AxiosResponse<Tag>;
export type DeleteIssuesIdTagsTagIdResult = AxiosResponse<void>;
export type GetIssuesIdTimeTrackingResult = AxiosResponse<IssueTimeTracker>;
export type GetIssuesIdTimeTrackingWorkItemsResult = AxiosResponse<
  IssueWorkItem[]
>;
export type PostIssuesIdTimeTrackingWorkItemsResult =
  AxiosResponse<IssueWorkItem>;
export type GetIssuesIdTimeTrackingWorkItemsIssueWorkItemIdResult =
  AxiosResponse<IssueWorkItem>;
export type PostIssuesIdTimeTrackingWorkItemsIssueWorkItemIdResult =
  AxiosResponse<IssueWorkItem>;
export type DeleteIssuesIdTimeTrackingWorkItemsIssueWorkItemIdResult =
  AxiosResponse<void>;
export type GetIssuesIdVcsChangesResult = AxiosResponse<VcsChange[]>;
export type PostIssuesIdVcsChangesResult = AxiosResponse<VcsChange>;
export type GetIssuesIdVcsChangesVcsChangeIdResult = AxiosResponse<VcsChange>;
export type PostIssuesIdVcsChangesVcsChangeIdResult = AxiosResponse<VcsChange>;
export type DeleteIssuesIdVcsChangesVcsChangeIdResult = AxiosResponse<void>;
export type PostIssuesGetterCountResult = AxiosResponse<IssueCountResponse>;
export type GetSavedQueriesResult = AxiosResponse<SavedQuery[]>;
export type PostSavedQueriesResult = AxiosResponse<SavedQuery>;
export type GetSavedQueriesIdResult = AxiosResponse<SavedQuery>;
export type PostSavedQueriesIdResult = AxiosResponse<SavedQuery>;
export type DeleteSavedQueriesIdResult = AxiosResponse<void>;
export type PostSearchAssistResult = AxiosResponse<SearchSuggestions>;
export type GetTagsResult = AxiosResponse<Tag[]>;
export type PostTagsResult = AxiosResponse<Tag>;
export type GetTagsIdResult = AxiosResponse<Tag>;
export type PostTagsIdResult = AxiosResponse<Tag>;
export type DeleteTagsIdResult = AxiosResponse<void>;
export type GetTagsIdIssuesResult = AxiosResponse<Issue[]>;
export type GetUsersResult = AxiosResponse<User[]>;
export type GetUsersIdResult = AxiosResponse<User>;
export type GetUsersIdProfilesGeneralResult = AxiosResponse<GeneralUserProfile>;
export type PostUsersIdProfilesGeneralResult =
  AxiosResponse<GeneralUserProfile>;
export type GetUsersIdProfilesNotificationsResult =
  AxiosResponse<NotificationsUserProfile>;
export type PostUsersIdProfilesNotificationsResult =
  AxiosResponse<NotificationsUserProfile>;
export type GetUsersIdProfilesTimetrackingResult =
  AxiosResponse<TimeTrackingUserProfile>;
export type PostUsersIdProfilesTimetrackingResult =
  AxiosResponse<TimeTrackingUserProfile>;
export type GetUsersIdSavedQueriesResult = AxiosResponse<SavedQuery[]>;
export type GetUsersIdTagsResult = AxiosResponse<Tag[]>;
export type GetUsersMeResult = AxiosResponse<Me>;
export type GetWorkItemsResult = AxiosResponse<IssueWorkItem[]>;
export type GetWorkItemsIdResult = AxiosResponse<IssueWorkItem>;
