/**
 * Generated by orval v7.7.0 üç∫
 * Do not edit manually.
 * YouTrack REST API
 * YouTrack issue tracking and project management system
 * OpenAPI spec version: 2025.1
 */
import type {
  ActivityCursorPage,
  ActivityItem,
  Agile,
  AppearanceSettings,
  Article,
  ArticleAttachment,
  ArticleComment,
  BackupFile,
  BackupStatus,
  BuildBundle,
  BuildBundleElement,
  CommandList,
  CustomField,
  CustomFieldDefaults,
  DatabaseBackupSettings,
  EnumBundle,
  EnumBundleElement,
  FieldType,
  GeneralUserProfile,
  GetActivitiesIdParams,
  GetActivitiesPageParams,
  GetActivitiesParams,
  GetAdminCustomFieldSettingsBundlesBuildIdParams,
  GetAdminCustomFieldSettingsBundlesBuildIdValuesBuildBundleElementIdParams,
  GetAdminCustomFieldSettingsBundlesBuildIdValuesParams,
  GetAdminCustomFieldSettingsBundlesBuildParams,
  GetAdminCustomFieldSettingsBundlesEnumIdParams,
  GetAdminCustomFieldSettingsBundlesEnumIdValuesEnumBundleElementIdParams,
  GetAdminCustomFieldSettingsBundlesEnumIdValuesParams,
  GetAdminCustomFieldSettingsBundlesEnumParams,
  GetAdminCustomFieldSettingsBundlesOwnedFieldIdParams,
  GetAdminCustomFieldSettingsBundlesOwnedFieldIdValuesOwnedBundleElementIdParams,
  GetAdminCustomFieldSettingsBundlesOwnedFieldIdValuesParams,
  GetAdminCustomFieldSettingsBundlesOwnedFieldParams,
  GetAdminCustomFieldSettingsBundlesStateIdParams,
  GetAdminCustomFieldSettingsBundlesStateIdValuesParams,
  GetAdminCustomFieldSettingsBundlesStateIdValuesStateBundleElementIdParams,
  GetAdminCustomFieldSettingsBundlesStateParams,
  GetAdminCustomFieldSettingsBundlesUserIdAggregatedUsersParams,
  GetAdminCustomFieldSettingsBundlesUserIdGroupsParams,
  GetAdminCustomFieldSettingsBundlesUserIdGroupsUserGroupIdParams,
  GetAdminCustomFieldSettingsBundlesUserIdIndividualsParams,
  GetAdminCustomFieldSettingsBundlesUserIdIndividualsUserIdParams,
  GetAdminCustomFieldSettingsBundlesUserIdParams,
  GetAdminCustomFieldSettingsBundlesUserParams,
  GetAdminCustomFieldSettingsBundlesVersionIdParams,
  GetAdminCustomFieldSettingsBundlesVersionIdValuesParams,
  GetAdminCustomFieldSettingsBundlesVersionIdValuesVersionBundleElementIdParams,
  GetAdminCustomFieldSettingsBundlesVersionParams,
  GetAdminCustomFieldSettingsCustomFieldsIdFieldDefaultsParams,
  GetAdminCustomFieldSettingsCustomFieldsIdInstancesParams,
  GetAdminCustomFieldSettingsCustomFieldsIdParams,
  GetAdminCustomFieldSettingsCustomFieldsParams,
  GetAdminCustomFieldSettingsTypesParams,
  GetAdminDatabaseBackupBackupsIdParams,
  GetAdminDatabaseBackupBackupsParams,
  GetAdminDatabaseBackupSettingsBackupStatusParams,
  GetAdminDatabaseBackupSettingsParams,
  GetAdminGlobalSettingsAppearanceSettingsParams,
  GetAdminGlobalSettingsLicenseParams,
  GetAdminGlobalSettingsLocaleSettingsParams,
  GetAdminGlobalSettingsNotificationSettingsParams,
  GetAdminGlobalSettingsParams,
  GetAdminGlobalSettingsRestSettingsParams,
  GetAdminGlobalSettingsSystemSettingsParams,
  GetAdminProjectsIdArticlesParams,
  GetAdminProjectsIdCustomFieldsParams,
  GetAdminProjectsIdCustomFieldsProjectCustomFieldIdParams,
  GetAdminProjectsIdIssuesIssueIdParams,
  GetAdminProjectsIdIssuesParams,
  GetAdminProjectsIdParams,
  GetAdminProjectsIdTimeTrackingSettingsParams,
  GetAdminProjectsIdTimeTrackingSettingsWorkItemTypesParams,
  GetAdminProjectsIdTimeTrackingSettingsWorkItemTypesWorkItemTypeIdParams,
  GetAdminProjectsParams,
  GetAdminTelemetryParams,
  GetAdminTimeTrackingSettingsParams,
  GetAdminTimeTrackingSettingsWorkItemTypesParams,
  GetAdminTimeTrackingSettingsWorkItemTypesWorkItemTypeIdParams,
  GetAdminTimeTrackingSettingsWorkTimeSettingsParams,
  GetAgilesIdParams,
  GetAgilesIdSprintsParams,
  GetAgilesIdSprintsSprintIdParams,
  GetAgilesParams,
  GetArticlesIdAttachmentsArticleAttachmentIdParams,
  GetArticlesIdAttachmentsParams,
  GetArticlesIdChildArticlesArticleIdParams,
  GetArticlesIdChildArticlesParams,
  GetArticlesIdCommentsArticleCommentIdParams,
  GetArticlesIdCommentsArticleCommentIdReactionsParams,
  GetArticlesIdCommentsArticleCommentIdReactionsReactionIdParams,
  GetArticlesIdCommentsParams,
  GetArticlesIdParams,
  GetArticlesIdParentArticleParams,
  GetArticlesIdTagsParams,
  GetArticlesIdTagsTagIdParams,
  GetArticlesParams,
  GetGroupsIdParams,
  GetGroupsParams,
  GetIssueLinkTypesIdParams,
  GetIssueLinkTypesParams,
  GetIssuesIdActivitiesActivityItemIdParams,
  GetIssuesIdActivitiesPageParams,
  GetIssuesIdActivitiesParams,
  GetIssuesIdAttachmentsIssueAttachmentIdParams,
  GetIssuesIdAttachmentsParams,
  GetIssuesIdCommentsIssueCommentIdParams,
  GetIssuesIdCommentsIssueCommentIdReactionsParams,
  GetIssuesIdCommentsIssueCommentIdReactionsReactionIdParams,
  GetIssuesIdCommentsParams,
  GetIssuesIdCustomFieldsIssueCustomFieldIdParams,
  GetIssuesIdCustomFieldsParams,
  GetIssuesIdLinksIssueLinkIdIssuesParams,
  GetIssuesIdLinksIssueLinkIdParams,
  GetIssuesIdLinksParams,
  GetIssuesIdParams,
  GetIssuesIdProjectParams,
  GetIssuesIdSprintsParams,
  GetIssuesIdTagsParams,
  GetIssuesIdTagsTagIdParams,
  GetIssuesIdTimeTrackingParams,
  GetIssuesIdTimeTrackingWorkItemsIssueWorkItemIdParams,
  GetIssuesIdTimeTrackingWorkItemsParams,
  GetIssuesIdVcsChangesParams,
  GetIssuesIdVcsChangesVcsChangeIdParams,
  GetIssuesParams,
  GetSavedQueriesIdParams,
  GetSavedQueriesParams,
  GetTagsIdIssuesParams,
  GetTagsIdParams,
  GetTagsParams,
  GetUsersIdParams,
  GetUsersIdProfilesGeneralParams,
  GetUsersIdProfilesNotificationsParams,
  GetUsersIdProfilesTimetrackingParams,
  GetUsersIdSavedQueriesParams,
  GetUsersIdTagsParams,
  GetUsersMeParams,
  GetUsersParams,
  GetWorkItemsIdParams,
  GetWorkItemsParams,
  GlobalSettings,
  GlobalTimeTrackingSettings,
  Issue,
  IssueAttachment,
  IssueComment,
  IssueCountResponse,
  IssueCustomField,
  IssueLink,
  IssueLinkType,
  IssueTimeTracker,
  IssueWorkItem,
  License,
  LocaleSettings,
  Me,
  NotificationSettings,
  NotificationsUserProfile,
  OwnedBundle,
  OwnedBundleElement,
  PostAdminCustomFieldSettingsBundlesBuildIdParams,
  PostAdminCustomFieldSettingsBundlesBuildIdValuesBuildBundleElementIdParams,
  PostAdminCustomFieldSettingsBundlesBuildIdValuesParams,
  PostAdminCustomFieldSettingsBundlesBuildParams,
  PostAdminCustomFieldSettingsBundlesEnumIdParams,
  PostAdminCustomFieldSettingsBundlesEnumIdValuesEnumBundleElementIdParams,
  PostAdminCustomFieldSettingsBundlesEnumIdValuesParams,
  PostAdminCustomFieldSettingsBundlesEnumParams,
  PostAdminCustomFieldSettingsBundlesOwnedFieldIdParams,
  PostAdminCustomFieldSettingsBundlesOwnedFieldIdValuesOwnedBundleElementIdParams,
  PostAdminCustomFieldSettingsBundlesOwnedFieldIdValuesParams,
  PostAdminCustomFieldSettingsBundlesOwnedFieldParams,
  PostAdminCustomFieldSettingsBundlesStateIdParams,
  PostAdminCustomFieldSettingsBundlesStateIdValuesParams,
  PostAdminCustomFieldSettingsBundlesStateIdValuesStateBundleElementIdParams,
  PostAdminCustomFieldSettingsBundlesStateParams,
  PostAdminCustomFieldSettingsBundlesUserIdGroupsParams,
  PostAdminCustomFieldSettingsBundlesUserIdIndividualsParams,
  PostAdminCustomFieldSettingsBundlesUserIdParams,
  PostAdminCustomFieldSettingsBundlesUserParams,
  PostAdminCustomFieldSettingsBundlesVersionIdParams,
  PostAdminCustomFieldSettingsBundlesVersionIdValuesParams,
  PostAdminCustomFieldSettingsBundlesVersionIdValuesVersionBundleElementIdParams,
  PostAdminCustomFieldSettingsBundlesVersionParams,
  PostAdminCustomFieldSettingsCustomFieldsIdFieldDefaultsParams,
  PostAdminCustomFieldSettingsCustomFieldsIdParams,
  PostAdminCustomFieldSettingsCustomFieldsParams,
  PostAdminDatabaseBackupSettingsParams,
  PostAdminGlobalSettingsAppearanceSettingsParams,
  PostAdminGlobalSettingsLicenseParams,
  PostAdminGlobalSettingsLocaleSettingsParams,
  PostAdminGlobalSettingsNotificationSettingsParams,
  PostAdminGlobalSettingsParams,
  PostAdminGlobalSettingsRestSettingsParams,
  PostAdminGlobalSettingsSystemSettingsParams,
  PostAdminProjectsIdCustomFieldsParams,
  PostAdminProjectsIdCustomFieldsProjectCustomFieldIdParams,
  PostAdminProjectsIdIssuesIssueIdParams,
  PostAdminProjectsIdIssuesParams,
  PostAdminProjectsIdParams,
  PostAdminProjectsIdTimeTrackingSettingsParams,
  PostAdminProjectsIdTimeTrackingSettingsWorkItemTypesParams,
  PostAdminProjectsParams,
  PostAdminTimeTrackingSettingsWorkItemTypesParams,
  PostAdminTimeTrackingSettingsWorkItemTypesWorkItemTypeIdParams,
  PostAdminTimeTrackingSettingsWorkTimeSettingsParams,
  PostAgilesIdParams,
  PostAgilesIdSprintsParams,
  PostAgilesIdSprintsSprintIdParams,
  PostAgilesParams,
  PostArticlesIdAttachmentsArticleAttachmentIdParams,
  PostArticlesIdAttachmentsParams,
  PostArticlesIdChildArticlesArticleIdParams,
  PostArticlesIdChildArticlesParams,
  PostArticlesIdCommentsArticleCommentIdParams,
  PostArticlesIdCommentsArticleCommentIdReactionsParams,
  PostArticlesIdCommentsParams,
  PostArticlesIdParams,
  PostArticlesIdTagsParams,
  PostArticlesParams,
  PostCommandsAssistParams,
  PostCommandsParams,
  PostIssueLinkTypesIdParams,
  PostIssueLinkTypesParams,
  PostIssuesGetterCountParams,
  PostIssuesIdAttachmentsBody,
  PostIssuesIdAttachmentsIssueAttachmentIdParams,
  PostIssuesIdAttachmentsParams,
  PostIssuesIdCommentsIssueCommentIdParams,
  PostIssuesIdCommentsIssueCommentIdReactionsParams,
  PostIssuesIdCommentsParams,
  PostIssuesIdCustomFieldsIssueCustomFieldIdParams,
  PostIssuesIdLinksIssueLinkIdIssuesParams,
  PostIssuesIdParams,
  PostIssuesIdProjectParams,
  PostIssuesIdTagsParams,
  PostIssuesIdTimeTrackingWorkItemsIssueWorkItemIdParams,
  PostIssuesIdTimeTrackingWorkItemsParams,
  PostIssuesIdVcsChangesParams,
  PostIssuesIdVcsChangesVcsChangeIdParams,
  PostIssuesParams,
  PostSavedQueriesIdParams,
  PostSavedQueriesParams,
  PostSearchAssistParams,
  PostTagsIdParams,
  PostTagsParams,
  PostUsersIdProfilesGeneralParams,
  PostUsersIdProfilesNotificationsParams,
  PostUsersIdProfilesTimetrackingParams,
  Project,
  ProjectCustomField,
  ProjectTimeTrackingSettings,
  Reaction,
  RestCorsSettings,
  SavedQuery,
  SearchSuggestions,
  Sprint,
  StateBundle,
  StateBundleElement,
  SystemSettings,
  Tag,
  Telemetry,
  TimeTrackingUserProfile,
  User,
  UserBundle,
  UserGroup,
  VcsChange,
  VersionBundle,
  VersionBundleElement,
  WorkItemType,
  WorkTimeSettings
} from '../models';

import { customInstance } from '../mutator/custom-instance';

// https://stackoverflow.com/questions/49579094/typescript-conditional-types-filter-out-readonly-properties-pick-only-requir/49579497#49579497
type IfEquals<X, Y, A = X, B = never> = (<T>() => T extends X ? 1 : 2) extends <
T,
>() => T extends Y ? 1 : 2
? A
: B;

type WritableKeys<T> = {
[P in keyof T]-?: IfEquals<
  { [Q in P]: T[P] },
  { -readonly [Q in P]: T[P] },
  P
>;
}[keyof T];

type UnionToIntersection<U> =
  (U extends any ? (k: U)=>void : never) extends ((k: infer I)=>void) ? I : never;
type DistributeReadOnlyOverUnions<T> = T extends any ? NonReadonly<T> : never;

type Writable<T> = Pick<T, WritableKeys<T>>;
type NonReadonly<T> = [T] extends [UnionToIntersection<T>] ? {
  [P in keyof Writable<T>]: T[P] extends object
    ? NonReadonly<NonNullable<T[P]>>
    : T[P];
} : DistributeReadOnlyOverUnions<T>;

export type getActivitiesResponse200 = {
  data: ActivityItem[]
  status: 200
}
    
export type getActivitiesResponseComposite = getActivitiesResponse200;
    
export type getActivitiesResponse = getActivitiesResponseComposite & {
  headers: Headers;
}

export const getGetActivitiesUrl = (params?: GetActivitiesParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/activities?${stringifiedParams}` : `/activities`
}

export const getActivities = async (params?: GetActivitiesParams, options?: RequestInit): Promise<getActivitiesResponse> => {
  
  return customInstance<getActivitiesResponse>(getGetActivitiesUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type getActivitiesIdResponse200 = {
  data: ActivityItem
  status: 200
}
    
export type getActivitiesIdResponseComposite = getActivitiesIdResponse200;
    
export type getActivitiesIdResponse = getActivitiesIdResponseComposite & {
  headers: Headers;
}

export const getGetActivitiesIdUrl = (id: string,
    params?: GetActivitiesIdParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/activities/${id}?${stringifiedParams}` : `/activities/${id}`
}

export const getActivitiesId = async (id: string,
    params?: GetActivitiesIdParams, options?: RequestInit): Promise<getActivitiesIdResponse> => {
  
  return customInstance<getActivitiesIdResponse>(getGetActivitiesIdUrl(id,params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type getActivitiesPageResponse200 = {
  data: ActivityCursorPage
  status: 200
}
    
export type getActivitiesPageResponseComposite = getActivitiesPageResponse200;
    
export type getActivitiesPageResponse = getActivitiesPageResponseComposite & {
  headers: Headers;
}

export const getGetActivitiesPageUrl = (params?: GetActivitiesPageParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/activitiesPage?${stringifiedParams}` : `/activitiesPage`
}

export const getActivitiesPage = async (params?: GetActivitiesPageParams, options?: RequestInit): Promise<getActivitiesPageResponse> => {
  
  return customInstance<getActivitiesPageResponse>(getGetActivitiesPageUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type getAdminCustomFieldSettingsBundlesBuildResponse200 = {
  data: BuildBundle[]
  status: 200
}
    
export type getAdminCustomFieldSettingsBundlesBuildResponseComposite = getAdminCustomFieldSettingsBundlesBuildResponse200;
    
export type getAdminCustomFieldSettingsBundlesBuildResponse = getAdminCustomFieldSettingsBundlesBuildResponseComposite & {
  headers: Headers;
}

export const getGetAdminCustomFieldSettingsBundlesBuildUrl = (params?: GetAdminCustomFieldSettingsBundlesBuildParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/admin/customFieldSettings/bundles/build?${stringifiedParams}` : `/admin/customFieldSettings/bundles/build`
}

export const getAdminCustomFieldSettingsBundlesBuild = async (params?: GetAdminCustomFieldSettingsBundlesBuildParams, options?: RequestInit): Promise<getAdminCustomFieldSettingsBundlesBuildResponse> => {
  
  return customInstance<getAdminCustomFieldSettingsBundlesBuildResponse>(getGetAdminCustomFieldSettingsBundlesBuildUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type postAdminCustomFieldSettingsBundlesBuildResponse200 = {
  data: BuildBundle
  status: 200
}
    
export type postAdminCustomFieldSettingsBundlesBuildResponseComposite = postAdminCustomFieldSettingsBundlesBuildResponse200;
    
export type postAdminCustomFieldSettingsBundlesBuildResponse = postAdminCustomFieldSettingsBundlesBuildResponseComposite & {
  headers: Headers;
}

export const getPostAdminCustomFieldSettingsBundlesBuildUrl = (params?: PostAdminCustomFieldSettingsBundlesBuildParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/admin/customFieldSettings/bundles/build?${stringifiedParams}` : `/admin/customFieldSettings/bundles/build`
}

export const postAdminCustomFieldSettingsBundlesBuild = async (buildBundle: NonReadonly<BuildBundle>,
    params?: PostAdminCustomFieldSettingsBundlesBuildParams, options?: RequestInit): Promise<postAdminCustomFieldSettingsBundlesBuildResponse> => {
  
  return customInstance<postAdminCustomFieldSettingsBundlesBuildResponse>(getPostAdminCustomFieldSettingsBundlesBuildUrl(params),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      buildBundle,)
  }
);}



export type getAdminCustomFieldSettingsBundlesBuildIdResponse200 = {
  data: BuildBundle
  status: 200
}
    
export type getAdminCustomFieldSettingsBundlesBuildIdResponseComposite = getAdminCustomFieldSettingsBundlesBuildIdResponse200;
    
export type getAdminCustomFieldSettingsBundlesBuildIdResponse = getAdminCustomFieldSettingsBundlesBuildIdResponseComposite & {
  headers: Headers;
}

export const getGetAdminCustomFieldSettingsBundlesBuildIdUrl = (id: string,
    params?: GetAdminCustomFieldSettingsBundlesBuildIdParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/admin/customFieldSettings/bundles/build/${id}?${stringifiedParams}` : `/admin/customFieldSettings/bundles/build/${id}`
}

export const getAdminCustomFieldSettingsBundlesBuildId = async (id: string,
    params?: GetAdminCustomFieldSettingsBundlesBuildIdParams, options?: RequestInit): Promise<getAdminCustomFieldSettingsBundlesBuildIdResponse> => {
  
  return customInstance<getAdminCustomFieldSettingsBundlesBuildIdResponse>(getGetAdminCustomFieldSettingsBundlesBuildIdUrl(id,params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type postAdminCustomFieldSettingsBundlesBuildIdResponse200 = {
  data: BuildBundle
  status: 200
}
    
export type postAdminCustomFieldSettingsBundlesBuildIdResponseComposite = postAdminCustomFieldSettingsBundlesBuildIdResponse200;
    
export type postAdminCustomFieldSettingsBundlesBuildIdResponse = postAdminCustomFieldSettingsBundlesBuildIdResponseComposite & {
  headers: Headers;
}

export const getPostAdminCustomFieldSettingsBundlesBuildIdUrl = (id: string,
    params?: PostAdminCustomFieldSettingsBundlesBuildIdParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/admin/customFieldSettings/bundles/build/${id}?${stringifiedParams}` : `/admin/customFieldSettings/bundles/build/${id}`
}

export const postAdminCustomFieldSettingsBundlesBuildId = async (id: string,
    buildBundle: NonReadonly<BuildBundle>,
    params?: PostAdminCustomFieldSettingsBundlesBuildIdParams, options?: RequestInit): Promise<postAdminCustomFieldSettingsBundlesBuildIdResponse> => {
  
  return customInstance<postAdminCustomFieldSettingsBundlesBuildIdResponse>(getPostAdminCustomFieldSettingsBundlesBuildIdUrl(id,params),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      buildBundle,)
  }
);}



export type deleteAdminCustomFieldSettingsBundlesBuildIdResponse200 = {
  data: void
  status: 200
}
    
export type deleteAdminCustomFieldSettingsBundlesBuildIdResponseComposite = deleteAdminCustomFieldSettingsBundlesBuildIdResponse200;
    
export type deleteAdminCustomFieldSettingsBundlesBuildIdResponse = deleteAdminCustomFieldSettingsBundlesBuildIdResponseComposite & {
  headers: Headers;
}

export const getDeleteAdminCustomFieldSettingsBundlesBuildIdUrl = (id: string,) => {


  

  return `/admin/customFieldSettings/bundles/build/${id}`
}

export const deleteAdminCustomFieldSettingsBundlesBuildId = async (id: string, options?: RequestInit): Promise<deleteAdminCustomFieldSettingsBundlesBuildIdResponse> => {
  
  return customInstance<deleteAdminCustomFieldSettingsBundlesBuildIdResponse>(getDeleteAdminCustomFieldSettingsBundlesBuildIdUrl(id),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
);}



export type getAdminCustomFieldSettingsBundlesBuildIdValuesResponse200 = {
  data: BuildBundleElement[]
  status: 200
}
    
export type getAdminCustomFieldSettingsBundlesBuildIdValuesResponseComposite = getAdminCustomFieldSettingsBundlesBuildIdValuesResponse200;
    
export type getAdminCustomFieldSettingsBundlesBuildIdValuesResponse = getAdminCustomFieldSettingsBundlesBuildIdValuesResponseComposite & {
  headers: Headers;
}

export const getGetAdminCustomFieldSettingsBundlesBuildIdValuesUrl = (id: string,
    params?: GetAdminCustomFieldSettingsBundlesBuildIdValuesParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/admin/customFieldSettings/bundles/build/${id}/values?${stringifiedParams}` : `/admin/customFieldSettings/bundles/build/${id}/values`
}

export const getAdminCustomFieldSettingsBundlesBuildIdValues = async (id: string,
    params?: GetAdminCustomFieldSettingsBundlesBuildIdValuesParams, options?: RequestInit): Promise<getAdminCustomFieldSettingsBundlesBuildIdValuesResponse> => {
  
  return customInstance<getAdminCustomFieldSettingsBundlesBuildIdValuesResponse>(getGetAdminCustomFieldSettingsBundlesBuildIdValuesUrl(id,params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type postAdminCustomFieldSettingsBundlesBuildIdValuesResponse200 = {
  data: BuildBundleElement
  status: 200
}
    
export type postAdminCustomFieldSettingsBundlesBuildIdValuesResponseComposite = postAdminCustomFieldSettingsBundlesBuildIdValuesResponse200;
    
export type postAdminCustomFieldSettingsBundlesBuildIdValuesResponse = postAdminCustomFieldSettingsBundlesBuildIdValuesResponseComposite & {
  headers: Headers;
}

export const getPostAdminCustomFieldSettingsBundlesBuildIdValuesUrl = (id: string,
    params?: PostAdminCustomFieldSettingsBundlesBuildIdValuesParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/admin/customFieldSettings/bundles/build/${id}/values?${stringifiedParams}` : `/admin/customFieldSettings/bundles/build/${id}/values`
}

export const postAdminCustomFieldSettingsBundlesBuildIdValues = async (id: string,
    buildBundleElement: NonReadonly<BuildBundleElement>,
    params?: PostAdminCustomFieldSettingsBundlesBuildIdValuesParams, options?: RequestInit): Promise<postAdminCustomFieldSettingsBundlesBuildIdValuesResponse> => {
  
  return customInstance<postAdminCustomFieldSettingsBundlesBuildIdValuesResponse>(getPostAdminCustomFieldSettingsBundlesBuildIdValuesUrl(id,params),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      buildBundleElement,)
  }
);}



export type getAdminCustomFieldSettingsBundlesBuildIdValuesBuildBundleElementIdResponse200 = {
  data: BuildBundleElement
  status: 200
}
    
export type getAdminCustomFieldSettingsBundlesBuildIdValuesBuildBundleElementIdResponseComposite = getAdminCustomFieldSettingsBundlesBuildIdValuesBuildBundleElementIdResponse200;
    
export type getAdminCustomFieldSettingsBundlesBuildIdValuesBuildBundleElementIdResponse = getAdminCustomFieldSettingsBundlesBuildIdValuesBuildBundleElementIdResponseComposite & {
  headers: Headers;
}

export const getGetAdminCustomFieldSettingsBundlesBuildIdValuesBuildBundleElementIdUrl = (id: string,
    buildBundleElementId: string,
    params?: GetAdminCustomFieldSettingsBundlesBuildIdValuesBuildBundleElementIdParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/admin/customFieldSettings/bundles/build/${id}/values/${buildBundleElementId}?${stringifiedParams}` : `/admin/customFieldSettings/bundles/build/${id}/values/${buildBundleElementId}`
}

export const getAdminCustomFieldSettingsBundlesBuildIdValuesBuildBundleElementId = async (id: string,
    buildBundleElementId: string,
    params?: GetAdminCustomFieldSettingsBundlesBuildIdValuesBuildBundleElementIdParams, options?: RequestInit): Promise<getAdminCustomFieldSettingsBundlesBuildIdValuesBuildBundleElementIdResponse> => {
  
  return customInstance<getAdminCustomFieldSettingsBundlesBuildIdValuesBuildBundleElementIdResponse>(getGetAdminCustomFieldSettingsBundlesBuildIdValuesBuildBundleElementIdUrl(id,buildBundleElementId,params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type postAdminCustomFieldSettingsBundlesBuildIdValuesBuildBundleElementIdResponse200 = {
  data: BuildBundleElement
  status: 200
}
    
export type postAdminCustomFieldSettingsBundlesBuildIdValuesBuildBundleElementIdResponseComposite = postAdminCustomFieldSettingsBundlesBuildIdValuesBuildBundleElementIdResponse200;
    
export type postAdminCustomFieldSettingsBundlesBuildIdValuesBuildBundleElementIdResponse = postAdminCustomFieldSettingsBundlesBuildIdValuesBuildBundleElementIdResponseComposite & {
  headers: Headers;
}

export const getPostAdminCustomFieldSettingsBundlesBuildIdValuesBuildBundleElementIdUrl = (id: string,
    buildBundleElementId: string,
    params?: PostAdminCustomFieldSettingsBundlesBuildIdValuesBuildBundleElementIdParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/admin/customFieldSettings/bundles/build/${id}/values/${buildBundleElementId}?${stringifiedParams}` : `/admin/customFieldSettings/bundles/build/${id}/values/${buildBundleElementId}`
}

export const postAdminCustomFieldSettingsBundlesBuildIdValuesBuildBundleElementId = async (id: string,
    buildBundleElementId: string,
    buildBundleElement: NonReadonly<BuildBundleElement>,
    params?: PostAdminCustomFieldSettingsBundlesBuildIdValuesBuildBundleElementIdParams, options?: RequestInit): Promise<postAdminCustomFieldSettingsBundlesBuildIdValuesBuildBundleElementIdResponse> => {
  
  return customInstance<postAdminCustomFieldSettingsBundlesBuildIdValuesBuildBundleElementIdResponse>(getPostAdminCustomFieldSettingsBundlesBuildIdValuesBuildBundleElementIdUrl(id,buildBundleElementId,params),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      buildBundleElement,)
  }
);}



export type deleteAdminCustomFieldSettingsBundlesBuildIdValuesBuildBundleElementIdResponse200 = {
  data: void
  status: 200
}
    
export type deleteAdminCustomFieldSettingsBundlesBuildIdValuesBuildBundleElementIdResponseComposite = deleteAdminCustomFieldSettingsBundlesBuildIdValuesBuildBundleElementIdResponse200;
    
export type deleteAdminCustomFieldSettingsBundlesBuildIdValuesBuildBundleElementIdResponse = deleteAdminCustomFieldSettingsBundlesBuildIdValuesBuildBundleElementIdResponseComposite & {
  headers: Headers;
}

export const getDeleteAdminCustomFieldSettingsBundlesBuildIdValuesBuildBundleElementIdUrl = (id: string,
    buildBundleElementId: string,) => {


  

  return `/admin/customFieldSettings/bundles/build/${id}/values/${buildBundleElementId}`
}

export const deleteAdminCustomFieldSettingsBundlesBuildIdValuesBuildBundleElementId = async (id: string,
    buildBundleElementId: string, options?: RequestInit): Promise<deleteAdminCustomFieldSettingsBundlesBuildIdValuesBuildBundleElementIdResponse> => {
  
  return customInstance<deleteAdminCustomFieldSettingsBundlesBuildIdValuesBuildBundleElementIdResponse>(getDeleteAdminCustomFieldSettingsBundlesBuildIdValuesBuildBundleElementIdUrl(id,buildBundleElementId),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
);}



export type getAdminCustomFieldSettingsBundlesEnumResponse200 = {
  data: EnumBundle[]
  status: 200
}
    
export type getAdminCustomFieldSettingsBundlesEnumResponseComposite = getAdminCustomFieldSettingsBundlesEnumResponse200;
    
export type getAdminCustomFieldSettingsBundlesEnumResponse = getAdminCustomFieldSettingsBundlesEnumResponseComposite & {
  headers: Headers;
}

export const getGetAdminCustomFieldSettingsBundlesEnumUrl = (params?: GetAdminCustomFieldSettingsBundlesEnumParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/admin/customFieldSettings/bundles/enum?${stringifiedParams}` : `/admin/customFieldSettings/bundles/enum`
}

export const getAdminCustomFieldSettingsBundlesEnum = async (params?: GetAdminCustomFieldSettingsBundlesEnumParams, options?: RequestInit): Promise<getAdminCustomFieldSettingsBundlesEnumResponse> => {
  
  return customInstance<getAdminCustomFieldSettingsBundlesEnumResponse>(getGetAdminCustomFieldSettingsBundlesEnumUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type postAdminCustomFieldSettingsBundlesEnumResponse200 = {
  data: EnumBundle
  status: 200
}
    
export type postAdminCustomFieldSettingsBundlesEnumResponseComposite = postAdminCustomFieldSettingsBundlesEnumResponse200;
    
export type postAdminCustomFieldSettingsBundlesEnumResponse = postAdminCustomFieldSettingsBundlesEnumResponseComposite & {
  headers: Headers;
}

export const getPostAdminCustomFieldSettingsBundlesEnumUrl = (params?: PostAdminCustomFieldSettingsBundlesEnumParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/admin/customFieldSettings/bundles/enum?${stringifiedParams}` : `/admin/customFieldSettings/bundles/enum`
}

export const postAdminCustomFieldSettingsBundlesEnum = async (enumBundle: NonReadonly<EnumBundle>,
    params?: PostAdminCustomFieldSettingsBundlesEnumParams, options?: RequestInit): Promise<postAdminCustomFieldSettingsBundlesEnumResponse> => {
  
  return customInstance<postAdminCustomFieldSettingsBundlesEnumResponse>(getPostAdminCustomFieldSettingsBundlesEnumUrl(params),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      enumBundle,)
  }
);}



export type getAdminCustomFieldSettingsBundlesEnumIdResponse200 = {
  data: EnumBundle
  status: 200
}
    
export type getAdminCustomFieldSettingsBundlesEnumIdResponseComposite = getAdminCustomFieldSettingsBundlesEnumIdResponse200;
    
export type getAdminCustomFieldSettingsBundlesEnumIdResponse = getAdminCustomFieldSettingsBundlesEnumIdResponseComposite & {
  headers: Headers;
}

export const getGetAdminCustomFieldSettingsBundlesEnumIdUrl = (id: string,
    params?: GetAdminCustomFieldSettingsBundlesEnumIdParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/admin/customFieldSettings/bundles/enum/${id}?${stringifiedParams}` : `/admin/customFieldSettings/bundles/enum/${id}`
}

export const getAdminCustomFieldSettingsBundlesEnumId = async (id: string,
    params?: GetAdminCustomFieldSettingsBundlesEnumIdParams, options?: RequestInit): Promise<getAdminCustomFieldSettingsBundlesEnumIdResponse> => {
  
  return customInstance<getAdminCustomFieldSettingsBundlesEnumIdResponse>(getGetAdminCustomFieldSettingsBundlesEnumIdUrl(id,params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type postAdminCustomFieldSettingsBundlesEnumIdResponse200 = {
  data: EnumBundle
  status: 200
}
    
export type postAdminCustomFieldSettingsBundlesEnumIdResponseComposite = postAdminCustomFieldSettingsBundlesEnumIdResponse200;
    
export type postAdminCustomFieldSettingsBundlesEnumIdResponse = postAdminCustomFieldSettingsBundlesEnumIdResponseComposite & {
  headers: Headers;
}

export const getPostAdminCustomFieldSettingsBundlesEnumIdUrl = (id: string,
    params?: PostAdminCustomFieldSettingsBundlesEnumIdParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/admin/customFieldSettings/bundles/enum/${id}?${stringifiedParams}` : `/admin/customFieldSettings/bundles/enum/${id}`
}

export const postAdminCustomFieldSettingsBundlesEnumId = async (id: string,
    enumBundle: NonReadonly<EnumBundle>,
    params?: PostAdminCustomFieldSettingsBundlesEnumIdParams, options?: RequestInit): Promise<postAdminCustomFieldSettingsBundlesEnumIdResponse> => {
  
  return customInstance<postAdminCustomFieldSettingsBundlesEnumIdResponse>(getPostAdminCustomFieldSettingsBundlesEnumIdUrl(id,params),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      enumBundle,)
  }
);}



export type deleteAdminCustomFieldSettingsBundlesEnumIdResponse200 = {
  data: void
  status: 200
}
    
export type deleteAdminCustomFieldSettingsBundlesEnumIdResponseComposite = deleteAdminCustomFieldSettingsBundlesEnumIdResponse200;
    
export type deleteAdminCustomFieldSettingsBundlesEnumIdResponse = deleteAdminCustomFieldSettingsBundlesEnumIdResponseComposite & {
  headers: Headers;
}

export const getDeleteAdminCustomFieldSettingsBundlesEnumIdUrl = (id: string,) => {


  

  return `/admin/customFieldSettings/bundles/enum/${id}`
}

export const deleteAdminCustomFieldSettingsBundlesEnumId = async (id: string, options?: RequestInit): Promise<deleteAdminCustomFieldSettingsBundlesEnumIdResponse> => {
  
  return customInstance<deleteAdminCustomFieldSettingsBundlesEnumIdResponse>(getDeleteAdminCustomFieldSettingsBundlesEnumIdUrl(id),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
);}



export type getAdminCustomFieldSettingsBundlesEnumIdValuesResponse200 = {
  data: EnumBundleElement[]
  status: 200
}
    
export type getAdminCustomFieldSettingsBundlesEnumIdValuesResponseComposite = getAdminCustomFieldSettingsBundlesEnumIdValuesResponse200;
    
export type getAdminCustomFieldSettingsBundlesEnumIdValuesResponse = getAdminCustomFieldSettingsBundlesEnumIdValuesResponseComposite & {
  headers: Headers;
}

export const getGetAdminCustomFieldSettingsBundlesEnumIdValuesUrl = (id: string,
    params?: GetAdminCustomFieldSettingsBundlesEnumIdValuesParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/admin/customFieldSettings/bundles/enum/${id}/values?${stringifiedParams}` : `/admin/customFieldSettings/bundles/enum/${id}/values`
}

export const getAdminCustomFieldSettingsBundlesEnumIdValues = async (id: string,
    params?: GetAdminCustomFieldSettingsBundlesEnumIdValuesParams, options?: RequestInit): Promise<getAdminCustomFieldSettingsBundlesEnumIdValuesResponse> => {
  
  return customInstance<getAdminCustomFieldSettingsBundlesEnumIdValuesResponse>(getGetAdminCustomFieldSettingsBundlesEnumIdValuesUrl(id,params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type postAdminCustomFieldSettingsBundlesEnumIdValuesResponse200 = {
  data: EnumBundleElement
  status: 200
}
    
export type postAdminCustomFieldSettingsBundlesEnumIdValuesResponseComposite = postAdminCustomFieldSettingsBundlesEnumIdValuesResponse200;
    
export type postAdminCustomFieldSettingsBundlesEnumIdValuesResponse = postAdminCustomFieldSettingsBundlesEnumIdValuesResponseComposite & {
  headers: Headers;
}

export const getPostAdminCustomFieldSettingsBundlesEnumIdValuesUrl = (id: string,
    params?: PostAdminCustomFieldSettingsBundlesEnumIdValuesParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/admin/customFieldSettings/bundles/enum/${id}/values?${stringifiedParams}` : `/admin/customFieldSettings/bundles/enum/${id}/values`
}

export const postAdminCustomFieldSettingsBundlesEnumIdValues = async (id: string,
    enumBundleElement: NonReadonly<EnumBundleElement>,
    params?: PostAdminCustomFieldSettingsBundlesEnumIdValuesParams, options?: RequestInit): Promise<postAdminCustomFieldSettingsBundlesEnumIdValuesResponse> => {
  
  return customInstance<postAdminCustomFieldSettingsBundlesEnumIdValuesResponse>(getPostAdminCustomFieldSettingsBundlesEnumIdValuesUrl(id,params),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      enumBundleElement,)
  }
);}



export type getAdminCustomFieldSettingsBundlesEnumIdValuesEnumBundleElementIdResponse200 = {
  data: EnumBundleElement
  status: 200
}
    
export type getAdminCustomFieldSettingsBundlesEnumIdValuesEnumBundleElementIdResponseComposite = getAdminCustomFieldSettingsBundlesEnumIdValuesEnumBundleElementIdResponse200;
    
export type getAdminCustomFieldSettingsBundlesEnumIdValuesEnumBundleElementIdResponse = getAdminCustomFieldSettingsBundlesEnumIdValuesEnumBundleElementIdResponseComposite & {
  headers: Headers;
}

export const getGetAdminCustomFieldSettingsBundlesEnumIdValuesEnumBundleElementIdUrl = (id: string,
    enumBundleElementId: string,
    params?: GetAdminCustomFieldSettingsBundlesEnumIdValuesEnumBundleElementIdParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/admin/customFieldSettings/bundles/enum/${id}/values/${enumBundleElementId}?${stringifiedParams}` : `/admin/customFieldSettings/bundles/enum/${id}/values/${enumBundleElementId}`
}

export const getAdminCustomFieldSettingsBundlesEnumIdValuesEnumBundleElementId = async (id: string,
    enumBundleElementId: string,
    params?: GetAdminCustomFieldSettingsBundlesEnumIdValuesEnumBundleElementIdParams, options?: RequestInit): Promise<getAdminCustomFieldSettingsBundlesEnumIdValuesEnumBundleElementIdResponse> => {
  
  return customInstance<getAdminCustomFieldSettingsBundlesEnumIdValuesEnumBundleElementIdResponse>(getGetAdminCustomFieldSettingsBundlesEnumIdValuesEnumBundleElementIdUrl(id,enumBundleElementId,params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type postAdminCustomFieldSettingsBundlesEnumIdValuesEnumBundleElementIdResponse200 = {
  data: EnumBundleElement
  status: 200
}
    
export type postAdminCustomFieldSettingsBundlesEnumIdValuesEnumBundleElementIdResponseComposite = postAdminCustomFieldSettingsBundlesEnumIdValuesEnumBundleElementIdResponse200;
    
export type postAdminCustomFieldSettingsBundlesEnumIdValuesEnumBundleElementIdResponse = postAdminCustomFieldSettingsBundlesEnumIdValuesEnumBundleElementIdResponseComposite & {
  headers: Headers;
}

export const getPostAdminCustomFieldSettingsBundlesEnumIdValuesEnumBundleElementIdUrl = (id: string,
    enumBundleElementId: string,
    params?: PostAdminCustomFieldSettingsBundlesEnumIdValuesEnumBundleElementIdParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/admin/customFieldSettings/bundles/enum/${id}/values/${enumBundleElementId}?${stringifiedParams}` : `/admin/customFieldSettings/bundles/enum/${id}/values/${enumBundleElementId}`
}

export const postAdminCustomFieldSettingsBundlesEnumIdValuesEnumBundleElementId = async (id: string,
    enumBundleElementId: string,
    enumBundleElement: NonReadonly<EnumBundleElement>,
    params?: PostAdminCustomFieldSettingsBundlesEnumIdValuesEnumBundleElementIdParams, options?: RequestInit): Promise<postAdminCustomFieldSettingsBundlesEnumIdValuesEnumBundleElementIdResponse> => {
  
  return customInstance<postAdminCustomFieldSettingsBundlesEnumIdValuesEnumBundleElementIdResponse>(getPostAdminCustomFieldSettingsBundlesEnumIdValuesEnumBundleElementIdUrl(id,enumBundleElementId,params),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      enumBundleElement,)
  }
);}



export type deleteAdminCustomFieldSettingsBundlesEnumIdValuesEnumBundleElementIdResponse200 = {
  data: void
  status: 200
}
    
export type deleteAdminCustomFieldSettingsBundlesEnumIdValuesEnumBundleElementIdResponseComposite = deleteAdminCustomFieldSettingsBundlesEnumIdValuesEnumBundleElementIdResponse200;
    
export type deleteAdminCustomFieldSettingsBundlesEnumIdValuesEnumBundleElementIdResponse = deleteAdminCustomFieldSettingsBundlesEnumIdValuesEnumBundleElementIdResponseComposite & {
  headers: Headers;
}

export const getDeleteAdminCustomFieldSettingsBundlesEnumIdValuesEnumBundleElementIdUrl = (id: string,
    enumBundleElementId: string,) => {


  

  return `/admin/customFieldSettings/bundles/enum/${id}/values/${enumBundleElementId}`
}

export const deleteAdminCustomFieldSettingsBundlesEnumIdValuesEnumBundleElementId = async (id: string,
    enumBundleElementId: string, options?: RequestInit): Promise<deleteAdminCustomFieldSettingsBundlesEnumIdValuesEnumBundleElementIdResponse> => {
  
  return customInstance<deleteAdminCustomFieldSettingsBundlesEnumIdValuesEnumBundleElementIdResponse>(getDeleteAdminCustomFieldSettingsBundlesEnumIdValuesEnumBundleElementIdUrl(id,enumBundleElementId),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
);}



export type getAdminCustomFieldSettingsBundlesOwnedFieldResponse200 = {
  data: OwnedBundle[]
  status: 200
}
    
export type getAdminCustomFieldSettingsBundlesOwnedFieldResponseComposite = getAdminCustomFieldSettingsBundlesOwnedFieldResponse200;
    
export type getAdminCustomFieldSettingsBundlesOwnedFieldResponse = getAdminCustomFieldSettingsBundlesOwnedFieldResponseComposite & {
  headers: Headers;
}

export const getGetAdminCustomFieldSettingsBundlesOwnedFieldUrl = (params?: GetAdminCustomFieldSettingsBundlesOwnedFieldParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/admin/customFieldSettings/bundles/ownedField?${stringifiedParams}` : `/admin/customFieldSettings/bundles/ownedField`
}

export const getAdminCustomFieldSettingsBundlesOwnedField = async (params?: GetAdminCustomFieldSettingsBundlesOwnedFieldParams, options?: RequestInit): Promise<getAdminCustomFieldSettingsBundlesOwnedFieldResponse> => {
  
  return customInstance<getAdminCustomFieldSettingsBundlesOwnedFieldResponse>(getGetAdminCustomFieldSettingsBundlesOwnedFieldUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type postAdminCustomFieldSettingsBundlesOwnedFieldResponse200 = {
  data: OwnedBundle
  status: 200
}
    
export type postAdminCustomFieldSettingsBundlesOwnedFieldResponseComposite = postAdminCustomFieldSettingsBundlesOwnedFieldResponse200;
    
export type postAdminCustomFieldSettingsBundlesOwnedFieldResponse = postAdminCustomFieldSettingsBundlesOwnedFieldResponseComposite & {
  headers: Headers;
}

export const getPostAdminCustomFieldSettingsBundlesOwnedFieldUrl = (params?: PostAdminCustomFieldSettingsBundlesOwnedFieldParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/admin/customFieldSettings/bundles/ownedField?${stringifiedParams}` : `/admin/customFieldSettings/bundles/ownedField`
}

export const postAdminCustomFieldSettingsBundlesOwnedField = async (ownedBundle: NonReadonly<OwnedBundle>,
    params?: PostAdminCustomFieldSettingsBundlesOwnedFieldParams, options?: RequestInit): Promise<postAdminCustomFieldSettingsBundlesOwnedFieldResponse> => {
  
  return customInstance<postAdminCustomFieldSettingsBundlesOwnedFieldResponse>(getPostAdminCustomFieldSettingsBundlesOwnedFieldUrl(params),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      ownedBundle,)
  }
);}



export type getAdminCustomFieldSettingsBundlesOwnedFieldIdResponse200 = {
  data: OwnedBundle
  status: 200
}
    
export type getAdminCustomFieldSettingsBundlesOwnedFieldIdResponseComposite = getAdminCustomFieldSettingsBundlesOwnedFieldIdResponse200;
    
export type getAdminCustomFieldSettingsBundlesOwnedFieldIdResponse = getAdminCustomFieldSettingsBundlesOwnedFieldIdResponseComposite & {
  headers: Headers;
}

export const getGetAdminCustomFieldSettingsBundlesOwnedFieldIdUrl = (id: string,
    params?: GetAdminCustomFieldSettingsBundlesOwnedFieldIdParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/admin/customFieldSettings/bundles/ownedField/${id}?${stringifiedParams}` : `/admin/customFieldSettings/bundles/ownedField/${id}`
}

export const getAdminCustomFieldSettingsBundlesOwnedFieldId = async (id: string,
    params?: GetAdminCustomFieldSettingsBundlesOwnedFieldIdParams, options?: RequestInit): Promise<getAdminCustomFieldSettingsBundlesOwnedFieldIdResponse> => {
  
  return customInstance<getAdminCustomFieldSettingsBundlesOwnedFieldIdResponse>(getGetAdminCustomFieldSettingsBundlesOwnedFieldIdUrl(id,params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type postAdminCustomFieldSettingsBundlesOwnedFieldIdResponse200 = {
  data: OwnedBundle
  status: 200
}
    
export type postAdminCustomFieldSettingsBundlesOwnedFieldIdResponseComposite = postAdminCustomFieldSettingsBundlesOwnedFieldIdResponse200;
    
export type postAdminCustomFieldSettingsBundlesOwnedFieldIdResponse = postAdminCustomFieldSettingsBundlesOwnedFieldIdResponseComposite & {
  headers: Headers;
}

export const getPostAdminCustomFieldSettingsBundlesOwnedFieldIdUrl = (id: string,
    params?: PostAdminCustomFieldSettingsBundlesOwnedFieldIdParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/admin/customFieldSettings/bundles/ownedField/${id}?${stringifiedParams}` : `/admin/customFieldSettings/bundles/ownedField/${id}`
}

export const postAdminCustomFieldSettingsBundlesOwnedFieldId = async (id: string,
    ownedBundle: NonReadonly<OwnedBundle>,
    params?: PostAdminCustomFieldSettingsBundlesOwnedFieldIdParams, options?: RequestInit): Promise<postAdminCustomFieldSettingsBundlesOwnedFieldIdResponse> => {
  
  return customInstance<postAdminCustomFieldSettingsBundlesOwnedFieldIdResponse>(getPostAdminCustomFieldSettingsBundlesOwnedFieldIdUrl(id,params),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      ownedBundle,)
  }
);}



export type deleteAdminCustomFieldSettingsBundlesOwnedFieldIdResponse200 = {
  data: void
  status: 200
}
    
export type deleteAdminCustomFieldSettingsBundlesOwnedFieldIdResponseComposite = deleteAdminCustomFieldSettingsBundlesOwnedFieldIdResponse200;
    
export type deleteAdminCustomFieldSettingsBundlesOwnedFieldIdResponse = deleteAdminCustomFieldSettingsBundlesOwnedFieldIdResponseComposite & {
  headers: Headers;
}

export const getDeleteAdminCustomFieldSettingsBundlesOwnedFieldIdUrl = (id: string,) => {


  

  return `/admin/customFieldSettings/bundles/ownedField/${id}`
}

export const deleteAdminCustomFieldSettingsBundlesOwnedFieldId = async (id: string, options?: RequestInit): Promise<deleteAdminCustomFieldSettingsBundlesOwnedFieldIdResponse> => {
  
  return customInstance<deleteAdminCustomFieldSettingsBundlesOwnedFieldIdResponse>(getDeleteAdminCustomFieldSettingsBundlesOwnedFieldIdUrl(id),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
);}



export type getAdminCustomFieldSettingsBundlesOwnedFieldIdValuesResponse200 = {
  data: OwnedBundleElement[]
  status: 200
}
    
export type getAdminCustomFieldSettingsBundlesOwnedFieldIdValuesResponseComposite = getAdminCustomFieldSettingsBundlesOwnedFieldIdValuesResponse200;
    
export type getAdminCustomFieldSettingsBundlesOwnedFieldIdValuesResponse = getAdminCustomFieldSettingsBundlesOwnedFieldIdValuesResponseComposite & {
  headers: Headers;
}

export const getGetAdminCustomFieldSettingsBundlesOwnedFieldIdValuesUrl = (id: string,
    params?: GetAdminCustomFieldSettingsBundlesOwnedFieldIdValuesParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/admin/customFieldSettings/bundles/ownedField/${id}/values?${stringifiedParams}` : `/admin/customFieldSettings/bundles/ownedField/${id}/values`
}

export const getAdminCustomFieldSettingsBundlesOwnedFieldIdValues = async (id: string,
    params?: GetAdminCustomFieldSettingsBundlesOwnedFieldIdValuesParams, options?: RequestInit): Promise<getAdminCustomFieldSettingsBundlesOwnedFieldIdValuesResponse> => {
  
  return customInstance<getAdminCustomFieldSettingsBundlesOwnedFieldIdValuesResponse>(getGetAdminCustomFieldSettingsBundlesOwnedFieldIdValuesUrl(id,params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type postAdminCustomFieldSettingsBundlesOwnedFieldIdValuesResponse200 = {
  data: OwnedBundleElement
  status: 200
}
    
export type postAdminCustomFieldSettingsBundlesOwnedFieldIdValuesResponseComposite = postAdminCustomFieldSettingsBundlesOwnedFieldIdValuesResponse200;
    
export type postAdminCustomFieldSettingsBundlesOwnedFieldIdValuesResponse = postAdminCustomFieldSettingsBundlesOwnedFieldIdValuesResponseComposite & {
  headers: Headers;
}

export const getPostAdminCustomFieldSettingsBundlesOwnedFieldIdValuesUrl = (id: string,
    params?: PostAdminCustomFieldSettingsBundlesOwnedFieldIdValuesParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/admin/customFieldSettings/bundles/ownedField/${id}/values?${stringifiedParams}` : `/admin/customFieldSettings/bundles/ownedField/${id}/values`
}

export const postAdminCustomFieldSettingsBundlesOwnedFieldIdValues = async (id: string,
    ownedBundleElement: NonReadonly<OwnedBundleElement>,
    params?: PostAdminCustomFieldSettingsBundlesOwnedFieldIdValuesParams, options?: RequestInit): Promise<postAdminCustomFieldSettingsBundlesOwnedFieldIdValuesResponse> => {
  
  return customInstance<postAdminCustomFieldSettingsBundlesOwnedFieldIdValuesResponse>(getPostAdminCustomFieldSettingsBundlesOwnedFieldIdValuesUrl(id,params),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      ownedBundleElement,)
  }
);}



export type getAdminCustomFieldSettingsBundlesOwnedFieldIdValuesOwnedBundleElementIdResponse200 = {
  data: OwnedBundleElement
  status: 200
}
    
export type getAdminCustomFieldSettingsBundlesOwnedFieldIdValuesOwnedBundleElementIdResponseComposite = getAdminCustomFieldSettingsBundlesOwnedFieldIdValuesOwnedBundleElementIdResponse200;
    
export type getAdminCustomFieldSettingsBundlesOwnedFieldIdValuesOwnedBundleElementIdResponse = getAdminCustomFieldSettingsBundlesOwnedFieldIdValuesOwnedBundleElementIdResponseComposite & {
  headers: Headers;
}

export const getGetAdminCustomFieldSettingsBundlesOwnedFieldIdValuesOwnedBundleElementIdUrl = (id: string,
    ownedBundleElementId: string,
    params?: GetAdminCustomFieldSettingsBundlesOwnedFieldIdValuesOwnedBundleElementIdParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/admin/customFieldSettings/bundles/ownedField/${id}/values/${ownedBundleElementId}?${stringifiedParams}` : `/admin/customFieldSettings/bundles/ownedField/${id}/values/${ownedBundleElementId}`
}

export const getAdminCustomFieldSettingsBundlesOwnedFieldIdValuesOwnedBundleElementId = async (id: string,
    ownedBundleElementId: string,
    params?: GetAdminCustomFieldSettingsBundlesOwnedFieldIdValuesOwnedBundleElementIdParams, options?: RequestInit): Promise<getAdminCustomFieldSettingsBundlesOwnedFieldIdValuesOwnedBundleElementIdResponse> => {
  
  return customInstance<getAdminCustomFieldSettingsBundlesOwnedFieldIdValuesOwnedBundleElementIdResponse>(getGetAdminCustomFieldSettingsBundlesOwnedFieldIdValuesOwnedBundleElementIdUrl(id,ownedBundleElementId,params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type postAdminCustomFieldSettingsBundlesOwnedFieldIdValuesOwnedBundleElementIdResponse200 = {
  data: OwnedBundleElement
  status: 200
}
    
export type postAdminCustomFieldSettingsBundlesOwnedFieldIdValuesOwnedBundleElementIdResponseComposite = postAdminCustomFieldSettingsBundlesOwnedFieldIdValuesOwnedBundleElementIdResponse200;
    
export type postAdminCustomFieldSettingsBundlesOwnedFieldIdValuesOwnedBundleElementIdResponse = postAdminCustomFieldSettingsBundlesOwnedFieldIdValuesOwnedBundleElementIdResponseComposite & {
  headers: Headers;
}

export const getPostAdminCustomFieldSettingsBundlesOwnedFieldIdValuesOwnedBundleElementIdUrl = (id: string,
    ownedBundleElementId: string,
    params?: PostAdminCustomFieldSettingsBundlesOwnedFieldIdValuesOwnedBundleElementIdParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/admin/customFieldSettings/bundles/ownedField/${id}/values/${ownedBundleElementId}?${stringifiedParams}` : `/admin/customFieldSettings/bundles/ownedField/${id}/values/${ownedBundleElementId}`
}

export const postAdminCustomFieldSettingsBundlesOwnedFieldIdValuesOwnedBundleElementId = async (id: string,
    ownedBundleElementId: string,
    ownedBundleElement: NonReadonly<OwnedBundleElement>,
    params?: PostAdminCustomFieldSettingsBundlesOwnedFieldIdValuesOwnedBundleElementIdParams, options?: RequestInit): Promise<postAdminCustomFieldSettingsBundlesOwnedFieldIdValuesOwnedBundleElementIdResponse> => {
  
  return customInstance<postAdminCustomFieldSettingsBundlesOwnedFieldIdValuesOwnedBundleElementIdResponse>(getPostAdminCustomFieldSettingsBundlesOwnedFieldIdValuesOwnedBundleElementIdUrl(id,ownedBundleElementId,params),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      ownedBundleElement,)
  }
);}



export type deleteAdminCustomFieldSettingsBundlesOwnedFieldIdValuesOwnedBundleElementIdResponse200 = {
  data: void
  status: 200
}
    
export type deleteAdminCustomFieldSettingsBundlesOwnedFieldIdValuesOwnedBundleElementIdResponseComposite = deleteAdminCustomFieldSettingsBundlesOwnedFieldIdValuesOwnedBundleElementIdResponse200;
    
export type deleteAdminCustomFieldSettingsBundlesOwnedFieldIdValuesOwnedBundleElementIdResponse = deleteAdminCustomFieldSettingsBundlesOwnedFieldIdValuesOwnedBundleElementIdResponseComposite & {
  headers: Headers;
}

export const getDeleteAdminCustomFieldSettingsBundlesOwnedFieldIdValuesOwnedBundleElementIdUrl = (id: string,
    ownedBundleElementId: string,) => {


  

  return `/admin/customFieldSettings/bundles/ownedField/${id}/values/${ownedBundleElementId}`
}

export const deleteAdminCustomFieldSettingsBundlesOwnedFieldIdValuesOwnedBundleElementId = async (id: string,
    ownedBundleElementId: string, options?: RequestInit): Promise<deleteAdminCustomFieldSettingsBundlesOwnedFieldIdValuesOwnedBundleElementIdResponse> => {
  
  return customInstance<deleteAdminCustomFieldSettingsBundlesOwnedFieldIdValuesOwnedBundleElementIdResponse>(getDeleteAdminCustomFieldSettingsBundlesOwnedFieldIdValuesOwnedBundleElementIdUrl(id,ownedBundleElementId),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
);}



export type getAdminCustomFieldSettingsBundlesStateResponse200 = {
  data: StateBundle[]
  status: 200
}
    
export type getAdminCustomFieldSettingsBundlesStateResponseComposite = getAdminCustomFieldSettingsBundlesStateResponse200;
    
export type getAdminCustomFieldSettingsBundlesStateResponse = getAdminCustomFieldSettingsBundlesStateResponseComposite & {
  headers: Headers;
}

export const getGetAdminCustomFieldSettingsBundlesStateUrl = (params?: GetAdminCustomFieldSettingsBundlesStateParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/admin/customFieldSettings/bundles/state?${stringifiedParams}` : `/admin/customFieldSettings/bundles/state`
}

export const getAdminCustomFieldSettingsBundlesState = async (params?: GetAdminCustomFieldSettingsBundlesStateParams, options?: RequestInit): Promise<getAdminCustomFieldSettingsBundlesStateResponse> => {
  
  return customInstance<getAdminCustomFieldSettingsBundlesStateResponse>(getGetAdminCustomFieldSettingsBundlesStateUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type postAdminCustomFieldSettingsBundlesStateResponse200 = {
  data: StateBundle
  status: 200
}
    
export type postAdminCustomFieldSettingsBundlesStateResponseComposite = postAdminCustomFieldSettingsBundlesStateResponse200;
    
export type postAdminCustomFieldSettingsBundlesStateResponse = postAdminCustomFieldSettingsBundlesStateResponseComposite & {
  headers: Headers;
}

export const getPostAdminCustomFieldSettingsBundlesStateUrl = (params?: PostAdminCustomFieldSettingsBundlesStateParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/admin/customFieldSettings/bundles/state?${stringifiedParams}` : `/admin/customFieldSettings/bundles/state`
}

export const postAdminCustomFieldSettingsBundlesState = async (stateBundle: NonReadonly<StateBundle>,
    params?: PostAdminCustomFieldSettingsBundlesStateParams, options?: RequestInit): Promise<postAdminCustomFieldSettingsBundlesStateResponse> => {
  
  return customInstance<postAdminCustomFieldSettingsBundlesStateResponse>(getPostAdminCustomFieldSettingsBundlesStateUrl(params),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      stateBundle,)
  }
);}



export type getAdminCustomFieldSettingsBundlesStateIdResponse200 = {
  data: StateBundle
  status: 200
}
    
export type getAdminCustomFieldSettingsBundlesStateIdResponseComposite = getAdminCustomFieldSettingsBundlesStateIdResponse200;
    
export type getAdminCustomFieldSettingsBundlesStateIdResponse = getAdminCustomFieldSettingsBundlesStateIdResponseComposite & {
  headers: Headers;
}

export const getGetAdminCustomFieldSettingsBundlesStateIdUrl = (id: string,
    params?: GetAdminCustomFieldSettingsBundlesStateIdParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/admin/customFieldSettings/bundles/state/${id}?${stringifiedParams}` : `/admin/customFieldSettings/bundles/state/${id}`
}

export const getAdminCustomFieldSettingsBundlesStateId = async (id: string,
    params?: GetAdminCustomFieldSettingsBundlesStateIdParams, options?: RequestInit): Promise<getAdminCustomFieldSettingsBundlesStateIdResponse> => {
  
  return customInstance<getAdminCustomFieldSettingsBundlesStateIdResponse>(getGetAdminCustomFieldSettingsBundlesStateIdUrl(id,params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type postAdminCustomFieldSettingsBundlesStateIdResponse200 = {
  data: StateBundle
  status: 200
}
    
export type postAdminCustomFieldSettingsBundlesStateIdResponseComposite = postAdminCustomFieldSettingsBundlesStateIdResponse200;
    
export type postAdminCustomFieldSettingsBundlesStateIdResponse = postAdminCustomFieldSettingsBundlesStateIdResponseComposite & {
  headers: Headers;
}

export const getPostAdminCustomFieldSettingsBundlesStateIdUrl = (id: string,
    params?: PostAdminCustomFieldSettingsBundlesStateIdParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/admin/customFieldSettings/bundles/state/${id}?${stringifiedParams}` : `/admin/customFieldSettings/bundles/state/${id}`
}

export const postAdminCustomFieldSettingsBundlesStateId = async (id: string,
    stateBundle: NonReadonly<StateBundle>,
    params?: PostAdminCustomFieldSettingsBundlesStateIdParams, options?: RequestInit): Promise<postAdminCustomFieldSettingsBundlesStateIdResponse> => {
  
  return customInstance<postAdminCustomFieldSettingsBundlesStateIdResponse>(getPostAdminCustomFieldSettingsBundlesStateIdUrl(id,params),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      stateBundle,)
  }
);}



export type deleteAdminCustomFieldSettingsBundlesStateIdResponse200 = {
  data: void
  status: 200
}
    
export type deleteAdminCustomFieldSettingsBundlesStateIdResponseComposite = deleteAdminCustomFieldSettingsBundlesStateIdResponse200;
    
export type deleteAdminCustomFieldSettingsBundlesStateIdResponse = deleteAdminCustomFieldSettingsBundlesStateIdResponseComposite & {
  headers: Headers;
}

export const getDeleteAdminCustomFieldSettingsBundlesStateIdUrl = (id: string,) => {


  

  return `/admin/customFieldSettings/bundles/state/${id}`
}

export const deleteAdminCustomFieldSettingsBundlesStateId = async (id: string, options?: RequestInit): Promise<deleteAdminCustomFieldSettingsBundlesStateIdResponse> => {
  
  return customInstance<deleteAdminCustomFieldSettingsBundlesStateIdResponse>(getDeleteAdminCustomFieldSettingsBundlesStateIdUrl(id),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
);}



export type getAdminCustomFieldSettingsBundlesStateIdValuesResponse200 = {
  data: StateBundleElement[]
  status: 200
}
    
export type getAdminCustomFieldSettingsBundlesStateIdValuesResponseComposite = getAdminCustomFieldSettingsBundlesStateIdValuesResponse200;
    
export type getAdminCustomFieldSettingsBundlesStateIdValuesResponse = getAdminCustomFieldSettingsBundlesStateIdValuesResponseComposite & {
  headers: Headers;
}

export const getGetAdminCustomFieldSettingsBundlesStateIdValuesUrl = (id: string,
    params?: GetAdminCustomFieldSettingsBundlesStateIdValuesParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/admin/customFieldSettings/bundles/state/${id}/values?${stringifiedParams}` : `/admin/customFieldSettings/bundles/state/${id}/values`
}

export const getAdminCustomFieldSettingsBundlesStateIdValues = async (id: string,
    params?: GetAdminCustomFieldSettingsBundlesStateIdValuesParams, options?: RequestInit): Promise<getAdminCustomFieldSettingsBundlesStateIdValuesResponse> => {
  
  return customInstance<getAdminCustomFieldSettingsBundlesStateIdValuesResponse>(getGetAdminCustomFieldSettingsBundlesStateIdValuesUrl(id,params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type postAdminCustomFieldSettingsBundlesStateIdValuesResponse200 = {
  data: StateBundleElement
  status: 200
}
    
export type postAdminCustomFieldSettingsBundlesStateIdValuesResponseComposite = postAdminCustomFieldSettingsBundlesStateIdValuesResponse200;
    
export type postAdminCustomFieldSettingsBundlesStateIdValuesResponse = postAdminCustomFieldSettingsBundlesStateIdValuesResponseComposite & {
  headers: Headers;
}

export const getPostAdminCustomFieldSettingsBundlesStateIdValuesUrl = (id: string,
    params?: PostAdminCustomFieldSettingsBundlesStateIdValuesParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/admin/customFieldSettings/bundles/state/${id}/values?${stringifiedParams}` : `/admin/customFieldSettings/bundles/state/${id}/values`
}

export const postAdminCustomFieldSettingsBundlesStateIdValues = async (id: string,
    stateBundleElement: NonReadonly<StateBundleElement>,
    params?: PostAdminCustomFieldSettingsBundlesStateIdValuesParams, options?: RequestInit): Promise<postAdminCustomFieldSettingsBundlesStateIdValuesResponse> => {
  
  return customInstance<postAdminCustomFieldSettingsBundlesStateIdValuesResponse>(getPostAdminCustomFieldSettingsBundlesStateIdValuesUrl(id,params),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      stateBundleElement,)
  }
);}



export type getAdminCustomFieldSettingsBundlesStateIdValuesStateBundleElementIdResponse200 = {
  data: StateBundleElement
  status: 200
}
    
export type getAdminCustomFieldSettingsBundlesStateIdValuesStateBundleElementIdResponseComposite = getAdminCustomFieldSettingsBundlesStateIdValuesStateBundleElementIdResponse200;
    
export type getAdminCustomFieldSettingsBundlesStateIdValuesStateBundleElementIdResponse = getAdminCustomFieldSettingsBundlesStateIdValuesStateBundleElementIdResponseComposite & {
  headers: Headers;
}

export const getGetAdminCustomFieldSettingsBundlesStateIdValuesStateBundleElementIdUrl = (id: string,
    stateBundleElementId: string,
    params?: GetAdminCustomFieldSettingsBundlesStateIdValuesStateBundleElementIdParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/admin/customFieldSettings/bundles/state/${id}/values/${stateBundleElementId}?${stringifiedParams}` : `/admin/customFieldSettings/bundles/state/${id}/values/${stateBundleElementId}`
}

export const getAdminCustomFieldSettingsBundlesStateIdValuesStateBundleElementId = async (id: string,
    stateBundleElementId: string,
    params?: GetAdminCustomFieldSettingsBundlesStateIdValuesStateBundleElementIdParams, options?: RequestInit): Promise<getAdminCustomFieldSettingsBundlesStateIdValuesStateBundleElementIdResponse> => {
  
  return customInstance<getAdminCustomFieldSettingsBundlesStateIdValuesStateBundleElementIdResponse>(getGetAdminCustomFieldSettingsBundlesStateIdValuesStateBundleElementIdUrl(id,stateBundleElementId,params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type postAdminCustomFieldSettingsBundlesStateIdValuesStateBundleElementIdResponse200 = {
  data: StateBundleElement
  status: 200
}
    
export type postAdminCustomFieldSettingsBundlesStateIdValuesStateBundleElementIdResponseComposite = postAdminCustomFieldSettingsBundlesStateIdValuesStateBundleElementIdResponse200;
    
export type postAdminCustomFieldSettingsBundlesStateIdValuesStateBundleElementIdResponse = postAdminCustomFieldSettingsBundlesStateIdValuesStateBundleElementIdResponseComposite & {
  headers: Headers;
}

export const getPostAdminCustomFieldSettingsBundlesStateIdValuesStateBundleElementIdUrl = (id: string,
    stateBundleElementId: string,
    params?: PostAdminCustomFieldSettingsBundlesStateIdValuesStateBundleElementIdParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/admin/customFieldSettings/bundles/state/${id}/values/${stateBundleElementId}?${stringifiedParams}` : `/admin/customFieldSettings/bundles/state/${id}/values/${stateBundleElementId}`
}

export const postAdminCustomFieldSettingsBundlesStateIdValuesStateBundleElementId = async (id: string,
    stateBundleElementId: string,
    stateBundleElement: NonReadonly<StateBundleElement>,
    params?: PostAdminCustomFieldSettingsBundlesStateIdValuesStateBundleElementIdParams, options?: RequestInit): Promise<postAdminCustomFieldSettingsBundlesStateIdValuesStateBundleElementIdResponse> => {
  
  return customInstance<postAdminCustomFieldSettingsBundlesStateIdValuesStateBundleElementIdResponse>(getPostAdminCustomFieldSettingsBundlesStateIdValuesStateBundleElementIdUrl(id,stateBundleElementId,params),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      stateBundleElement,)
  }
);}



export type deleteAdminCustomFieldSettingsBundlesStateIdValuesStateBundleElementIdResponse200 = {
  data: void
  status: 200
}
    
export type deleteAdminCustomFieldSettingsBundlesStateIdValuesStateBundleElementIdResponseComposite = deleteAdminCustomFieldSettingsBundlesStateIdValuesStateBundleElementIdResponse200;
    
export type deleteAdminCustomFieldSettingsBundlesStateIdValuesStateBundleElementIdResponse = deleteAdminCustomFieldSettingsBundlesStateIdValuesStateBundleElementIdResponseComposite & {
  headers: Headers;
}

export const getDeleteAdminCustomFieldSettingsBundlesStateIdValuesStateBundleElementIdUrl = (id: string,
    stateBundleElementId: string,) => {


  

  return `/admin/customFieldSettings/bundles/state/${id}/values/${stateBundleElementId}`
}

export const deleteAdminCustomFieldSettingsBundlesStateIdValuesStateBundleElementId = async (id: string,
    stateBundleElementId: string, options?: RequestInit): Promise<deleteAdminCustomFieldSettingsBundlesStateIdValuesStateBundleElementIdResponse> => {
  
  return customInstance<deleteAdminCustomFieldSettingsBundlesStateIdValuesStateBundleElementIdResponse>(getDeleteAdminCustomFieldSettingsBundlesStateIdValuesStateBundleElementIdUrl(id,stateBundleElementId),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
);}



export type getAdminCustomFieldSettingsBundlesUserResponse200 = {
  data: UserBundle[]
  status: 200
}
    
export type getAdminCustomFieldSettingsBundlesUserResponseComposite = getAdminCustomFieldSettingsBundlesUserResponse200;
    
export type getAdminCustomFieldSettingsBundlesUserResponse = getAdminCustomFieldSettingsBundlesUserResponseComposite & {
  headers: Headers;
}

export const getGetAdminCustomFieldSettingsBundlesUserUrl = (params?: GetAdminCustomFieldSettingsBundlesUserParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/admin/customFieldSettings/bundles/user?${stringifiedParams}` : `/admin/customFieldSettings/bundles/user`
}

export const getAdminCustomFieldSettingsBundlesUser = async (params?: GetAdminCustomFieldSettingsBundlesUserParams, options?: RequestInit): Promise<getAdminCustomFieldSettingsBundlesUserResponse> => {
  
  return customInstance<getAdminCustomFieldSettingsBundlesUserResponse>(getGetAdminCustomFieldSettingsBundlesUserUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type postAdminCustomFieldSettingsBundlesUserResponse200 = {
  data: UserBundle
  status: 200
}
    
export type postAdminCustomFieldSettingsBundlesUserResponseComposite = postAdminCustomFieldSettingsBundlesUserResponse200;
    
export type postAdminCustomFieldSettingsBundlesUserResponse = postAdminCustomFieldSettingsBundlesUserResponseComposite & {
  headers: Headers;
}

export const getPostAdminCustomFieldSettingsBundlesUserUrl = (params?: PostAdminCustomFieldSettingsBundlesUserParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/admin/customFieldSettings/bundles/user?${stringifiedParams}` : `/admin/customFieldSettings/bundles/user`
}

export const postAdminCustomFieldSettingsBundlesUser = async (userBundle: NonReadonly<UserBundle>,
    params?: PostAdminCustomFieldSettingsBundlesUserParams, options?: RequestInit): Promise<postAdminCustomFieldSettingsBundlesUserResponse> => {
  
  return customInstance<postAdminCustomFieldSettingsBundlesUserResponse>(getPostAdminCustomFieldSettingsBundlesUserUrl(params),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      userBundle,)
  }
);}



export type getAdminCustomFieldSettingsBundlesUserIdResponse200 = {
  data: UserBundle
  status: 200
}
    
export type getAdminCustomFieldSettingsBundlesUserIdResponseComposite = getAdminCustomFieldSettingsBundlesUserIdResponse200;
    
export type getAdminCustomFieldSettingsBundlesUserIdResponse = getAdminCustomFieldSettingsBundlesUserIdResponseComposite & {
  headers: Headers;
}

export const getGetAdminCustomFieldSettingsBundlesUserIdUrl = (id: string,
    params?: GetAdminCustomFieldSettingsBundlesUserIdParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/admin/customFieldSettings/bundles/user/${id}?${stringifiedParams}` : `/admin/customFieldSettings/bundles/user/${id}`
}

export const getAdminCustomFieldSettingsBundlesUserId = async (id: string,
    params?: GetAdminCustomFieldSettingsBundlesUserIdParams, options?: RequestInit): Promise<getAdminCustomFieldSettingsBundlesUserIdResponse> => {
  
  return customInstance<getAdminCustomFieldSettingsBundlesUserIdResponse>(getGetAdminCustomFieldSettingsBundlesUserIdUrl(id,params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type postAdminCustomFieldSettingsBundlesUserIdResponse200 = {
  data: UserBundle
  status: 200
}
    
export type postAdminCustomFieldSettingsBundlesUserIdResponseComposite = postAdminCustomFieldSettingsBundlesUserIdResponse200;
    
export type postAdminCustomFieldSettingsBundlesUserIdResponse = postAdminCustomFieldSettingsBundlesUserIdResponseComposite & {
  headers: Headers;
}

export const getPostAdminCustomFieldSettingsBundlesUserIdUrl = (id: string,
    params?: PostAdminCustomFieldSettingsBundlesUserIdParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/admin/customFieldSettings/bundles/user/${id}?${stringifiedParams}` : `/admin/customFieldSettings/bundles/user/${id}`
}

export const postAdminCustomFieldSettingsBundlesUserId = async (id: string,
    userBundle: NonReadonly<UserBundle>,
    params?: PostAdminCustomFieldSettingsBundlesUserIdParams, options?: RequestInit): Promise<postAdminCustomFieldSettingsBundlesUserIdResponse> => {
  
  return customInstance<postAdminCustomFieldSettingsBundlesUserIdResponse>(getPostAdminCustomFieldSettingsBundlesUserIdUrl(id,params),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      userBundle,)
  }
);}



export type deleteAdminCustomFieldSettingsBundlesUserIdResponse200 = {
  data: void
  status: 200
}
    
export type deleteAdminCustomFieldSettingsBundlesUserIdResponseComposite = deleteAdminCustomFieldSettingsBundlesUserIdResponse200;
    
export type deleteAdminCustomFieldSettingsBundlesUserIdResponse = deleteAdminCustomFieldSettingsBundlesUserIdResponseComposite & {
  headers: Headers;
}

export const getDeleteAdminCustomFieldSettingsBundlesUserIdUrl = (id: string,) => {


  

  return `/admin/customFieldSettings/bundles/user/${id}`
}

export const deleteAdminCustomFieldSettingsBundlesUserId = async (id: string, options?: RequestInit): Promise<deleteAdminCustomFieldSettingsBundlesUserIdResponse> => {
  
  return customInstance<deleteAdminCustomFieldSettingsBundlesUserIdResponse>(getDeleteAdminCustomFieldSettingsBundlesUserIdUrl(id),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
);}



export type getAdminCustomFieldSettingsBundlesUserIdAggregatedUsersResponse200 = {
  data: User[]
  status: 200
}
    
export type getAdminCustomFieldSettingsBundlesUserIdAggregatedUsersResponseComposite = getAdminCustomFieldSettingsBundlesUserIdAggregatedUsersResponse200;
    
export type getAdminCustomFieldSettingsBundlesUserIdAggregatedUsersResponse = getAdminCustomFieldSettingsBundlesUserIdAggregatedUsersResponseComposite & {
  headers: Headers;
}

export const getGetAdminCustomFieldSettingsBundlesUserIdAggregatedUsersUrl = (id: string,
    params?: GetAdminCustomFieldSettingsBundlesUserIdAggregatedUsersParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/admin/customFieldSettings/bundles/user/${id}/aggregatedUsers?${stringifiedParams}` : `/admin/customFieldSettings/bundles/user/${id}/aggregatedUsers`
}

export const getAdminCustomFieldSettingsBundlesUserIdAggregatedUsers = async (id: string,
    params?: GetAdminCustomFieldSettingsBundlesUserIdAggregatedUsersParams, options?: RequestInit): Promise<getAdminCustomFieldSettingsBundlesUserIdAggregatedUsersResponse> => {
  
  return customInstance<getAdminCustomFieldSettingsBundlesUserIdAggregatedUsersResponse>(getGetAdminCustomFieldSettingsBundlesUserIdAggregatedUsersUrl(id,params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type getAdminCustomFieldSettingsBundlesUserIdGroupsResponse200 = {
  data: UserGroup[]
  status: 200
}
    
export type getAdminCustomFieldSettingsBundlesUserIdGroupsResponseComposite = getAdminCustomFieldSettingsBundlesUserIdGroupsResponse200;
    
export type getAdminCustomFieldSettingsBundlesUserIdGroupsResponse = getAdminCustomFieldSettingsBundlesUserIdGroupsResponseComposite & {
  headers: Headers;
}

export const getGetAdminCustomFieldSettingsBundlesUserIdGroupsUrl = (id: string,
    params?: GetAdminCustomFieldSettingsBundlesUserIdGroupsParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/admin/customFieldSettings/bundles/user/${id}/groups?${stringifiedParams}` : `/admin/customFieldSettings/bundles/user/${id}/groups`
}

export const getAdminCustomFieldSettingsBundlesUserIdGroups = async (id: string,
    params?: GetAdminCustomFieldSettingsBundlesUserIdGroupsParams, options?: RequestInit): Promise<getAdminCustomFieldSettingsBundlesUserIdGroupsResponse> => {
  
  return customInstance<getAdminCustomFieldSettingsBundlesUserIdGroupsResponse>(getGetAdminCustomFieldSettingsBundlesUserIdGroupsUrl(id,params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type postAdminCustomFieldSettingsBundlesUserIdGroupsResponse200 = {
  data: UserGroup
  status: 200
}
    
export type postAdminCustomFieldSettingsBundlesUserIdGroupsResponseComposite = postAdminCustomFieldSettingsBundlesUserIdGroupsResponse200;
    
export type postAdminCustomFieldSettingsBundlesUserIdGroupsResponse = postAdminCustomFieldSettingsBundlesUserIdGroupsResponseComposite & {
  headers: Headers;
}

export const getPostAdminCustomFieldSettingsBundlesUserIdGroupsUrl = (id: string,
    params?: PostAdminCustomFieldSettingsBundlesUserIdGroupsParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/admin/customFieldSettings/bundles/user/${id}/groups?${stringifiedParams}` : `/admin/customFieldSettings/bundles/user/${id}/groups`
}

export const postAdminCustomFieldSettingsBundlesUserIdGroups = async (id: string,
    userGroup: NonReadonly<UserGroup>,
    params?: PostAdminCustomFieldSettingsBundlesUserIdGroupsParams, options?: RequestInit): Promise<postAdminCustomFieldSettingsBundlesUserIdGroupsResponse> => {
  
  return customInstance<postAdminCustomFieldSettingsBundlesUserIdGroupsResponse>(getPostAdminCustomFieldSettingsBundlesUserIdGroupsUrl(id,params),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      userGroup,)
  }
);}



export type getAdminCustomFieldSettingsBundlesUserIdGroupsUserGroupIdResponse200 = {
  data: UserGroup
  status: 200
}
    
export type getAdminCustomFieldSettingsBundlesUserIdGroupsUserGroupIdResponseComposite = getAdminCustomFieldSettingsBundlesUserIdGroupsUserGroupIdResponse200;
    
export type getAdminCustomFieldSettingsBundlesUserIdGroupsUserGroupIdResponse = getAdminCustomFieldSettingsBundlesUserIdGroupsUserGroupIdResponseComposite & {
  headers: Headers;
}

export const getGetAdminCustomFieldSettingsBundlesUserIdGroupsUserGroupIdUrl = (id: string,
    userGroupId: string,
    params?: GetAdminCustomFieldSettingsBundlesUserIdGroupsUserGroupIdParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/admin/customFieldSettings/bundles/user/${id}/groups/${userGroupId}?${stringifiedParams}` : `/admin/customFieldSettings/bundles/user/${id}/groups/${userGroupId}`
}

export const getAdminCustomFieldSettingsBundlesUserIdGroupsUserGroupId = async (id: string,
    userGroupId: string,
    params?: GetAdminCustomFieldSettingsBundlesUserIdGroupsUserGroupIdParams, options?: RequestInit): Promise<getAdminCustomFieldSettingsBundlesUserIdGroupsUserGroupIdResponse> => {
  
  return customInstance<getAdminCustomFieldSettingsBundlesUserIdGroupsUserGroupIdResponse>(getGetAdminCustomFieldSettingsBundlesUserIdGroupsUserGroupIdUrl(id,userGroupId,params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type deleteAdminCustomFieldSettingsBundlesUserIdGroupsUserGroupIdResponse200 = {
  data: void
  status: 200
}
    
export type deleteAdminCustomFieldSettingsBundlesUserIdGroupsUserGroupIdResponseComposite = deleteAdminCustomFieldSettingsBundlesUserIdGroupsUserGroupIdResponse200;
    
export type deleteAdminCustomFieldSettingsBundlesUserIdGroupsUserGroupIdResponse = deleteAdminCustomFieldSettingsBundlesUserIdGroupsUserGroupIdResponseComposite & {
  headers: Headers;
}

export const getDeleteAdminCustomFieldSettingsBundlesUserIdGroupsUserGroupIdUrl = (id: string,
    userGroupId: string,) => {


  

  return `/admin/customFieldSettings/bundles/user/${id}/groups/${userGroupId}`
}

export const deleteAdminCustomFieldSettingsBundlesUserIdGroupsUserGroupId = async (id: string,
    userGroupId: string, options?: RequestInit): Promise<deleteAdminCustomFieldSettingsBundlesUserIdGroupsUserGroupIdResponse> => {
  
  return customInstance<deleteAdminCustomFieldSettingsBundlesUserIdGroupsUserGroupIdResponse>(getDeleteAdminCustomFieldSettingsBundlesUserIdGroupsUserGroupIdUrl(id,userGroupId),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
);}



export type getAdminCustomFieldSettingsBundlesUserIdIndividualsResponse200 = {
  data: User[]
  status: 200
}
    
export type getAdminCustomFieldSettingsBundlesUserIdIndividualsResponseComposite = getAdminCustomFieldSettingsBundlesUserIdIndividualsResponse200;
    
export type getAdminCustomFieldSettingsBundlesUserIdIndividualsResponse = getAdminCustomFieldSettingsBundlesUserIdIndividualsResponseComposite & {
  headers: Headers;
}

export const getGetAdminCustomFieldSettingsBundlesUserIdIndividualsUrl = (id: string,
    params?: GetAdminCustomFieldSettingsBundlesUserIdIndividualsParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/admin/customFieldSettings/bundles/user/${id}/individuals?${stringifiedParams}` : `/admin/customFieldSettings/bundles/user/${id}/individuals`
}

export const getAdminCustomFieldSettingsBundlesUserIdIndividuals = async (id: string,
    params?: GetAdminCustomFieldSettingsBundlesUserIdIndividualsParams, options?: RequestInit): Promise<getAdminCustomFieldSettingsBundlesUserIdIndividualsResponse> => {
  
  return customInstance<getAdminCustomFieldSettingsBundlesUserIdIndividualsResponse>(getGetAdminCustomFieldSettingsBundlesUserIdIndividualsUrl(id,params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type postAdminCustomFieldSettingsBundlesUserIdIndividualsResponse200 = {
  data: User
  status: 200
}
    
export type postAdminCustomFieldSettingsBundlesUserIdIndividualsResponseComposite = postAdminCustomFieldSettingsBundlesUserIdIndividualsResponse200;
    
export type postAdminCustomFieldSettingsBundlesUserIdIndividualsResponse = postAdminCustomFieldSettingsBundlesUserIdIndividualsResponseComposite & {
  headers: Headers;
}

export const getPostAdminCustomFieldSettingsBundlesUserIdIndividualsUrl = (id: string,
    params?: PostAdminCustomFieldSettingsBundlesUserIdIndividualsParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/admin/customFieldSettings/bundles/user/${id}/individuals?${stringifiedParams}` : `/admin/customFieldSettings/bundles/user/${id}/individuals`
}

export const postAdminCustomFieldSettingsBundlesUserIdIndividuals = async (id: string,
    user: NonReadonly<User>,
    params?: PostAdminCustomFieldSettingsBundlesUserIdIndividualsParams, options?: RequestInit): Promise<postAdminCustomFieldSettingsBundlesUserIdIndividualsResponse> => {
  
  return customInstance<postAdminCustomFieldSettingsBundlesUserIdIndividualsResponse>(getPostAdminCustomFieldSettingsBundlesUserIdIndividualsUrl(id,params),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      user,)
  }
);}



export type getAdminCustomFieldSettingsBundlesUserIdIndividualsUserIdResponse200 = {
  data: User
  status: 200
}
    
export type getAdminCustomFieldSettingsBundlesUserIdIndividualsUserIdResponseComposite = getAdminCustomFieldSettingsBundlesUserIdIndividualsUserIdResponse200;
    
export type getAdminCustomFieldSettingsBundlesUserIdIndividualsUserIdResponse = getAdminCustomFieldSettingsBundlesUserIdIndividualsUserIdResponseComposite & {
  headers: Headers;
}

export const getGetAdminCustomFieldSettingsBundlesUserIdIndividualsUserIdUrl = (id: string,
    userId: string,
    params?: GetAdminCustomFieldSettingsBundlesUserIdIndividualsUserIdParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/admin/customFieldSettings/bundles/user/${id}/individuals/${userId}?${stringifiedParams}` : `/admin/customFieldSettings/bundles/user/${id}/individuals/${userId}`
}

export const getAdminCustomFieldSettingsBundlesUserIdIndividualsUserId = async (id: string,
    userId: string,
    params?: GetAdminCustomFieldSettingsBundlesUserIdIndividualsUserIdParams, options?: RequestInit): Promise<getAdminCustomFieldSettingsBundlesUserIdIndividualsUserIdResponse> => {
  
  return customInstance<getAdminCustomFieldSettingsBundlesUserIdIndividualsUserIdResponse>(getGetAdminCustomFieldSettingsBundlesUserIdIndividualsUserIdUrl(id,userId,params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type deleteAdminCustomFieldSettingsBundlesUserIdIndividualsUserIdResponse200 = {
  data: void
  status: 200
}
    
export type deleteAdminCustomFieldSettingsBundlesUserIdIndividualsUserIdResponseComposite = deleteAdminCustomFieldSettingsBundlesUserIdIndividualsUserIdResponse200;
    
export type deleteAdminCustomFieldSettingsBundlesUserIdIndividualsUserIdResponse = deleteAdminCustomFieldSettingsBundlesUserIdIndividualsUserIdResponseComposite & {
  headers: Headers;
}

export const getDeleteAdminCustomFieldSettingsBundlesUserIdIndividualsUserIdUrl = (id: string,
    userId: string,) => {


  

  return `/admin/customFieldSettings/bundles/user/${id}/individuals/${userId}`
}

export const deleteAdminCustomFieldSettingsBundlesUserIdIndividualsUserId = async (id: string,
    userId: string, options?: RequestInit): Promise<deleteAdminCustomFieldSettingsBundlesUserIdIndividualsUserIdResponse> => {
  
  return customInstance<deleteAdminCustomFieldSettingsBundlesUserIdIndividualsUserIdResponse>(getDeleteAdminCustomFieldSettingsBundlesUserIdIndividualsUserIdUrl(id,userId),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
);}



export type getAdminCustomFieldSettingsBundlesVersionResponse200 = {
  data: VersionBundle[]
  status: 200
}
    
export type getAdminCustomFieldSettingsBundlesVersionResponseComposite = getAdminCustomFieldSettingsBundlesVersionResponse200;
    
export type getAdminCustomFieldSettingsBundlesVersionResponse = getAdminCustomFieldSettingsBundlesVersionResponseComposite & {
  headers: Headers;
}

export const getGetAdminCustomFieldSettingsBundlesVersionUrl = (params?: GetAdminCustomFieldSettingsBundlesVersionParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/admin/customFieldSettings/bundles/version?${stringifiedParams}` : `/admin/customFieldSettings/bundles/version`
}

export const getAdminCustomFieldSettingsBundlesVersion = async (params?: GetAdminCustomFieldSettingsBundlesVersionParams, options?: RequestInit): Promise<getAdminCustomFieldSettingsBundlesVersionResponse> => {
  
  return customInstance<getAdminCustomFieldSettingsBundlesVersionResponse>(getGetAdminCustomFieldSettingsBundlesVersionUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type postAdminCustomFieldSettingsBundlesVersionResponse200 = {
  data: VersionBundle
  status: 200
}
    
export type postAdminCustomFieldSettingsBundlesVersionResponseComposite = postAdminCustomFieldSettingsBundlesVersionResponse200;
    
export type postAdminCustomFieldSettingsBundlesVersionResponse = postAdminCustomFieldSettingsBundlesVersionResponseComposite & {
  headers: Headers;
}

export const getPostAdminCustomFieldSettingsBundlesVersionUrl = (params?: PostAdminCustomFieldSettingsBundlesVersionParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/admin/customFieldSettings/bundles/version?${stringifiedParams}` : `/admin/customFieldSettings/bundles/version`
}

export const postAdminCustomFieldSettingsBundlesVersion = async (versionBundle: NonReadonly<VersionBundle>,
    params?: PostAdminCustomFieldSettingsBundlesVersionParams, options?: RequestInit): Promise<postAdminCustomFieldSettingsBundlesVersionResponse> => {
  
  return customInstance<postAdminCustomFieldSettingsBundlesVersionResponse>(getPostAdminCustomFieldSettingsBundlesVersionUrl(params),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      versionBundle,)
  }
);}



export type getAdminCustomFieldSettingsBundlesVersionIdResponse200 = {
  data: VersionBundle
  status: 200
}
    
export type getAdminCustomFieldSettingsBundlesVersionIdResponseComposite = getAdminCustomFieldSettingsBundlesVersionIdResponse200;
    
export type getAdminCustomFieldSettingsBundlesVersionIdResponse = getAdminCustomFieldSettingsBundlesVersionIdResponseComposite & {
  headers: Headers;
}

export const getGetAdminCustomFieldSettingsBundlesVersionIdUrl = (id: string,
    params?: GetAdminCustomFieldSettingsBundlesVersionIdParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/admin/customFieldSettings/bundles/version/${id}?${stringifiedParams}` : `/admin/customFieldSettings/bundles/version/${id}`
}

export const getAdminCustomFieldSettingsBundlesVersionId = async (id: string,
    params?: GetAdminCustomFieldSettingsBundlesVersionIdParams, options?: RequestInit): Promise<getAdminCustomFieldSettingsBundlesVersionIdResponse> => {
  
  return customInstance<getAdminCustomFieldSettingsBundlesVersionIdResponse>(getGetAdminCustomFieldSettingsBundlesVersionIdUrl(id,params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type postAdminCustomFieldSettingsBundlesVersionIdResponse200 = {
  data: VersionBundle
  status: 200
}
    
export type postAdminCustomFieldSettingsBundlesVersionIdResponseComposite = postAdminCustomFieldSettingsBundlesVersionIdResponse200;
    
export type postAdminCustomFieldSettingsBundlesVersionIdResponse = postAdminCustomFieldSettingsBundlesVersionIdResponseComposite & {
  headers: Headers;
}

export const getPostAdminCustomFieldSettingsBundlesVersionIdUrl = (id: string,
    params?: PostAdminCustomFieldSettingsBundlesVersionIdParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/admin/customFieldSettings/bundles/version/${id}?${stringifiedParams}` : `/admin/customFieldSettings/bundles/version/${id}`
}

export const postAdminCustomFieldSettingsBundlesVersionId = async (id: string,
    versionBundle: NonReadonly<VersionBundle>,
    params?: PostAdminCustomFieldSettingsBundlesVersionIdParams, options?: RequestInit): Promise<postAdminCustomFieldSettingsBundlesVersionIdResponse> => {
  
  return customInstance<postAdminCustomFieldSettingsBundlesVersionIdResponse>(getPostAdminCustomFieldSettingsBundlesVersionIdUrl(id,params),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      versionBundle,)
  }
);}



export type deleteAdminCustomFieldSettingsBundlesVersionIdResponse200 = {
  data: void
  status: 200
}
    
export type deleteAdminCustomFieldSettingsBundlesVersionIdResponseComposite = deleteAdminCustomFieldSettingsBundlesVersionIdResponse200;
    
export type deleteAdminCustomFieldSettingsBundlesVersionIdResponse = deleteAdminCustomFieldSettingsBundlesVersionIdResponseComposite & {
  headers: Headers;
}

export const getDeleteAdminCustomFieldSettingsBundlesVersionIdUrl = (id: string,) => {


  

  return `/admin/customFieldSettings/bundles/version/${id}`
}

export const deleteAdminCustomFieldSettingsBundlesVersionId = async (id: string, options?: RequestInit): Promise<deleteAdminCustomFieldSettingsBundlesVersionIdResponse> => {
  
  return customInstance<deleteAdminCustomFieldSettingsBundlesVersionIdResponse>(getDeleteAdminCustomFieldSettingsBundlesVersionIdUrl(id),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
);}



export type getAdminCustomFieldSettingsBundlesVersionIdValuesResponse200 = {
  data: VersionBundleElement[]
  status: 200
}
    
export type getAdminCustomFieldSettingsBundlesVersionIdValuesResponseComposite = getAdminCustomFieldSettingsBundlesVersionIdValuesResponse200;
    
export type getAdminCustomFieldSettingsBundlesVersionIdValuesResponse = getAdminCustomFieldSettingsBundlesVersionIdValuesResponseComposite & {
  headers: Headers;
}

export const getGetAdminCustomFieldSettingsBundlesVersionIdValuesUrl = (id: string,
    params?: GetAdminCustomFieldSettingsBundlesVersionIdValuesParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/admin/customFieldSettings/bundles/version/${id}/values?${stringifiedParams}` : `/admin/customFieldSettings/bundles/version/${id}/values`
}

export const getAdminCustomFieldSettingsBundlesVersionIdValues = async (id: string,
    params?: GetAdminCustomFieldSettingsBundlesVersionIdValuesParams, options?: RequestInit): Promise<getAdminCustomFieldSettingsBundlesVersionIdValuesResponse> => {
  
  return customInstance<getAdminCustomFieldSettingsBundlesVersionIdValuesResponse>(getGetAdminCustomFieldSettingsBundlesVersionIdValuesUrl(id,params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type postAdminCustomFieldSettingsBundlesVersionIdValuesResponse200 = {
  data: VersionBundleElement
  status: 200
}
    
export type postAdminCustomFieldSettingsBundlesVersionIdValuesResponseComposite = postAdminCustomFieldSettingsBundlesVersionIdValuesResponse200;
    
export type postAdminCustomFieldSettingsBundlesVersionIdValuesResponse = postAdminCustomFieldSettingsBundlesVersionIdValuesResponseComposite & {
  headers: Headers;
}

export const getPostAdminCustomFieldSettingsBundlesVersionIdValuesUrl = (id: string,
    params?: PostAdminCustomFieldSettingsBundlesVersionIdValuesParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/admin/customFieldSettings/bundles/version/${id}/values?${stringifiedParams}` : `/admin/customFieldSettings/bundles/version/${id}/values`
}

export const postAdminCustomFieldSettingsBundlesVersionIdValues = async (id: string,
    versionBundleElement: NonReadonly<VersionBundleElement>,
    params?: PostAdminCustomFieldSettingsBundlesVersionIdValuesParams, options?: RequestInit): Promise<postAdminCustomFieldSettingsBundlesVersionIdValuesResponse> => {
  
  return customInstance<postAdminCustomFieldSettingsBundlesVersionIdValuesResponse>(getPostAdminCustomFieldSettingsBundlesVersionIdValuesUrl(id,params),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      versionBundleElement,)
  }
);}



export type getAdminCustomFieldSettingsBundlesVersionIdValuesVersionBundleElementIdResponse200 = {
  data: VersionBundleElement
  status: 200
}
    
export type getAdminCustomFieldSettingsBundlesVersionIdValuesVersionBundleElementIdResponseComposite = getAdminCustomFieldSettingsBundlesVersionIdValuesVersionBundleElementIdResponse200;
    
export type getAdminCustomFieldSettingsBundlesVersionIdValuesVersionBundleElementIdResponse = getAdminCustomFieldSettingsBundlesVersionIdValuesVersionBundleElementIdResponseComposite & {
  headers: Headers;
}

export const getGetAdminCustomFieldSettingsBundlesVersionIdValuesVersionBundleElementIdUrl = (id: string,
    versionBundleElementId: string,
    params?: GetAdminCustomFieldSettingsBundlesVersionIdValuesVersionBundleElementIdParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/admin/customFieldSettings/bundles/version/${id}/values/${versionBundleElementId}?${stringifiedParams}` : `/admin/customFieldSettings/bundles/version/${id}/values/${versionBundleElementId}`
}

export const getAdminCustomFieldSettingsBundlesVersionIdValuesVersionBundleElementId = async (id: string,
    versionBundleElementId: string,
    params?: GetAdminCustomFieldSettingsBundlesVersionIdValuesVersionBundleElementIdParams, options?: RequestInit): Promise<getAdminCustomFieldSettingsBundlesVersionIdValuesVersionBundleElementIdResponse> => {
  
  return customInstance<getAdminCustomFieldSettingsBundlesVersionIdValuesVersionBundleElementIdResponse>(getGetAdminCustomFieldSettingsBundlesVersionIdValuesVersionBundleElementIdUrl(id,versionBundleElementId,params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type postAdminCustomFieldSettingsBundlesVersionIdValuesVersionBundleElementIdResponse200 = {
  data: VersionBundleElement
  status: 200
}
    
export type postAdminCustomFieldSettingsBundlesVersionIdValuesVersionBundleElementIdResponseComposite = postAdminCustomFieldSettingsBundlesVersionIdValuesVersionBundleElementIdResponse200;
    
export type postAdminCustomFieldSettingsBundlesVersionIdValuesVersionBundleElementIdResponse = postAdminCustomFieldSettingsBundlesVersionIdValuesVersionBundleElementIdResponseComposite & {
  headers: Headers;
}

export const getPostAdminCustomFieldSettingsBundlesVersionIdValuesVersionBundleElementIdUrl = (id: string,
    versionBundleElementId: string,
    params?: PostAdminCustomFieldSettingsBundlesVersionIdValuesVersionBundleElementIdParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/admin/customFieldSettings/bundles/version/${id}/values/${versionBundleElementId}?${stringifiedParams}` : `/admin/customFieldSettings/bundles/version/${id}/values/${versionBundleElementId}`
}

export const postAdminCustomFieldSettingsBundlesVersionIdValuesVersionBundleElementId = async (id: string,
    versionBundleElementId: string,
    versionBundleElement: NonReadonly<VersionBundleElement>,
    params?: PostAdminCustomFieldSettingsBundlesVersionIdValuesVersionBundleElementIdParams, options?: RequestInit): Promise<postAdminCustomFieldSettingsBundlesVersionIdValuesVersionBundleElementIdResponse> => {
  
  return customInstance<postAdminCustomFieldSettingsBundlesVersionIdValuesVersionBundleElementIdResponse>(getPostAdminCustomFieldSettingsBundlesVersionIdValuesVersionBundleElementIdUrl(id,versionBundleElementId,params),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      versionBundleElement,)
  }
);}



export type deleteAdminCustomFieldSettingsBundlesVersionIdValuesVersionBundleElementIdResponse200 = {
  data: void
  status: 200
}
    
export type deleteAdminCustomFieldSettingsBundlesVersionIdValuesVersionBundleElementIdResponseComposite = deleteAdminCustomFieldSettingsBundlesVersionIdValuesVersionBundleElementIdResponse200;
    
export type deleteAdminCustomFieldSettingsBundlesVersionIdValuesVersionBundleElementIdResponse = deleteAdminCustomFieldSettingsBundlesVersionIdValuesVersionBundleElementIdResponseComposite & {
  headers: Headers;
}

export const getDeleteAdminCustomFieldSettingsBundlesVersionIdValuesVersionBundleElementIdUrl = (id: string,
    versionBundleElementId: string,) => {


  

  return `/admin/customFieldSettings/bundles/version/${id}/values/${versionBundleElementId}`
}

export const deleteAdminCustomFieldSettingsBundlesVersionIdValuesVersionBundleElementId = async (id: string,
    versionBundleElementId: string, options?: RequestInit): Promise<deleteAdminCustomFieldSettingsBundlesVersionIdValuesVersionBundleElementIdResponse> => {
  
  return customInstance<deleteAdminCustomFieldSettingsBundlesVersionIdValuesVersionBundleElementIdResponse>(getDeleteAdminCustomFieldSettingsBundlesVersionIdValuesVersionBundleElementIdUrl(id,versionBundleElementId),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
);}



export type getAdminCustomFieldSettingsCustomFieldsResponse200 = {
  data: CustomField[]
  status: 200
}
    
export type getAdminCustomFieldSettingsCustomFieldsResponseComposite = getAdminCustomFieldSettingsCustomFieldsResponse200;
    
export type getAdminCustomFieldSettingsCustomFieldsResponse = getAdminCustomFieldSettingsCustomFieldsResponseComposite & {
  headers: Headers;
}

export const getGetAdminCustomFieldSettingsCustomFieldsUrl = (params?: GetAdminCustomFieldSettingsCustomFieldsParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/admin/customFieldSettings/customFields?${stringifiedParams}` : `/admin/customFieldSettings/customFields`
}

export const getAdminCustomFieldSettingsCustomFields = async (params?: GetAdminCustomFieldSettingsCustomFieldsParams, options?: RequestInit): Promise<getAdminCustomFieldSettingsCustomFieldsResponse> => {
  
  return customInstance<getAdminCustomFieldSettingsCustomFieldsResponse>(getGetAdminCustomFieldSettingsCustomFieldsUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type postAdminCustomFieldSettingsCustomFieldsResponse200 = {
  data: CustomField
  status: 200
}
    
export type postAdminCustomFieldSettingsCustomFieldsResponseComposite = postAdminCustomFieldSettingsCustomFieldsResponse200;
    
export type postAdminCustomFieldSettingsCustomFieldsResponse = postAdminCustomFieldSettingsCustomFieldsResponseComposite & {
  headers: Headers;
}

export const getPostAdminCustomFieldSettingsCustomFieldsUrl = (params?: PostAdminCustomFieldSettingsCustomFieldsParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/admin/customFieldSettings/customFields?${stringifiedParams}` : `/admin/customFieldSettings/customFields`
}

export const postAdminCustomFieldSettingsCustomFields = async (customField: NonReadonly<CustomField>,
    params?: PostAdminCustomFieldSettingsCustomFieldsParams, options?: RequestInit): Promise<postAdminCustomFieldSettingsCustomFieldsResponse> => {
  
  return customInstance<postAdminCustomFieldSettingsCustomFieldsResponse>(getPostAdminCustomFieldSettingsCustomFieldsUrl(params),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      customField,)
  }
);}



export type getAdminCustomFieldSettingsCustomFieldsIdResponse200 = {
  data: CustomField
  status: 200
}
    
export type getAdminCustomFieldSettingsCustomFieldsIdResponseComposite = getAdminCustomFieldSettingsCustomFieldsIdResponse200;
    
export type getAdminCustomFieldSettingsCustomFieldsIdResponse = getAdminCustomFieldSettingsCustomFieldsIdResponseComposite & {
  headers: Headers;
}

export const getGetAdminCustomFieldSettingsCustomFieldsIdUrl = (id: string,
    params?: GetAdminCustomFieldSettingsCustomFieldsIdParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/admin/customFieldSettings/customFields/${id}?${stringifiedParams}` : `/admin/customFieldSettings/customFields/${id}`
}

export const getAdminCustomFieldSettingsCustomFieldsId = async (id: string,
    params?: GetAdminCustomFieldSettingsCustomFieldsIdParams, options?: RequestInit): Promise<getAdminCustomFieldSettingsCustomFieldsIdResponse> => {
  
  return customInstance<getAdminCustomFieldSettingsCustomFieldsIdResponse>(getGetAdminCustomFieldSettingsCustomFieldsIdUrl(id,params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type postAdminCustomFieldSettingsCustomFieldsIdResponse200 = {
  data: CustomField
  status: 200
}
    
export type postAdminCustomFieldSettingsCustomFieldsIdResponseComposite = postAdminCustomFieldSettingsCustomFieldsIdResponse200;
    
export type postAdminCustomFieldSettingsCustomFieldsIdResponse = postAdminCustomFieldSettingsCustomFieldsIdResponseComposite & {
  headers: Headers;
}

export const getPostAdminCustomFieldSettingsCustomFieldsIdUrl = (id: string,
    params?: PostAdminCustomFieldSettingsCustomFieldsIdParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/admin/customFieldSettings/customFields/${id}?${stringifiedParams}` : `/admin/customFieldSettings/customFields/${id}`
}

export const postAdminCustomFieldSettingsCustomFieldsId = async (id: string,
    customField: NonReadonly<CustomField>,
    params?: PostAdminCustomFieldSettingsCustomFieldsIdParams, options?: RequestInit): Promise<postAdminCustomFieldSettingsCustomFieldsIdResponse> => {
  
  return customInstance<postAdminCustomFieldSettingsCustomFieldsIdResponse>(getPostAdminCustomFieldSettingsCustomFieldsIdUrl(id,params),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      customField,)
  }
);}



export type deleteAdminCustomFieldSettingsCustomFieldsIdResponse200 = {
  data: void
  status: 200
}
    
export type deleteAdminCustomFieldSettingsCustomFieldsIdResponseComposite = deleteAdminCustomFieldSettingsCustomFieldsIdResponse200;
    
export type deleteAdminCustomFieldSettingsCustomFieldsIdResponse = deleteAdminCustomFieldSettingsCustomFieldsIdResponseComposite & {
  headers: Headers;
}

export const getDeleteAdminCustomFieldSettingsCustomFieldsIdUrl = (id: string,) => {


  

  return `/admin/customFieldSettings/customFields/${id}`
}

export const deleteAdminCustomFieldSettingsCustomFieldsId = async (id: string, options?: RequestInit): Promise<deleteAdminCustomFieldSettingsCustomFieldsIdResponse> => {
  
  return customInstance<deleteAdminCustomFieldSettingsCustomFieldsIdResponse>(getDeleteAdminCustomFieldSettingsCustomFieldsIdUrl(id),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
);}



export type getAdminCustomFieldSettingsCustomFieldsIdFieldDefaultsResponse200 = {
  data: CustomFieldDefaults
  status: 200
}
    
export type getAdminCustomFieldSettingsCustomFieldsIdFieldDefaultsResponseComposite = getAdminCustomFieldSettingsCustomFieldsIdFieldDefaultsResponse200;
    
export type getAdminCustomFieldSettingsCustomFieldsIdFieldDefaultsResponse = getAdminCustomFieldSettingsCustomFieldsIdFieldDefaultsResponseComposite & {
  headers: Headers;
}

export const getGetAdminCustomFieldSettingsCustomFieldsIdFieldDefaultsUrl = (id: string,
    params?: GetAdminCustomFieldSettingsCustomFieldsIdFieldDefaultsParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/admin/customFieldSettings/customFields/${id}/fieldDefaults?${stringifiedParams}` : `/admin/customFieldSettings/customFields/${id}/fieldDefaults`
}

export const getAdminCustomFieldSettingsCustomFieldsIdFieldDefaults = async (id: string,
    params?: GetAdminCustomFieldSettingsCustomFieldsIdFieldDefaultsParams, options?: RequestInit): Promise<getAdminCustomFieldSettingsCustomFieldsIdFieldDefaultsResponse> => {
  
  return customInstance<getAdminCustomFieldSettingsCustomFieldsIdFieldDefaultsResponse>(getGetAdminCustomFieldSettingsCustomFieldsIdFieldDefaultsUrl(id,params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type postAdminCustomFieldSettingsCustomFieldsIdFieldDefaultsResponse200 = {
  data: CustomFieldDefaults
  status: 200
}
    
export type postAdminCustomFieldSettingsCustomFieldsIdFieldDefaultsResponseComposite = postAdminCustomFieldSettingsCustomFieldsIdFieldDefaultsResponse200;
    
export type postAdminCustomFieldSettingsCustomFieldsIdFieldDefaultsResponse = postAdminCustomFieldSettingsCustomFieldsIdFieldDefaultsResponseComposite & {
  headers: Headers;
}

export const getPostAdminCustomFieldSettingsCustomFieldsIdFieldDefaultsUrl = (id: string,
    params?: PostAdminCustomFieldSettingsCustomFieldsIdFieldDefaultsParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/admin/customFieldSettings/customFields/${id}/fieldDefaults?${stringifiedParams}` : `/admin/customFieldSettings/customFields/${id}/fieldDefaults`
}

export const postAdminCustomFieldSettingsCustomFieldsIdFieldDefaults = async (id: string,
    customFieldDefaults: NonReadonly<CustomFieldDefaults>,
    params?: PostAdminCustomFieldSettingsCustomFieldsIdFieldDefaultsParams, options?: RequestInit): Promise<postAdminCustomFieldSettingsCustomFieldsIdFieldDefaultsResponse> => {
  
  return customInstance<postAdminCustomFieldSettingsCustomFieldsIdFieldDefaultsResponse>(getPostAdminCustomFieldSettingsCustomFieldsIdFieldDefaultsUrl(id,params),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      customFieldDefaults,)
  }
);}



export type getAdminCustomFieldSettingsCustomFieldsIdInstancesResponse200 = {
  data: ProjectCustomField[]
  status: 200
}
    
export type getAdminCustomFieldSettingsCustomFieldsIdInstancesResponseComposite = getAdminCustomFieldSettingsCustomFieldsIdInstancesResponse200;
    
export type getAdminCustomFieldSettingsCustomFieldsIdInstancesResponse = getAdminCustomFieldSettingsCustomFieldsIdInstancesResponseComposite & {
  headers: Headers;
}

export const getGetAdminCustomFieldSettingsCustomFieldsIdInstancesUrl = (id: string,
    params?: GetAdminCustomFieldSettingsCustomFieldsIdInstancesParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/admin/customFieldSettings/customFields/${id}/instances?${stringifiedParams}` : `/admin/customFieldSettings/customFields/${id}/instances`
}

export const getAdminCustomFieldSettingsCustomFieldsIdInstances = async (id: string,
    params?: GetAdminCustomFieldSettingsCustomFieldsIdInstancesParams, options?: RequestInit): Promise<getAdminCustomFieldSettingsCustomFieldsIdInstancesResponse> => {
  
  return customInstance<getAdminCustomFieldSettingsCustomFieldsIdInstancesResponse>(getGetAdminCustomFieldSettingsCustomFieldsIdInstancesUrl(id,params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type getAdminCustomFieldSettingsTypesResponse200 = {
  data: FieldType[]
  status: 200
}
    
export type getAdminCustomFieldSettingsTypesResponseComposite = getAdminCustomFieldSettingsTypesResponse200;
    
export type getAdminCustomFieldSettingsTypesResponse = getAdminCustomFieldSettingsTypesResponseComposite & {
  headers: Headers;
}

export const getGetAdminCustomFieldSettingsTypesUrl = (params?: GetAdminCustomFieldSettingsTypesParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/admin/customFieldSettings/types?${stringifiedParams}` : `/admin/customFieldSettings/types`
}

export const getAdminCustomFieldSettingsTypes = async (params?: GetAdminCustomFieldSettingsTypesParams, options?: RequestInit): Promise<getAdminCustomFieldSettingsTypesResponse> => {
  
  return customInstance<getAdminCustomFieldSettingsTypesResponse>(getGetAdminCustomFieldSettingsTypesUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type getAdminDatabaseBackupBackupsResponse200 = {
  data: BackupFile[]
  status: 200
}
    
export type getAdminDatabaseBackupBackupsResponseComposite = getAdminDatabaseBackupBackupsResponse200;
    
export type getAdminDatabaseBackupBackupsResponse = getAdminDatabaseBackupBackupsResponseComposite & {
  headers: Headers;
}

export const getGetAdminDatabaseBackupBackupsUrl = (params?: GetAdminDatabaseBackupBackupsParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/admin/databaseBackup/backups?${stringifiedParams}` : `/admin/databaseBackup/backups`
}

export const getAdminDatabaseBackupBackups = async (params?: GetAdminDatabaseBackupBackupsParams, options?: RequestInit): Promise<getAdminDatabaseBackupBackupsResponse> => {
  
  return customInstance<getAdminDatabaseBackupBackupsResponse>(getGetAdminDatabaseBackupBackupsUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type getAdminDatabaseBackupBackupsIdResponse200 = {
  data: BackupFile
  status: 200
}
    
export type getAdminDatabaseBackupBackupsIdResponseComposite = getAdminDatabaseBackupBackupsIdResponse200;
    
export type getAdminDatabaseBackupBackupsIdResponse = getAdminDatabaseBackupBackupsIdResponseComposite & {
  headers: Headers;
}

export const getGetAdminDatabaseBackupBackupsIdUrl = (id: string,
    params?: GetAdminDatabaseBackupBackupsIdParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/admin/databaseBackup/backups/${id}?${stringifiedParams}` : `/admin/databaseBackup/backups/${id}`
}

export const getAdminDatabaseBackupBackupsId = async (id: string,
    params?: GetAdminDatabaseBackupBackupsIdParams, options?: RequestInit): Promise<getAdminDatabaseBackupBackupsIdResponse> => {
  
  return customInstance<getAdminDatabaseBackupBackupsIdResponse>(getGetAdminDatabaseBackupBackupsIdUrl(id,params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type getAdminDatabaseBackupSettingsResponse200 = {
  data: DatabaseBackupSettings
  status: 200
}
    
export type getAdminDatabaseBackupSettingsResponseComposite = getAdminDatabaseBackupSettingsResponse200;
    
export type getAdminDatabaseBackupSettingsResponse = getAdminDatabaseBackupSettingsResponseComposite & {
  headers: Headers;
}

export const getGetAdminDatabaseBackupSettingsUrl = (params?: GetAdminDatabaseBackupSettingsParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/admin/databaseBackup/settings?${stringifiedParams}` : `/admin/databaseBackup/settings`
}

export const getAdminDatabaseBackupSettings = async (params?: GetAdminDatabaseBackupSettingsParams, options?: RequestInit): Promise<getAdminDatabaseBackupSettingsResponse> => {
  
  return customInstance<getAdminDatabaseBackupSettingsResponse>(getGetAdminDatabaseBackupSettingsUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type postAdminDatabaseBackupSettingsResponse200 = {
  data: DatabaseBackupSettings
  status: 200
}
    
export type postAdminDatabaseBackupSettingsResponseComposite = postAdminDatabaseBackupSettingsResponse200;
    
export type postAdminDatabaseBackupSettingsResponse = postAdminDatabaseBackupSettingsResponseComposite & {
  headers: Headers;
}

export const getPostAdminDatabaseBackupSettingsUrl = (params?: PostAdminDatabaseBackupSettingsParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/admin/databaseBackup/settings?${stringifiedParams}` : `/admin/databaseBackup/settings`
}

export const postAdminDatabaseBackupSettings = async (databaseBackupSettings: NonReadonly<DatabaseBackupSettings>,
    params?: PostAdminDatabaseBackupSettingsParams, options?: RequestInit): Promise<postAdminDatabaseBackupSettingsResponse> => {
  
  return customInstance<postAdminDatabaseBackupSettingsResponse>(getPostAdminDatabaseBackupSettingsUrl(params),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      databaseBackupSettings,)
  }
);}



export type getAdminDatabaseBackupSettingsBackupStatusResponse200 = {
  data: BackupStatus
  status: 200
}
    
export type getAdminDatabaseBackupSettingsBackupStatusResponseComposite = getAdminDatabaseBackupSettingsBackupStatusResponse200;
    
export type getAdminDatabaseBackupSettingsBackupStatusResponse = getAdminDatabaseBackupSettingsBackupStatusResponseComposite & {
  headers: Headers;
}

export const getGetAdminDatabaseBackupSettingsBackupStatusUrl = (params?: GetAdminDatabaseBackupSettingsBackupStatusParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/admin/databaseBackup/settings/backupStatus?${stringifiedParams}` : `/admin/databaseBackup/settings/backupStatus`
}

export const getAdminDatabaseBackupSettingsBackupStatus = async (params?: GetAdminDatabaseBackupSettingsBackupStatusParams, options?: RequestInit): Promise<getAdminDatabaseBackupSettingsBackupStatusResponse> => {
  
  return customInstance<getAdminDatabaseBackupSettingsBackupStatusResponse>(getGetAdminDatabaseBackupSettingsBackupStatusUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type getAdminGlobalSettingsResponse200 = {
  data: GlobalSettings
  status: 200
}
    
export type getAdminGlobalSettingsResponseComposite = getAdminGlobalSettingsResponse200;
    
export type getAdminGlobalSettingsResponse = getAdminGlobalSettingsResponseComposite & {
  headers: Headers;
}

export const getGetAdminGlobalSettingsUrl = (params?: GetAdminGlobalSettingsParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/admin/globalSettings?${stringifiedParams}` : `/admin/globalSettings`
}

export const getAdminGlobalSettings = async (params?: GetAdminGlobalSettingsParams, options?: RequestInit): Promise<getAdminGlobalSettingsResponse> => {
  
  return customInstance<getAdminGlobalSettingsResponse>(getGetAdminGlobalSettingsUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type postAdminGlobalSettingsResponse200 = {
  data: GlobalSettings
  status: 200
}
    
export type postAdminGlobalSettingsResponseComposite = postAdminGlobalSettingsResponse200;
    
export type postAdminGlobalSettingsResponse = postAdminGlobalSettingsResponseComposite & {
  headers: Headers;
}

export const getPostAdminGlobalSettingsUrl = (params?: PostAdminGlobalSettingsParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/admin/globalSettings?${stringifiedParams}` : `/admin/globalSettings`
}

export const postAdminGlobalSettings = async (globalSettings: NonReadonly<GlobalSettings>,
    params?: PostAdminGlobalSettingsParams, options?: RequestInit): Promise<postAdminGlobalSettingsResponse> => {
  
  return customInstance<postAdminGlobalSettingsResponse>(getPostAdminGlobalSettingsUrl(params),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      globalSettings,)
  }
);}



export type getAdminGlobalSettingsAppearanceSettingsResponse200 = {
  data: AppearanceSettings
  status: 200
}
    
export type getAdminGlobalSettingsAppearanceSettingsResponseComposite = getAdminGlobalSettingsAppearanceSettingsResponse200;
    
export type getAdminGlobalSettingsAppearanceSettingsResponse = getAdminGlobalSettingsAppearanceSettingsResponseComposite & {
  headers: Headers;
}

export const getGetAdminGlobalSettingsAppearanceSettingsUrl = (params?: GetAdminGlobalSettingsAppearanceSettingsParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/admin/globalSettings/appearanceSettings?${stringifiedParams}` : `/admin/globalSettings/appearanceSettings`
}

export const getAdminGlobalSettingsAppearanceSettings = async (params?: GetAdminGlobalSettingsAppearanceSettingsParams, options?: RequestInit): Promise<getAdminGlobalSettingsAppearanceSettingsResponse> => {
  
  return customInstance<getAdminGlobalSettingsAppearanceSettingsResponse>(getGetAdminGlobalSettingsAppearanceSettingsUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type postAdminGlobalSettingsAppearanceSettingsResponse200 = {
  data: AppearanceSettings
  status: 200
}
    
export type postAdminGlobalSettingsAppearanceSettingsResponseComposite = postAdminGlobalSettingsAppearanceSettingsResponse200;
    
export type postAdminGlobalSettingsAppearanceSettingsResponse = postAdminGlobalSettingsAppearanceSettingsResponseComposite & {
  headers: Headers;
}

export const getPostAdminGlobalSettingsAppearanceSettingsUrl = (params?: PostAdminGlobalSettingsAppearanceSettingsParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/admin/globalSettings/appearanceSettings?${stringifiedParams}` : `/admin/globalSettings/appearanceSettings`
}

export const postAdminGlobalSettingsAppearanceSettings = async (appearanceSettings: NonReadonly<AppearanceSettings>,
    params?: PostAdminGlobalSettingsAppearanceSettingsParams, options?: RequestInit): Promise<postAdminGlobalSettingsAppearanceSettingsResponse> => {
  
  return customInstance<postAdminGlobalSettingsAppearanceSettingsResponse>(getPostAdminGlobalSettingsAppearanceSettingsUrl(params),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      appearanceSettings,)
  }
);}



export type getAdminGlobalSettingsLicenseResponse200 = {
  data: License
  status: 200
}
    
export type getAdminGlobalSettingsLicenseResponseComposite = getAdminGlobalSettingsLicenseResponse200;
    
export type getAdminGlobalSettingsLicenseResponse = getAdminGlobalSettingsLicenseResponseComposite & {
  headers: Headers;
}

export const getGetAdminGlobalSettingsLicenseUrl = (params?: GetAdminGlobalSettingsLicenseParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/admin/globalSettings/license?${stringifiedParams}` : `/admin/globalSettings/license`
}

export const getAdminGlobalSettingsLicense = async (params?: GetAdminGlobalSettingsLicenseParams, options?: RequestInit): Promise<getAdminGlobalSettingsLicenseResponse> => {
  
  return customInstance<getAdminGlobalSettingsLicenseResponse>(getGetAdminGlobalSettingsLicenseUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type postAdminGlobalSettingsLicenseResponse200 = {
  data: License
  status: 200
}
    
export type postAdminGlobalSettingsLicenseResponseComposite = postAdminGlobalSettingsLicenseResponse200;
    
export type postAdminGlobalSettingsLicenseResponse = postAdminGlobalSettingsLicenseResponseComposite & {
  headers: Headers;
}

export const getPostAdminGlobalSettingsLicenseUrl = (params?: PostAdminGlobalSettingsLicenseParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/admin/globalSettings/license?${stringifiedParams}` : `/admin/globalSettings/license`
}

export const postAdminGlobalSettingsLicense = async (license: NonReadonly<License>,
    params?: PostAdminGlobalSettingsLicenseParams, options?: RequestInit): Promise<postAdminGlobalSettingsLicenseResponse> => {
  
  return customInstance<postAdminGlobalSettingsLicenseResponse>(getPostAdminGlobalSettingsLicenseUrl(params),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      license,)
  }
);}



export type getAdminGlobalSettingsLocaleSettingsResponse200 = {
  data: LocaleSettings
  status: 200
}
    
export type getAdminGlobalSettingsLocaleSettingsResponseComposite = getAdminGlobalSettingsLocaleSettingsResponse200;
    
export type getAdminGlobalSettingsLocaleSettingsResponse = getAdminGlobalSettingsLocaleSettingsResponseComposite & {
  headers: Headers;
}

export const getGetAdminGlobalSettingsLocaleSettingsUrl = (params?: GetAdminGlobalSettingsLocaleSettingsParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/admin/globalSettings/localeSettings?${stringifiedParams}` : `/admin/globalSettings/localeSettings`
}

export const getAdminGlobalSettingsLocaleSettings = async (params?: GetAdminGlobalSettingsLocaleSettingsParams, options?: RequestInit): Promise<getAdminGlobalSettingsLocaleSettingsResponse> => {
  
  return customInstance<getAdminGlobalSettingsLocaleSettingsResponse>(getGetAdminGlobalSettingsLocaleSettingsUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type postAdminGlobalSettingsLocaleSettingsResponse200 = {
  data: LocaleSettings
  status: 200
}
    
export type postAdminGlobalSettingsLocaleSettingsResponseComposite = postAdminGlobalSettingsLocaleSettingsResponse200;
    
export type postAdminGlobalSettingsLocaleSettingsResponse = postAdminGlobalSettingsLocaleSettingsResponseComposite & {
  headers: Headers;
}

export const getPostAdminGlobalSettingsLocaleSettingsUrl = (params?: PostAdminGlobalSettingsLocaleSettingsParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/admin/globalSettings/localeSettings?${stringifiedParams}` : `/admin/globalSettings/localeSettings`
}

export const postAdminGlobalSettingsLocaleSettings = async (localeSettings: NonReadonly<LocaleSettings>,
    params?: PostAdminGlobalSettingsLocaleSettingsParams, options?: RequestInit): Promise<postAdminGlobalSettingsLocaleSettingsResponse> => {
  
  return customInstance<postAdminGlobalSettingsLocaleSettingsResponse>(getPostAdminGlobalSettingsLocaleSettingsUrl(params),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      localeSettings,)
  }
);}



export type getAdminGlobalSettingsNotificationSettingsResponse200 = {
  data: NotificationSettings
  status: 200
}
    
export type getAdminGlobalSettingsNotificationSettingsResponseComposite = getAdminGlobalSettingsNotificationSettingsResponse200;
    
export type getAdminGlobalSettingsNotificationSettingsResponse = getAdminGlobalSettingsNotificationSettingsResponseComposite & {
  headers: Headers;
}

export const getGetAdminGlobalSettingsNotificationSettingsUrl = (params?: GetAdminGlobalSettingsNotificationSettingsParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/admin/globalSettings/notificationSettings?${stringifiedParams}` : `/admin/globalSettings/notificationSettings`
}

export const getAdminGlobalSettingsNotificationSettings = async (params?: GetAdminGlobalSettingsNotificationSettingsParams, options?: RequestInit): Promise<getAdminGlobalSettingsNotificationSettingsResponse> => {
  
  return customInstance<getAdminGlobalSettingsNotificationSettingsResponse>(getGetAdminGlobalSettingsNotificationSettingsUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type postAdminGlobalSettingsNotificationSettingsResponse200 = {
  data: NotificationSettings
  status: 200
}
    
export type postAdminGlobalSettingsNotificationSettingsResponseComposite = postAdminGlobalSettingsNotificationSettingsResponse200;
    
export type postAdminGlobalSettingsNotificationSettingsResponse = postAdminGlobalSettingsNotificationSettingsResponseComposite & {
  headers: Headers;
}

export const getPostAdminGlobalSettingsNotificationSettingsUrl = (params?: PostAdminGlobalSettingsNotificationSettingsParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/admin/globalSettings/notificationSettings?${stringifiedParams}` : `/admin/globalSettings/notificationSettings`
}

export const postAdminGlobalSettingsNotificationSettings = async (notificationSettings: NonReadonly<NotificationSettings>,
    params?: PostAdminGlobalSettingsNotificationSettingsParams, options?: RequestInit): Promise<postAdminGlobalSettingsNotificationSettingsResponse> => {
  
  return customInstance<postAdminGlobalSettingsNotificationSettingsResponse>(getPostAdminGlobalSettingsNotificationSettingsUrl(params),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      notificationSettings,)
  }
);}



export type getAdminGlobalSettingsRestSettingsResponse200 = {
  data: RestCorsSettings
  status: 200
}
    
export type getAdminGlobalSettingsRestSettingsResponseComposite = getAdminGlobalSettingsRestSettingsResponse200;
    
export type getAdminGlobalSettingsRestSettingsResponse = getAdminGlobalSettingsRestSettingsResponseComposite & {
  headers: Headers;
}

export const getGetAdminGlobalSettingsRestSettingsUrl = (params?: GetAdminGlobalSettingsRestSettingsParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/admin/globalSettings/restSettings?${stringifiedParams}` : `/admin/globalSettings/restSettings`
}

export const getAdminGlobalSettingsRestSettings = async (params?: GetAdminGlobalSettingsRestSettingsParams, options?: RequestInit): Promise<getAdminGlobalSettingsRestSettingsResponse> => {
  
  return customInstance<getAdminGlobalSettingsRestSettingsResponse>(getGetAdminGlobalSettingsRestSettingsUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type postAdminGlobalSettingsRestSettingsResponse200 = {
  data: RestCorsSettings
  status: 200
}
    
export type postAdminGlobalSettingsRestSettingsResponseComposite = postAdminGlobalSettingsRestSettingsResponse200;
    
export type postAdminGlobalSettingsRestSettingsResponse = postAdminGlobalSettingsRestSettingsResponseComposite & {
  headers: Headers;
}

export const getPostAdminGlobalSettingsRestSettingsUrl = (params?: PostAdminGlobalSettingsRestSettingsParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/admin/globalSettings/restSettings?${stringifiedParams}` : `/admin/globalSettings/restSettings`
}

export const postAdminGlobalSettingsRestSettings = async (restCorsSettings: NonReadonly<RestCorsSettings>,
    params?: PostAdminGlobalSettingsRestSettingsParams, options?: RequestInit): Promise<postAdminGlobalSettingsRestSettingsResponse> => {
  
  return customInstance<postAdminGlobalSettingsRestSettingsResponse>(getPostAdminGlobalSettingsRestSettingsUrl(params),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      restCorsSettings,)
  }
);}



export type getAdminGlobalSettingsSystemSettingsResponse200 = {
  data: SystemSettings
  status: 200
}
    
export type getAdminGlobalSettingsSystemSettingsResponseComposite = getAdminGlobalSettingsSystemSettingsResponse200;
    
export type getAdminGlobalSettingsSystemSettingsResponse = getAdminGlobalSettingsSystemSettingsResponseComposite & {
  headers: Headers;
}

export const getGetAdminGlobalSettingsSystemSettingsUrl = (params?: GetAdminGlobalSettingsSystemSettingsParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/admin/globalSettings/systemSettings?${stringifiedParams}` : `/admin/globalSettings/systemSettings`
}

export const getAdminGlobalSettingsSystemSettings = async (params?: GetAdminGlobalSettingsSystemSettingsParams, options?: RequestInit): Promise<getAdminGlobalSettingsSystemSettingsResponse> => {
  
  return customInstance<getAdminGlobalSettingsSystemSettingsResponse>(getGetAdminGlobalSettingsSystemSettingsUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type postAdminGlobalSettingsSystemSettingsResponse200 = {
  data: SystemSettings
  status: 200
}
    
export type postAdminGlobalSettingsSystemSettingsResponseComposite = postAdminGlobalSettingsSystemSettingsResponse200;
    
export type postAdminGlobalSettingsSystemSettingsResponse = postAdminGlobalSettingsSystemSettingsResponseComposite & {
  headers: Headers;
}

export const getPostAdminGlobalSettingsSystemSettingsUrl = (params?: PostAdminGlobalSettingsSystemSettingsParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/admin/globalSettings/systemSettings?${stringifiedParams}` : `/admin/globalSettings/systemSettings`
}

export const postAdminGlobalSettingsSystemSettings = async (systemSettings: NonReadonly<SystemSettings>,
    params?: PostAdminGlobalSettingsSystemSettingsParams, options?: RequestInit): Promise<postAdminGlobalSettingsSystemSettingsResponse> => {
  
  return customInstance<postAdminGlobalSettingsSystemSettingsResponse>(getPostAdminGlobalSettingsSystemSettingsUrl(params),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      systemSettings,)
  }
);}



export type getAdminProjectsResponse200 = {
  data: Project[]
  status: 200
}
    
export type getAdminProjectsResponseComposite = getAdminProjectsResponse200;
    
export type getAdminProjectsResponse = getAdminProjectsResponseComposite & {
  headers: Headers;
}

export const getGetAdminProjectsUrl = (params?: GetAdminProjectsParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/admin/projects?${stringifiedParams}` : `/admin/projects`
}

export const getAdminProjects = async (params?: GetAdminProjectsParams, options?: RequestInit): Promise<getAdminProjectsResponse> => {
  
  return customInstance<getAdminProjectsResponse>(getGetAdminProjectsUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type postAdminProjectsResponse200 = {
  data: Project
  status: 200
}
    
export type postAdminProjectsResponseComposite = postAdminProjectsResponse200;
    
export type postAdminProjectsResponse = postAdminProjectsResponseComposite & {
  headers: Headers;
}

export const getPostAdminProjectsUrl = (params?: PostAdminProjectsParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/admin/projects?${stringifiedParams}` : `/admin/projects`
}

export const postAdminProjects = async (project: NonReadonly<Project>,
    params?: PostAdminProjectsParams, options?: RequestInit): Promise<postAdminProjectsResponse> => {
  
  return customInstance<postAdminProjectsResponse>(getPostAdminProjectsUrl(params),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      project,)
  }
);}



export type getAdminProjectsIdResponse200 = {
  data: Project
  status: 200
}
    
export type getAdminProjectsIdResponseComposite = getAdminProjectsIdResponse200;
    
export type getAdminProjectsIdResponse = getAdminProjectsIdResponseComposite & {
  headers: Headers;
}

export const getGetAdminProjectsIdUrl = (id: string,
    params?: GetAdminProjectsIdParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/admin/projects/${id}?${stringifiedParams}` : `/admin/projects/${id}`
}

export const getAdminProjectsId = async (id: string,
    params?: GetAdminProjectsIdParams, options?: RequestInit): Promise<getAdminProjectsIdResponse> => {
  
  return customInstance<getAdminProjectsIdResponse>(getGetAdminProjectsIdUrl(id,params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type postAdminProjectsIdResponse200 = {
  data: Project
  status: 200
}
    
export type postAdminProjectsIdResponseComposite = postAdminProjectsIdResponse200;
    
export type postAdminProjectsIdResponse = postAdminProjectsIdResponseComposite & {
  headers: Headers;
}

export const getPostAdminProjectsIdUrl = (id: string,
    params?: PostAdminProjectsIdParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/admin/projects/${id}?${stringifiedParams}` : `/admin/projects/${id}`
}

export const postAdminProjectsId = async (id: string,
    project: NonReadonly<Project>,
    params?: PostAdminProjectsIdParams, options?: RequestInit): Promise<postAdminProjectsIdResponse> => {
  
  return customInstance<postAdminProjectsIdResponse>(getPostAdminProjectsIdUrl(id,params),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      project,)
  }
);}



export type deleteAdminProjectsIdResponse200 = {
  data: void
  status: 200
}
    
export type deleteAdminProjectsIdResponseComposite = deleteAdminProjectsIdResponse200;
    
export type deleteAdminProjectsIdResponse = deleteAdminProjectsIdResponseComposite & {
  headers: Headers;
}

export const getDeleteAdminProjectsIdUrl = (id: string,) => {


  

  return `/admin/projects/${id}`
}

export const deleteAdminProjectsId = async (id: string, options?: RequestInit): Promise<deleteAdminProjectsIdResponse> => {
  
  return customInstance<deleteAdminProjectsIdResponse>(getDeleteAdminProjectsIdUrl(id),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
);}



export type getAdminProjectsIdArticlesResponse200 = {
  data: Article[]
  status: 200
}
    
export type getAdminProjectsIdArticlesResponseComposite = getAdminProjectsIdArticlesResponse200;
    
export type getAdminProjectsIdArticlesResponse = getAdminProjectsIdArticlesResponseComposite & {
  headers: Headers;
}

export const getGetAdminProjectsIdArticlesUrl = (id: string,
    params?: GetAdminProjectsIdArticlesParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/admin/projects/${id}/articles?${stringifiedParams}` : `/admin/projects/${id}/articles`
}

export const getAdminProjectsIdArticles = async (id: string,
    params?: GetAdminProjectsIdArticlesParams, options?: RequestInit): Promise<getAdminProjectsIdArticlesResponse> => {
  
  return customInstance<getAdminProjectsIdArticlesResponse>(getGetAdminProjectsIdArticlesUrl(id,params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type getAdminProjectsIdCustomFieldsResponse200 = {
  data: ProjectCustomField[]
  status: 200
}
    
export type getAdminProjectsIdCustomFieldsResponseComposite = getAdminProjectsIdCustomFieldsResponse200;
    
export type getAdminProjectsIdCustomFieldsResponse = getAdminProjectsIdCustomFieldsResponseComposite & {
  headers: Headers;
}

export const getGetAdminProjectsIdCustomFieldsUrl = (id: string,
    params?: GetAdminProjectsIdCustomFieldsParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/admin/projects/${id}/customFields?${stringifiedParams}` : `/admin/projects/${id}/customFields`
}

export const getAdminProjectsIdCustomFields = async (id: string,
    params?: GetAdminProjectsIdCustomFieldsParams, options?: RequestInit): Promise<getAdminProjectsIdCustomFieldsResponse> => {
  
  return customInstance<getAdminProjectsIdCustomFieldsResponse>(getGetAdminProjectsIdCustomFieldsUrl(id,params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type postAdminProjectsIdCustomFieldsResponse200 = {
  data: ProjectCustomField
  status: 200
}
    
export type postAdminProjectsIdCustomFieldsResponseComposite = postAdminProjectsIdCustomFieldsResponse200;
    
export type postAdminProjectsIdCustomFieldsResponse = postAdminProjectsIdCustomFieldsResponseComposite & {
  headers: Headers;
}

export const getPostAdminProjectsIdCustomFieldsUrl = (id: string,
    params?: PostAdminProjectsIdCustomFieldsParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/admin/projects/${id}/customFields?${stringifiedParams}` : `/admin/projects/${id}/customFields`
}

export const postAdminProjectsIdCustomFields = async (id: string,
    projectCustomField: NonReadonly<ProjectCustomField>,
    params?: PostAdminProjectsIdCustomFieldsParams, options?: RequestInit): Promise<postAdminProjectsIdCustomFieldsResponse> => {
  
  return customInstance<postAdminProjectsIdCustomFieldsResponse>(getPostAdminProjectsIdCustomFieldsUrl(id,params),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      projectCustomField,)
  }
);}



export type getAdminProjectsIdCustomFieldsProjectCustomFieldIdResponse200 = {
  data: ProjectCustomField
  status: 200
}
    
export type getAdminProjectsIdCustomFieldsProjectCustomFieldIdResponseComposite = getAdminProjectsIdCustomFieldsProjectCustomFieldIdResponse200;
    
export type getAdminProjectsIdCustomFieldsProjectCustomFieldIdResponse = getAdminProjectsIdCustomFieldsProjectCustomFieldIdResponseComposite & {
  headers: Headers;
}

export const getGetAdminProjectsIdCustomFieldsProjectCustomFieldIdUrl = (id: string,
    projectCustomFieldId: string,
    params?: GetAdminProjectsIdCustomFieldsProjectCustomFieldIdParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/admin/projects/${id}/customFields/${projectCustomFieldId}?${stringifiedParams}` : `/admin/projects/${id}/customFields/${projectCustomFieldId}`
}

export const getAdminProjectsIdCustomFieldsProjectCustomFieldId = async (id: string,
    projectCustomFieldId: string,
    params?: GetAdminProjectsIdCustomFieldsProjectCustomFieldIdParams, options?: RequestInit): Promise<getAdminProjectsIdCustomFieldsProjectCustomFieldIdResponse> => {
  
  return customInstance<getAdminProjectsIdCustomFieldsProjectCustomFieldIdResponse>(getGetAdminProjectsIdCustomFieldsProjectCustomFieldIdUrl(id,projectCustomFieldId,params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type postAdminProjectsIdCustomFieldsProjectCustomFieldIdResponse200 = {
  data: ProjectCustomField
  status: 200
}
    
export type postAdminProjectsIdCustomFieldsProjectCustomFieldIdResponseComposite = postAdminProjectsIdCustomFieldsProjectCustomFieldIdResponse200;
    
export type postAdminProjectsIdCustomFieldsProjectCustomFieldIdResponse = postAdminProjectsIdCustomFieldsProjectCustomFieldIdResponseComposite & {
  headers: Headers;
}

export const getPostAdminProjectsIdCustomFieldsProjectCustomFieldIdUrl = (id: string,
    projectCustomFieldId: string,
    params?: PostAdminProjectsIdCustomFieldsProjectCustomFieldIdParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/admin/projects/${id}/customFields/${projectCustomFieldId}?${stringifiedParams}` : `/admin/projects/${id}/customFields/${projectCustomFieldId}`
}

export const postAdminProjectsIdCustomFieldsProjectCustomFieldId = async (id: string,
    projectCustomFieldId: string,
    projectCustomField: NonReadonly<ProjectCustomField>,
    params?: PostAdminProjectsIdCustomFieldsProjectCustomFieldIdParams, options?: RequestInit): Promise<postAdminProjectsIdCustomFieldsProjectCustomFieldIdResponse> => {
  
  return customInstance<postAdminProjectsIdCustomFieldsProjectCustomFieldIdResponse>(getPostAdminProjectsIdCustomFieldsProjectCustomFieldIdUrl(id,projectCustomFieldId,params),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      projectCustomField,)
  }
);}



export type deleteAdminProjectsIdCustomFieldsProjectCustomFieldIdResponse200 = {
  data: void
  status: 200
}
    
export type deleteAdminProjectsIdCustomFieldsProjectCustomFieldIdResponseComposite = deleteAdminProjectsIdCustomFieldsProjectCustomFieldIdResponse200;
    
export type deleteAdminProjectsIdCustomFieldsProjectCustomFieldIdResponse = deleteAdminProjectsIdCustomFieldsProjectCustomFieldIdResponseComposite & {
  headers: Headers;
}

export const getDeleteAdminProjectsIdCustomFieldsProjectCustomFieldIdUrl = (id: string,
    projectCustomFieldId: string,) => {


  

  return `/admin/projects/${id}/customFields/${projectCustomFieldId}`
}

export const deleteAdminProjectsIdCustomFieldsProjectCustomFieldId = async (id: string,
    projectCustomFieldId: string, options?: RequestInit): Promise<deleteAdminProjectsIdCustomFieldsProjectCustomFieldIdResponse> => {
  
  return customInstance<deleteAdminProjectsIdCustomFieldsProjectCustomFieldIdResponse>(getDeleteAdminProjectsIdCustomFieldsProjectCustomFieldIdUrl(id,projectCustomFieldId),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
);}



export type getAdminProjectsIdIssuesResponse200 = {
  data: Issue[]
  status: 200
}
    
export type getAdminProjectsIdIssuesResponseComposite = getAdminProjectsIdIssuesResponse200;
    
export type getAdminProjectsIdIssuesResponse = getAdminProjectsIdIssuesResponseComposite & {
  headers: Headers;
}

export const getGetAdminProjectsIdIssuesUrl = (id: string,
    params?: GetAdminProjectsIdIssuesParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/admin/projects/${id}/issues?${stringifiedParams}` : `/admin/projects/${id}/issues`
}

export const getAdminProjectsIdIssues = async (id: string,
    params?: GetAdminProjectsIdIssuesParams, options?: RequestInit): Promise<getAdminProjectsIdIssuesResponse> => {
  
  return customInstance<getAdminProjectsIdIssuesResponse>(getGetAdminProjectsIdIssuesUrl(id,params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type postAdminProjectsIdIssuesResponse200 = {
  data: Issue
  status: 200
}
    
export type postAdminProjectsIdIssuesResponseComposite = postAdminProjectsIdIssuesResponse200;
    
export type postAdminProjectsIdIssuesResponse = postAdminProjectsIdIssuesResponseComposite & {
  headers: Headers;
}

export const getPostAdminProjectsIdIssuesUrl = (id: string,
    params?: PostAdminProjectsIdIssuesParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/admin/projects/${id}/issues?${stringifiedParams}` : `/admin/projects/${id}/issues`
}

export const postAdminProjectsIdIssues = async (id: string,
    issue: NonReadonly<Issue>,
    params?: PostAdminProjectsIdIssuesParams, options?: RequestInit): Promise<postAdminProjectsIdIssuesResponse> => {
  
  return customInstance<postAdminProjectsIdIssuesResponse>(getPostAdminProjectsIdIssuesUrl(id,params),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      issue,)
  }
);}



export type getAdminProjectsIdIssuesIssueIdResponse200 = {
  data: Issue
  status: 200
}
    
export type getAdminProjectsIdIssuesIssueIdResponseComposite = getAdminProjectsIdIssuesIssueIdResponse200;
    
export type getAdminProjectsIdIssuesIssueIdResponse = getAdminProjectsIdIssuesIssueIdResponseComposite & {
  headers: Headers;
}

export const getGetAdminProjectsIdIssuesIssueIdUrl = (id: string,
    issueId: string,
    params?: GetAdminProjectsIdIssuesIssueIdParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/admin/projects/${id}/issues/${issueId}?${stringifiedParams}` : `/admin/projects/${id}/issues/${issueId}`
}

export const getAdminProjectsIdIssuesIssueId = async (id: string,
    issueId: string,
    params?: GetAdminProjectsIdIssuesIssueIdParams, options?: RequestInit): Promise<getAdminProjectsIdIssuesIssueIdResponse> => {
  
  return customInstance<getAdminProjectsIdIssuesIssueIdResponse>(getGetAdminProjectsIdIssuesIssueIdUrl(id,issueId,params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type postAdminProjectsIdIssuesIssueIdResponse200 = {
  data: Issue
  status: 200
}
    
export type postAdminProjectsIdIssuesIssueIdResponseComposite = postAdminProjectsIdIssuesIssueIdResponse200;
    
export type postAdminProjectsIdIssuesIssueIdResponse = postAdminProjectsIdIssuesIssueIdResponseComposite & {
  headers: Headers;
}

export const getPostAdminProjectsIdIssuesIssueIdUrl = (id: string,
    issueId: string,
    params?: PostAdminProjectsIdIssuesIssueIdParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/admin/projects/${id}/issues/${issueId}?${stringifiedParams}` : `/admin/projects/${id}/issues/${issueId}`
}

export const postAdminProjectsIdIssuesIssueId = async (id: string,
    issueId: string,
    issue: NonReadonly<Issue>,
    params?: PostAdminProjectsIdIssuesIssueIdParams, options?: RequestInit): Promise<postAdminProjectsIdIssuesIssueIdResponse> => {
  
  return customInstance<postAdminProjectsIdIssuesIssueIdResponse>(getPostAdminProjectsIdIssuesIssueIdUrl(id,issueId,params),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      issue,)
  }
);}



export type deleteAdminProjectsIdIssuesIssueIdResponse200 = {
  data: void
  status: 200
}
    
export type deleteAdminProjectsIdIssuesIssueIdResponseComposite = deleteAdminProjectsIdIssuesIssueIdResponse200;
    
export type deleteAdminProjectsIdIssuesIssueIdResponse = deleteAdminProjectsIdIssuesIssueIdResponseComposite & {
  headers: Headers;
}

export const getDeleteAdminProjectsIdIssuesIssueIdUrl = (id: string,
    issueId: string,) => {


  

  return `/admin/projects/${id}/issues/${issueId}`
}

export const deleteAdminProjectsIdIssuesIssueId = async (id: string,
    issueId: string, options?: RequestInit): Promise<deleteAdminProjectsIdIssuesIssueIdResponse> => {
  
  return customInstance<deleteAdminProjectsIdIssuesIssueIdResponse>(getDeleteAdminProjectsIdIssuesIssueIdUrl(id,issueId),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
);}



export type getAdminProjectsIdTimeTrackingSettingsResponse200 = {
  data: ProjectTimeTrackingSettings
  status: 200
}
    
export type getAdminProjectsIdTimeTrackingSettingsResponseComposite = getAdminProjectsIdTimeTrackingSettingsResponse200;
    
export type getAdminProjectsIdTimeTrackingSettingsResponse = getAdminProjectsIdTimeTrackingSettingsResponseComposite & {
  headers: Headers;
}

export const getGetAdminProjectsIdTimeTrackingSettingsUrl = (id: string,
    params?: GetAdminProjectsIdTimeTrackingSettingsParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/admin/projects/${id}/timeTrackingSettings?${stringifiedParams}` : `/admin/projects/${id}/timeTrackingSettings`
}

export const getAdminProjectsIdTimeTrackingSettings = async (id: string,
    params?: GetAdminProjectsIdTimeTrackingSettingsParams, options?: RequestInit): Promise<getAdminProjectsIdTimeTrackingSettingsResponse> => {
  
  return customInstance<getAdminProjectsIdTimeTrackingSettingsResponse>(getGetAdminProjectsIdTimeTrackingSettingsUrl(id,params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type postAdminProjectsIdTimeTrackingSettingsResponse200 = {
  data: ProjectTimeTrackingSettings
  status: 200
}
    
export type postAdminProjectsIdTimeTrackingSettingsResponseComposite = postAdminProjectsIdTimeTrackingSettingsResponse200;
    
export type postAdminProjectsIdTimeTrackingSettingsResponse = postAdminProjectsIdTimeTrackingSettingsResponseComposite & {
  headers: Headers;
}

export const getPostAdminProjectsIdTimeTrackingSettingsUrl = (id: string,
    params?: PostAdminProjectsIdTimeTrackingSettingsParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/admin/projects/${id}/timeTrackingSettings?${stringifiedParams}` : `/admin/projects/${id}/timeTrackingSettings`
}

export const postAdminProjectsIdTimeTrackingSettings = async (id: string,
    projectTimeTrackingSettings: NonReadonly<ProjectTimeTrackingSettings>,
    params?: PostAdminProjectsIdTimeTrackingSettingsParams, options?: RequestInit): Promise<postAdminProjectsIdTimeTrackingSettingsResponse> => {
  
  return customInstance<postAdminProjectsIdTimeTrackingSettingsResponse>(getPostAdminProjectsIdTimeTrackingSettingsUrl(id,params),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      projectTimeTrackingSettings,)
  }
);}



export type getAdminProjectsIdTimeTrackingSettingsWorkItemTypesResponse200 = {
  data: WorkItemType[]
  status: 200
}
    
export type getAdminProjectsIdTimeTrackingSettingsWorkItemTypesResponseComposite = getAdminProjectsIdTimeTrackingSettingsWorkItemTypesResponse200;
    
export type getAdminProjectsIdTimeTrackingSettingsWorkItemTypesResponse = getAdminProjectsIdTimeTrackingSettingsWorkItemTypesResponseComposite & {
  headers: Headers;
}

export const getGetAdminProjectsIdTimeTrackingSettingsWorkItemTypesUrl = (id: string,
    params?: GetAdminProjectsIdTimeTrackingSettingsWorkItemTypesParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/admin/projects/${id}/timeTrackingSettings/workItemTypes?${stringifiedParams}` : `/admin/projects/${id}/timeTrackingSettings/workItemTypes`
}

export const getAdminProjectsIdTimeTrackingSettingsWorkItemTypes = async (id: string,
    params?: GetAdminProjectsIdTimeTrackingSettingsWorkItemTypesParams, options?: RequestInit): Promise<getAdminProjectsIdTimeTrackingSettingsWorkItemTypesResponse> => {
  
  return customInstance<getAdminProjectsIdTimeTrackingSettingsWorkItemTypesResponse>(getGetAdminProjectsIdTimeTrackingSettingsWorkItemTypesUrl(id,params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type postAdminProjectsIdTimeTrackingSettingsWorkItemTypesResponse200 = {
  data: WorkItemType
  status: 200
}
    
export type postAdminProjectsIdTimeTrackingSettingsWorkItemTypesResponseComposite = postAdminProjectsIdTimeTrackingSettingsWorkItemTypesResponse200;
    
export type postAdminProjectsIdTimeTrackingSettingsWorkItemTypesResponse = postAdminProjectsIdTimeTrackingSettingsWorkItemTypesResponseComposite & {
  headers: Headers;
}

export const getPostAdminProjectsIdTimeTrackingSettingsWorkItemTypesUrl = (id: string,
    params?: PostAdminProjectsIdTimeTrackingSettingsWorkItemTypesParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/admin/projects/${id}/timeTrackingSettings/workItemTypes?${stringifiedParams}` : `/admin/projects/${id}/timeTrackingSettings/workItemTypes`
}

export const postAdminProjectsIdTimeTrackingSettingsWorkItemTypes = async (id: string,
    workItemType: NonReadonly<WorkItemType>,
    params?: PostAdminProjectsIdTimeTrackingSettingsWorkItemTypesParams, options?: RequestInit): Promise<postAdminProjectsIdTimeTrackingSettingsWorkItemTypesResponse> => {
  
  return customInstance<postAdminProjectsIdTimeTrackingSettingsWorkItemTypesResponse>(getPostAdminProjectsIdTimeTrackingSettingsWorkItemTypesUrl(id,params),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      workItemType,)
  }
);}



export type getAdminProjectsIdTimeTrackingSettingsWorkItemTypesWorkItemTypeIdResponse200 = {
  data: WorkItemType
  status: 200
}
    
export type getAdminProjectsIdTimeTrackingSettingsWorkItemTypesWorkItemTypeIdResponseComposite = getAdminProjectsIdTimeTrackingSettingsWorkItemTypesWorkItemTypeIdResponse200;
    
export type getAdminProjectsIdTimeTrackingSettingsWorkItemTypesWorkItemTypeIdResponse = getAdminProjectsIdTimeTrackingSettingsWorkItemTypesWorkItemTypeIdResponseComposite & {
  headers: Headers;
}

export const getGetAdminProjectsIdTimeTrackingSettingsWorkItemTypesWorkItemTypeIdUrl = (id: string,
    workItemTypeId: string,
    params?: GetAdminProjectsIdTimeTrackingSettingsWorkItemTypesWorkItemTypeIdParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/admin/projects/${id}/timeTrackingSettings/workItemTypes/${workItemTypeId}?${stringifiedParams}` : `/admin/projects/${id}/timeTrackingSettings/workItemTypes/${workItemTypeId}`
}

export const getAdminProjectsIdTimeTrackingSettingsWorkItemTypesWorkItemTypeId = async (id: string,
    workItemTypeId: string,
    params?: GetAdminProjectsIdTimeTrackingSettingsWorkItemTypesWorkItemTypeIdParams, options?: RequestInit): Promise<getAdminProjectsIdTimeTrackingSettingsWorkItemTypesWorkItemTypeIdResponse> => {
  
  return customInstance<getAdminProjectsIdTimeTrackingSettingsWorkItemTypesWorkItemTypeIdResponse>(getGetAdminProjectsIdTimeTrackingSettingsWorkItemTypesWorkItemTypeIdUrl(id,workItemTypeId,params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type deleteAdminProjectsIdTimeTrackingSettingsWorkItemTypesWorkItemTypeIdResponse200 = {
  data: void
  status: 200
}
    
export type deleteAdminProjectsIdTimeTrackingSettingsWorkItemTypesWorkItemTypeIdResponseComposite = deleteAdminProjectsIdTimeTrackingSettingsWorkItemTypesWorkItemTypeIdResponse200;
    
export type deleteAdminProjectsIdTimeTrackingSettingsWorkItemTypesWorkItemTypeIdResponse = deleteAdminProjectsIdTimeTrackingSettingsWorkItemTypesWorkItemTypeIdResponseComposite & {
  headers: Headers;
}

export const getDeleteAdminProjectsIdTimeTrackingSettingsWorkItemTypesWorkItemTypeIdUrl = (id: string,
    workItemTypeId: string,) => {


  

  return `/admin/projects/${id}/timeTrackingSettings/workItemTypes/${workItemTypeId}`
}

export const deleteAdminProjectsIdTimeTrackingSettingsWorkItemTypesWorkItemTypeId = async (id: string,
    workItemTypeId: string, options?: RequestInit): Promise<deleteAdminProjectsIdTimeTrackingSettingsWorkItemTypesWorkItemTypeIdResponse> => {
  
  return customInstance<deleteAdminProjectsIdTimeTrackingSettingsWorkItemTypesWorkItemTypeIdResponse>(getDeleteAdminProjectsIdTimeTrackingSettingsWorkItemTypesWorkItemTypeIdUrl(id,workItemTypeId),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
);}



export type getAdminTelemetryResponse200 = {
  data: Telemetry
  status: 200
}
    
export type getAdminTelemetryResponseComposite = getAdminTelemetryResponse200;
    
export type getAdminTelemetryResponse = getAdminTelemetryResponseComposite & {
  headers: Headers;
}

export const getGetAdminTelemetryUrl = (params?: GetAdminTelemetryParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/admin/telemetry?${stringifiedParams}` : `/admin/telemetry`
}

export const getAdminTelemetry = async (params?: GetAdminTelemetryParams, options?: RequestInit): Promise<getAdminTelemetryResponse> => {
  
  return customInstance<getAdminTelemetryResponse>(getGetAdminTelemetryUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type getAdminTimeTrackingSettingsResponse200 = {
  data: GlobalTimeTrackingSettings
  status: 200
}
    
export type getAdminTimeTrackingSettingsResponseComposite = getAdminTimeTrackingSettingsResponse200;
    
export type getAdminTimeTrackingSettingsResponse = getAdminTimeTrackingSettingsResponseComposite & {
  headers: Headers;
}

export const getGetAdminTimeTrackingSettingsUrl = (params?: GetAdminTimeTrackingSettingsParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/admin/timeTrackingSettings?${stringifiedParams}` : `/admin/timeTrackingSettings`
}

export const getAdminTimeTrackingSettings = async (params?: GetAdminTimeTrackingSettingsParams, options?: RequestInit): Promise<getAdminTimeTrackingSettingsResponse> => {
  
  return customInstance<getAdminTimeTrackingSettingsResponse>(getGetAdminTimeTrackingSettingsUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type getAdminTimeTrackingSettingsWorkItemTypesResponse200 = {
  data: WorkItemType[]
  status: 200
}
    
export type getAdminTimeTrackingSettingsWorkItemTypesResponseComposite = getAdminTimeTrackingSettingsWorkItemTypesResponse200;
    
export type getAdminTimeTrackingSettingsWorkItemTypesResponse = getAdminTimeTrackingSettingsWorkItemTypesResponseComposite & {
  headers: Headers;
}

export const getGetAdminTimeTrackingSettingsWorkItemTypesUrl = (params?: GetAdminTimeTrackingSettingsWorkItemTypesParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/admin/timeTrackingSettings/workItemTypes?${stringifiedParams}` : `/admin/timeTrackingSettings/workItemTypes`
}

export const getAdminTimeTrackingSettingsWorkItemTypes = async (params?: GetAdminTimeTrackingSettingsWorkItemTypesParams, options?: RequestInit): Promise<getAdminTimeTrackingSettingsWorkItemTypesResponse> => {
  
  return customInstance<getAdminTimeTrackingSettingsWorkItemTypesResponse>(getGetAdminTimeTrackingSettingsWorkItemTypesUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type postAdminTimeTrackingSettingsWorkItemTypesResponse200 = {
  data: WorkItemType
  status: 200
}
    
export type postAdminTimeTrackingSettingsWorkItemTypesResponseComposite = postAdminTimeTrackingSettingsWorkItemTypesResponse200;
    
export type postAdminTimeTrackingSettingsWorkItemTypesResponse = postAdminTimeTrackingSettingsWorkItemTypesResponseComposite & {
  headers: Headers;
}

export const getPostAdminTimeTrackingSettingsWorkItemTypesUrl = (params?: PostAdminTimeTrackingSettingsWorkItemTypesParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/admin/timeTrackingSettings/workItemTypes?${stringifiedParams}` : `/admin/timeTrackingSettings/workItemTypes`
}

export const postAdminTimeTrackingSettingsWorkItemTypes = async (workItemType: NonReadonly<WorkItemType>,
    params?: PostAdminTimeTrackingSettingsWorkItemTypesParams, options?: RequestInit): Promise<postAdminTimeTrackingSettingsWorkItemTypesResponse> => {
  
  return customInstance<postAdminTimeTrackingSettingsWorkItemTypesResponse>(getPostAdminTimeTrackingSettingsWorkItemTypesUrl(params),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      workItemType,)
  }
);}



export type getAdminTimeTrackingSettingsWorkItemTypesWorkItemTypeIdResponse200 = {
  data: WorkItemType
  status: 200
}
    
export type getAdminTimeTrackingSettingsWorkItemTypesWorkItemTypeIdResponseComposite = getAdminTimeTrackingSettingsWorkItemTypesWorkItemTypeIdResponse200;
    
export type getAdminTimeTrackingSettingsWorkItemTypesWorkItemTypeIdResponse = getAdminTimeTrackingSettingsWorkItemTypesWorkItemTypeIdResponseComposite & {
  headers: Headers;
}

export const getGetAdminTimeTrackingSettingsWorkItemTypesWorkItemTypeIdUrl = (workItemTypeId: string,
    params?: GetAdminTimeTrackingSettingsWorkItemTypesWorkItemTypeIdParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/admin/timeTrackingSettings/workItemTypes/${workItemTypeId}?${stringifiedParams}` : `/admin/timeTrackingSettings/workItemTypes/${workItemTypeId}`
}

export const getAdminTimeTrackingSettingsWorkItemTypesWorkItemTypeId = async (workItemTypeId: string,
    params?: GetAdminTimeTrackingSettingsWorkItemTypesWorkItemTypeIdParams, options?: RequestInit): Promise<getAdminTimeTrackingSettingsWorkItemTypesWorkItemTypeIdResponse> => {
  
  return customInstance<getAdminTimeTrackingSettingsWorkItemTypesWorkItemTypeIdResponse>(getGetAdminTimeTrackingSettingsWorkItemTypesWorkItemTypeIdUrl(workItemTypeId,params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type postAdminTimeTrackingSettingsWorkItemTypesWorkItemTypeIdResponse200 = {
  data: WorkItemType
  status: 200
}
    
export type postAdminTimeTrackingSettingsWorkItemTypesWorkItemTypeIdResponseComposite = postAdminTimeTrackingSettingsWorkItemTypesWorkItemTypeIdResponse200;
    
export type postAdminTimeTrackingSettingsWorkItemTypesWorkItemTypeIdResponse = postAdminTimeTrackingSettingsWorkItemTypesWorkItemTypeIdResponseComposite & {
  headers: Headers;
}

export const getPostAdminTimeTrackingSettingsWorkItemTypesWorkItemTypeIdUrl = (workItemTypeId: string,
    params?: PostAdminTimeTrackingSettingsWorkItemTypesWorkItemTypeIdParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/admin/timeTrackingSettings/workItemTypes/${workItemTypeId}?${stringifiedParams}` : `/admin/timeTrackingSettings/workItemTypes/${workItemTypeId}`
}

export const postAdminTimeTrackingSettingsWorkItemTypesWorkItemTypeId = async (workItemTypeId: string,
    workItemType: NonReadonly<WorkItemType>,
    params?: PostAdminTimeTrackingSettingsWorkItemTypesWorkItemTypeIdParams, options?: RequestInit): Promise<postAdminTimeTrackingSettingsWorkItemTypesWorkItemTypeIdResponse> => {
  
  return customInstance<postAdminTimeTrackingSettingsWorkItemTypesWorkItemTypeIdResponse>(getPostAdminTimeTrackingSettingsWorkItemTypesWorkItemTypeIdUrl(workItemTypeId,params),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      workItemType,)
  }
);}



export type deleteAdminTimeTrackingSettingsWorkItemTypesWorkItemTypeIdResponse200 = {
  data: void
  status: 200
}
    
export type deleteAdminTimeTrackingSettingsWorkItemTypesWorkItemTypeIdResponseComposite = deleteAdminTimeTrackingSettingsWorkItemTypesWorkItemTypeIdResponse200;
    
export type deleteAdminTimeTrackingSettingsWorkItemTypesWorkItemTypeIdResponse = deleteAdminTimeTrackingSettingsWorkItemTypesWorkItemTypeIdResponseComposite & {
  headers: Headers;
}

export const getDeleteAdminTimeTrackingSettingsWorkItemTypesWorkItemTypeIdUrl = (workItemTypeId: string,) => {


  

  return `/admin/timeTrackingSettings/workItemTypes/${workItemTypeId}`
}

export const deleteAdminTimeTrackingSettingsWorkItemTypesWorkItemTypeId = async (workItemTypeId: string, options?: RequestInit): Promise<deleteAdminTimeTrackingSettingsWorkItemTypesWorkItemTypeIdResponse> => {
  
  return customInstance<deleteAdminTimeTrackingSettingsWorkItemTypesWorkItemTypeIdResponse>(getDeleteAdminTimeTrackingSettingsWorkItemTypesWorkItemTypeIdUrl(workItemTypeId),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
);}



export type getAdminTimeTrackingSettingsWorkTimeSettingsResponse200 = {
  data: WorkTimeSettings
  status: 200
}
    
export type getAdminTimeTrackingSettingsWorkTimeSettingsResponseComposite = getAdminTimeTrackingSettingsWorkTimeSettingsResponse200;
    
export type getAdminTimeTrackingSettingsWorkTimeSettingsResponse = getAdminTimeTrackingSettingsWorkTimeSettingsResponseComposite & {
  headers: Headers;
}

export const getGetAdminTimeTrackingSettingsWorkTimeSettingsUrl = (params?: GetAdminTimeTrackingSettingsWorkTimeSettingsParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/admin/timeTrackingSettings/workTimeSettings?${stringifiedParams}` : `/admin/timeTrackingSettings/workTimeSettings`
}

export const getAdminTimeTrackingSettingsWorkTimeSettings = async (params?: GetAdminTimeTrackingSettingsWorkTimeSettingsParams, options?: RequestInit): Promise<getAdminTimeTrackingSettingsWorkTimeSettingsResponse> => {
  
  return customInstance<getAdminTimeTrackingSettingsWorkTimeSettingsResponse>(getGetAdminTimeTrackingSettingsWorkTimeSettingsUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type postAdminTimeTrackingSettingsWorkTimeSettingsResponse200 = {
  data: WorkTimeSettings
  status: 200
}
    
export type postAdminTimeTrackingSettingsWorkTimeSettingsResponseComposite = postAdminTimeTrackingSettingsWorkTimeSettingsResponse200;
    
export type postAdminTimeTrackingSettingsWorkTimeSettingsResponse = postAdminTimeTrackingSettingsWorkTimeSettingsResponseComposite & {
  headers: Headers;
}

export const getPostAdminTimeTrackingSettingsWorkTimeSettingsUrl = (params?: PostAdminTimeTrackingSettingsWorkTimeSettingsParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/admin/timeTrackingSettings/workTimeSettings?${stringifiedParams}` : `/admin/timeTrackingSettings/workTimeSettings`
}

export const postAdminTimeTrackingSettingsWorkTimeSettings = async (workTimeSettings: NonReadonly<WorkTimeSettings>,
    params?: PostAdminTimeTrackingSettingsWorkTimeSettingsParams, options?: RequestInit): Promise<postAdminTimeTrackingSettingsWorkTimeSettingsResponse> => {
  
  return customInstance<postAdminTimeTrackingSettingsWorkTimeSettingsResponse>(getPostAdminTimeTrackingSettingsWorkTimeSettingsUrl(params),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      workTimeSettings,)
  }
);}



export type getAgilesResponse200 = {
  data: Agile[]
  status: 200
}
    
export type getAgilesResponseComposite = getAgilesResponse200;
    
export type getAgilesResponse = getAgilesResponseComposite & {
  headers: Headers;
}

export const getGetAgilesUrl = (params?: GetAgilesParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/agiles?${stringifiedParams}` : `/agiles`
}

export const getAgiles = async (params?: GetAgilesParams, options?: RequestInit): Promise<getAgilesResponse> => {
  
  return customInstance<getAgilesResponse>(getGetAgilesUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type postAgilesResponse200 = {
  data: Agile
  status: 200
}
    
export type postAgilesResponseComposite = postAgilesResponse200;
    
export type postAgilesResponse = postAgilesResponseComposite & {
  headers: Headers;
}

export const getPostAgilesUrl = (params?: PostAgilesParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/agiles?${stringifiedParams}` : `/agiles`
}

export const postAgiles = async (agile: NonReadonly<Agile>,
    params?: PostAgilesParams, options?: RequestInit): Promise<postAgilesResponse> => {
  
  return customInstance<postAgilesResponse>(getPostAgilesUrl(params),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      agile,)
  }
);}



export type getAgilesIdResponse200 = {
  data: Agile
  status: 200
}
    
export type getAgilesIdResponseComposite = getAgilesIdResponse200;
    
export type getAgilesIdResponse = getAgilesIdResponseComposite & {
  headers: Headers;
}

export const getGetAgilesIdUrl = (id: string,
    params?: GetAgilesIdParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/agiles/${id}?${stringifiedParams}` : `/agiles/${id}`
}

export const getAgilesId = async (id: string,
    params?: GetAgilesIdParams, options?: RequestInit): Promise<getAgilesIdResponse> => {
  
  return customInstance<getAgilesIdResponse>(getGetAgilesIdUrl(id,params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type postAgilesIdResponse200 = {
  data: Agile
  status: 200
}
    
export type postAgilesIdResponseComposite = postAgilesIdResponse200;
    
export type postAgilesIdResponse = postAgilesIdResponseComposite & {
  headers: Headers;
}

export const getPostAgilesIdUrl = (id: string,
    params?: PostAgilesIdParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/agiles/${id}?${stringifiedParams}` : `/agiles/${id}`
}

export const postAgilesId = async (id: string,
    agile: NonReadonly<Agile>,
    params?: PostAgilesIdParams, options?: RequestInit): Promise<postAgilesIdResponse> => {
  
  return customInstance<postAgilesIdResponse>(getPostAgilesIdUrl(id,params),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      agile,)
  }
);}



export type deleteAgilesIdResponse200 = {
  data: void
  status: 200
}
    
export type deleteAgilesIdResponseComposite = deleteAgilesIdResponse200;
    
export type deleteAgilesIdResponse = deleteAgilesIdResponseComposite & {
  headers: Headers;
}

export const getDeleteAgilesIdUrl = (id: string,) => {


  

  return `/agiles/${id}`
}

export const deleteAgilesId = async (id: string, options?: RequestInit): Promise<deleteAgilesIdResponse> => {
  
  return customInstance<deleteAgilesIdResponse>(getDeleteAgilesIdUrl(id),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
);}



export type getAgilesIdSprintsResponse200 = {
  data: Sprint[]
  status: 200
}
    
export type getAgilesIdSprintsResponseComposite = getAgilesIdSprintsResponse200;
    
export type getAgilesIdSprintsResponse = getAgilesIdSprintsResponseComposite & {
  headers: Headers;
}

export const getGetAgilesIdSprintsUrl = (id: string,
    params?: GetAgilesIdSprintsParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/agiles/${id}/sprints?${stringifiedParams}` : `/agiles/${id}/sprints`
}

export const getAgilesIdSprints = async (id: string,
    params?: GetAgilesIdSprintsParams, options?: RequestInit): Promise<getAgilesIdSprintsResponse> => {
  
  return customInstance<getAgilesIdSprintsResponse>(getGetAgilesIdSprintsUrl(id,params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type postAgilesIdSprintsResponse200 = {
  data: Sprint
  status: 200
}
    
export type postAgilesIdSprintsResponseComposite = postAgilesIdSprintsResponse200;
    
export type postAgilesIdSprintsResponse = postAgilesIdSprintsResponseComposite & {
  headers: Headers;
}

export const getPostAgilesIdSprintsUrl = (id: string,
    params?: PostAgilesIdSprintsParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/agiles/${id}/sprints?${stringifiedParams}` : `/agiles/${id}/sprints`
}

export const postAgilesIdSprints = async (id: string,
    sprint: NonReadonly<Sprint>,
    params?: PostAgilesIdSprintsParams, options?: RequestInit): Promise<postAgilesIdSprintsResponse> => {
  
  return customInstance<postAgilesIdSprintsResponse>(getPostAgilesIdSprintsUrl(id,params),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      sprint,)
  }
);}



export type getAgilesIdSprintsSprintIdResponse200 = {
  data: Sprint
  status: 200
}
    
export type getAgilesIdSprintsSprintIdResponseComposite = getAgilesIdSprintsSprintIdResponse200;
    
export type getAgilesIdSprintsSprintIdResponse = getAgilesIdSprintsSprintIdResponseComposite & {
  headers: Headers;
}

export const getGetAgilesIdSprintsSprintIdUrl = (id: string,
    sprintId: string,
    params?: GetAgilesIdSprintsSprintIdParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/agiles/${id}/sprints/${sprintId}?${stringifiedParams}` : `/agiles/${id}/sprints/${sprintId}`
}

export const getAgilesIdSprintsSprintId = async (id: string,
    sprintId: string,
    params?: GetAgilesIdSprintsSprintIdParams, options?: RequestInit): Promise<getAgilesIdSprintsSprintIdResponse> => {
  
  return customInstance<getAgilesIdSprintsSprintIdResponse>(getGetAgilesIdSprintsSprintIdUrl(id,sprintId,params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type postAgilesIdSprintsSprintIdResponse200 = {
  data: Sprint
  status: 200
}
    
export type postAgilesIdSprintsSprintIdResponseComposite = postAgilesIdSprintsSprintIdResponse200;
    
export type postAgilesIdSprintsSprintIdResponse = postAgilesIdSprintsSprintIdResponseComposite & {
  headers: Headers;
}

export const getPostAgilesIdSprintsSprintIdUrl = (id: string,
    sprintId: string,
    params?: PostAgilesIdSprintsSprintIdParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/agiles/${id}/sprints/${sprintId}?${stringifiedParams}` : `/agiles/${id}/sprints/${sprintId}`
}

export const postAgilesIdSprintsSprintId = async (id: string,
    sprintId: string,
    sprint: NonReadonly<Sprint>,
    params?: PostAgilesIdSprintsSprintIdParams, options?: RequestInit): Promise<postAgilesIdSprintsSprintIdResponse> => {
  
  return customInstance<postAgilesIdSprintsSprintIdResponse>(getPostAgilesIdSprintsSprintIdUrl(id,sprintId,params),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      sprint,)
  }
);}



export type deleteAgilesIdSprintsSprintIdResponse200 = {
  data: void
  status: 200
}
    
export type deleteAgilesIdSprintsSprintIdResponseComposite = deleteAgilesIdSprintsSprintIdResponse200;
    
export type deleteAgilesIdSprintsSprintIdResponse = deleteAgilesIdSprintsSprintIdResponseComposite & {
  headers: Headers;
}

export const getDeleteAgilesIdSprintsSprintIdUrl = (id: string,
    sprintId: string,) => {


  

  return `/agiles/${id}/sprints/${sprintId}`
}

export const deleteAgilesIdSprintsSprintId = async (id: string,
    sprintId: string, options?: RequestInit): Promise<deleteAgilesIdSprintsSprintIdResponse> => {
  
  return customInstance<deleteAgilesIdSprintsSprintIdResponse>(getDeleteAgilesIdSprintsSprintIdUrl(id,sprintId),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
);}



export type getArticlesResponse200 = {
  data: Article[]
  status: 200
}
    
export type getArticlesResponseComposite = getArticlesResponse200;
    
export type getArticlesResponse = getArticlesResponseComposite & {
  headers: Headers;
}

export const getGetArticlesUrl = (params?: GetArticlesParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/articles?${stringifiedParams}` : `/articles`
}

export const getArticles = async (params?: GetArticlesParams, options?: RequestInit): Promise<getArticlesResponse> => {
  
  return customInstance<getArticlesResponse>(getGetArticlesUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type postArticlesResponse200 = {
  data: Article
  status: 200
}
    
export type postArticlesResponseComposite = postArticlesResponse200;
    
export type postArticlesResponse = postArticlesResponseComposite & {
  headers: Headers;
}

export const getPostArticlesUrl = (params?: PostArticlesParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/articles?${stringifiedParams}` : `/articles`
}

export const postArticles = async (article: NonReadonly<Article>,
    params?: PostArticlesParams, options?: RequestInit): Promise<postArticlesResponse> => {
  
  return customInstance<postArticlesResponse>(getPostArticlesUrl(params),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      article,)
  }
);}



export type getArticlesIdResponse200 = {
  data: Article
  status: 200
}
    
export type getArticlesIdResponseComposite = getArticlesIdResponse200;
    
export type getArticlesIdResponse = getArticlesIdResponseComposite & {
  headers: Headers;
}

export const getGetArticlesIdUrl = (id: string,
    params?: GetArticlesIdParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/articles/${id}?${stringifiedParams}` : `/articles/${id}`
}

export const getArticlesId = async (id: string,
    params?: GetArticlesIdParams, options?: RequestInit): Promise<getArticlesIdResponse> => {
  
  return customInstance<getArticlesIdResponse>(getGetArticlesIdUrl(id,params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type postArticlesIdResponse200 = {
  data: Article
  status: 200
}
    
export type postArticlesIdResponseComposite = postArticlesIdResponse200;
    
export type postArticlesIdResponse = postArticlesIdResponseComposite & {
  headers: Headers;
}

export const getPostArticlesIdUrl = (id: string,
    params?: PostArticlesIdParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/articles/${id}?${stringifiedParams}` : `/articles/${id}`
}

export const postArticlesId = async (id: string,
    article: NonReadonly<Article>,
    params?: PostArticlesIdParams, options?: RequestInit): Promise<postArticlesIdResponse> => {
  
  return customInstance<postArticlesIdResponse>(getPostArticlesIdUrl(id,params),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      article,)
  }
);}



export type deleteArticlesIdResponse200 = {
  data: void
  status: 200
}
    
export type deleteArticlesIdResponseComposite = deleteArticlesIdResponse200;
    
export type deleteArticlesIdResponse = deleteArticlesIdResponseComposite & {
  headers: Headers;
}

export const getDeleteArticlesIdUrl = (id: string,) => {


  

  return `/articles/${id}`
}

export const deleteArticlesId = async (id: string, options?: RequestInit): Promise<deleteArticlesIdResponse> => {
  
  return customInstance<deleteArticlesIdResponse>(getDeleteArticlesIdUrl(id),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
);}



export type getArticlesIdAttachmentsResponse200 = {
  data: ArticleAttachment[]
  status: 200
}
    
export type getArticlesIdAttachmentsResponseComposite = getArticlesIdAttachmentsResponse200;
    
export type getArticlesIdAttachmentsResponse = getArticlesIdAttachmentsResponseComposite & {
  headers: Headers;
}

export const getGetArticlesIdAttachmentsUrl = (id: string,
    params?: GetArticlesIdAttachmentsParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/articles/${id}/attachments?${stringifiedParams}` : `/articles/${id}/attachments`
}

export const getArticlesIdAttachments = async (id: string,
    params?: GetArticlesIdAttachmentsParams, options?: RequestInit): Promise<getArticlesIdAttachmentsResponse> => {
  
  return customInstance<getArticlesIdAttachmentsResponse>(getGetArticlesIdAttachmentsUrl(id,params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type postArticlesIdAttachmentsResponse200 = {
  data: ArticleAttachment
  status: 200
}
    
export type postArticlesIdAttachmentsResponseComposite = postArticlesIdAttachmentsResponse200;
    
export type postArticlesIdAttachmentsResponse = postArticlesIdAttachmentsResponseComposite & {
  headers: Headers;
}

export const getPostArticlesIdAttachmentsUrl = (id: string,
    params?: PostArticlesIdAttachmentsParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/articles/${id}/attachments?${stringifiedParams}` : `/articles/${id}/attachments`
}

export const postArticlesIdAttachments = async (id: string,
    articleAttachment: NonReadonly<ArticleAttachment>,
    params?: PostArticlesIdAttachmentsParams, options?: RequestInit): Promise<postArticlesIdAttachmentsResponse> => {
  
  return customInstance<postArticlesIdAttachmentsResponse>(getPostArticlesIdAttachmentsUrl(id,params),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      articleAttachment,)
  }
);}



export type getArticlesIdAttachmentsArticleAttachmentIdResponse200 = {
  data: ArticleAttachment
  status: 200
}
    
export type getArticlesIdAttachmentsArticleAttachmentIdResponseComposite = getArticlesIdAttachmentsArticleAttachmentIdResponse200;
    
export type getArticlesIdAttachmentsArticleAttachmentIdResponse = getArticlesIdAttachmentsArticleAttachmentIdResponseComposite & {
  headers: Headers;
}

export const getGetArticlesIdAttachmentsArticleAttachmentIdUrl = (id: string,
    articleAttachmentId: string,
    params?: GetArticlesIdAttachmentsArticleAttachmentIdParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/articles/${id}/attachments/${articleAttachmentId}?${stringifiedParams}` : `/articles/${id}/attachments/${articleAttachmentId}`
}

export const getArticlesIdAttachmentsArticleAttachmentId = async (id: string,
    articleAttachmentId: string,
    params?: GetArticlesIdAttachmentsArticleAttachmentIdParams, options?: RequestInit): Promise<getArticlesIdAttachmentsArticleAttachmentIdResponse> => {
  
  return customInstance<getArticlesIdAttachmentsArticleAttachmentIdResponse>(getGetArticlesIdAttachmentsArticleAttachmentIdUrl(id,articleAttachmentId,params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type postArticlesIdAttachmentsArticleAttachmentIdResponse200 = {
  data: ArticleAttachment
  status: 200
}
    
export type postArticlesIdAttachmentsArticleAttachmentIdResponseComposite = postArticlesIdAttachmentsArticleAttachmentIdResponse200;
    
export type postArticlesIdAttachmentsArticleAttachmentIdResponse = postArticlesIdAttachmentsArticleAttachmentIdResponseComposite & {
  headers: Headers;
}

export const getPostArticlesIdAttachmentsArticleAttachmentIdUrl = (id: string,
    articleAttachmentId: string,
    params?: PostArticlesIdAttachmentsArticleAttachmentIdParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/articles/${id}/attachments/${articleAttachmentId}?${stringifiedParams}` : `/articles/${id}/attachments/${articleAttachmentId}`
}

export const postArticlesIdAttachmentsArticleAttachmentId = async (id: string,
    articleAttachmentId: string,
    articleAttachment: NonReadonly<ArticleAttachment>,
    params?: PostArticlesIdAttachmentsArticleAttachmentIdParams, options?: RequestInit): Promise<postArticlesIdAttachmentsArticleAttachmentIdResponse> => {
  
  return customInstance<postArticlesIdAttachmentsArticleAttachmentIdResponse>(getPostArticlesIdAttachmentsArticleAttachmentIdUrl(id,articleAttachmentId,params),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      articleAttachment,)
  }
);}



export type deleteArticlesIdAttachmentsArticleAttachmentIdResponse200 = {
  data: void
  status: 200
}
    
export type deleteArticlesIdAttachmentsArticleAttachmentIdResponseComposite = deleteArticlesIdAttachmentsArticleAttachmentIdResponse200;
    
export type deleteArticlesIdAttachmentsArticleAttachmentIdResponse = deleteArticlesIdAttachmentsArticleAttachmentIdResponseComposite & {
  headers: Headers;
}

export const getDeleteArticlesIdAttachmentsArticleAttachmentIdUrl = (id: string,
    articleAttachmentId: string,) => {


  

  return `/articles/${id}/attachments/${articleAttachmentId}`
}

export const deleteArticlesIdAttachmentsArticleAttachmentId = async (id: string,
    articleAttachmentId: string, options?: RequestInit): Promise<deleteArticlesIdAttachmentsArticleAttachmentIdResponse> => {
  
  return customInstance<deleteArticlesIdAttachmentsArticleAttachmentIdResponse>(getDeleteArticlesIdAttachmentsArticleAttachmentIdUrl(id,articleAttachmentId),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
);}



export type getArticlesIdChildArticlesResponse200 = {
  data: Article[]
  status: 200
}
    
export type getArticlesIdChildArticlesResponseComposite = getArticlesIdChildArticlesResponse200;
    
export type getArticlesIdChildArticlesResponse = getArticlesIdChildArticlesResponseComposite & {
  headers: Headers;
}

export const getGetArticlesIdChildArticlesUrl = (id: string,
    params?: GetArticlesIdChildArticlesParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/articles/${id}/childArticles?${stringifiedParams}` : `/articles/${id}/childArticles`
}

export const getArticlesIdChildArticles = async (id: string,
    params?: GetArticlesIdChildArticlesParams, options?: RequestInit): Promise<getArticlesIdChildArticlesResponse> => {
  
  return customInstance<getArticlesIdChildArticlesResponse>(getGetArticlesIdChildArticlesUrl(id,params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type postArticlesIdChildArticlesResponse200 = {
  data: Article
  status: 200
}
    
export type postArticlesIdChildArticlesResponseComposite = postArticlesIdChildArticlesResponse200;
    
export type postArticlesIdChildArticlesResponse = postArticlesIdChildArticlesResponseComposite & {
  headers: Headers;
}

export const getPostArticlesIdChildArticlesUrl = (id: string,
    params?: PostArticlesIdChildArticlesParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/articles/${id}/childArticles?${stringifiedParams}` : `/articles/${id}/childArticles`
}

export const postArticlesIdChildArticles = async (id: string,
    article: NonReadonly<Article>,
    params?: PostArticlesIdChildArticlesParams, options?: RequestInit): Promise<postArticlesIdChildArticlesResponse> => {
  
  return customInstance<postArticlesIdChildArticlesResponse>(getPostArticlesIdChildArticlesUrl(id,params),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      article,)
  }
);}



export type getArticlesIdChildArticlesArticleIdResponse200 = {
  data: Article
  status: 200
}
    
export type getArticlesIdChildArticlesArticleIdResponseComposite = getArticlesIdChildArticlesArticleIdResponse200;
    
export type getArticlesIdChildArticlesArticleIdResponse = getArticlesIdChildArticlesArticleIdResponseComposite & {
  headers: Headers;
}

export const getGetArticlesIdChildArticlesArticleIdUrl = (id: string,
    articleId: string,
    params?: GetArticlesIdChildArticlesArticleIdParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/articles/${id}/childArticles/${articleId}?${stringifiedParams}` : `/articles/${id}/childArticles/${articleId}`
}

export const getArticlesIdChildArticlesArticleId = async (id: string,
    articleId: string,
    params?: GetArticlesIdChildArticlesArticleIdParams, options?: RequestInit): Promise<getArticlesIdChildArticlesArticleIdResponse> => {
  
  return customInstance<getArticlesIdChildArticlesArticleIdResponse>(getGetArticlesIdChildArticlesArticleIdUrl(id,articleId,params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type postArticlesIdChildArticlesArticleIdResponse200 = {
  data: Article
  status: 200
}
    
export type postArticlesIdChildArticlesArticleIdResponseComposite = postArticlesIdChildArticlesArticleIdResponse200;
    
export type postArticlesIdChildArticlesArticleIdResponse = postArticlesIdChildArticlesArticleIdResponseComposite & {
  headers: Headers;
}

export const getPostArticlesIdChildArticlesArticleIdUrl = (id: string,
    articleId: string,
    params?: PostArticlesIdChildArticlesArticleIdParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/articles/${id}/childArticles/${articleId}?${stringifiedParams}` : `/articles/${id}/childArticles/${articleId}`
}

export const postArticlesIdChildArticlesArticleId = async (id: string,
    articleId: string,
    article: NonReadonly<Article>,
    params?: PostArticlesIdChildArticlesArticleIdParams, options?: RequestInit): Promise<postArticlesIdChildArticlesArticleIdResponse> => {
  
  return customInstance<postArticlesIdChildArticlesArticleIdResponse>(getPostArticlesIdChildArticlesArticleIdUrl(id,articleId,params),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      article,)
  }
);}



export type deleteArticlesIdChildArticlesArticleIdResponse200 = {
  data: void
  status: 200
}
    
export type deleteArticlesIdChildArticlesArticleIdResponseComposite = deleteArticlesIdChildArticlesArticleIdResponse200;
    
export type deleteArticlesIdChildArticlesArticleIdResponse = deleteArticlesIdChildArticlesArticleIdResponseComposite & {
  headers: Headers;
}

export const getDeleteArticlesIdChildArticlesArticleIdUrl = (id: string,
    articleId: string,) => {


  

  return `/articles/${id}/childArticles/${articleId}`
}

export const deleteArticlesIdChildArticlesArticleId = async (id: string,
    articleId: string, options?: RequestInit): Promise<deleteArticlesIdChildArticlesArticleIdResponse> => {
  
  return customInstance<deleteArticlesIdChildArticlesArticleIdResponse>(getDeleteArticlesIdChildArticlesArticleIdUrl(id,articleId),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
);}



export type getArticlesIdCommentsResponse200 = {
  data: ArticleComment[]
  status: 200
}
    
export type getArticlesIdCommentsResponseComposite = getArticlesIdCommentsResponse200;
    
export type getArticlesIdCommentsResponse = getArticlesIdCommentsResponseComposite & {
  headers: Headers;
}

export const getGetArticlesIdCommentsUrl = (id: string,
    params?: GetArticlesIdCommentsParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/articles/${id}/comments?${stringifiedParams}` : `/articles/${id}/comments`
}

export const getArticlesIdComments = async (id: string,
    params?: GetArticlesIdCommentsParams, options?: RequestInit): Promise<getArticlesIdCommentsResponse> => {
  
  return customInstance<getArticlesIdCommentsResponse>(getGetArticlesIdCommentsUrl(id,params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type postArticlesIdCommentsResponse200 = {
  data: ArticleComment
  status: 200
}
    
export type postArticlesIdCommentsResponseComposite = postArticlesIdCommentsResponse200;
    
export type postArticlesIdCommentsResponse = postArticlesIdCommentsResponseComposite & {
  headers: Headers;
}

export const getPostArticlesIdCommentsUrl = (id: string,
    params?: PostArticlesIdCommentsParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/articles/${id}/comments?${stringifiedParams}` : `/articles/${id}/comments`
}

export const postArticlesIdComments = async (id: string,
    articleComment: NonReadonly<ArticleComment>,
    params?: PostArticlesIdCommentsParams, options?: RequestInit): Promise<postArticlesIdCommentsResponse> => {
  
  return customInstance<postArticlesIdCommentsResponse>(getPostArticlesIdCommentsUrl(id,params),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      articleComment,)
  }
);}



export type getArticlesIdCommentsArticleCommentIdResponse200 = {
  data: ArticleComment
  status: 200
}
    
export type getArticlesIdCommentsArticleCommentIdResponseComposite = getArticlesIdCommentsArticleCommentIdResponse200;
    
export type getArticlesIdCommentsArticleCommentIdResponse = getArticlesIdCommentsArticleCommentIdResponseComposite & {
  headers: Headers;
}

export const getGetArticlesIdCommentsArticleCommentIdUrl = (id: string,
    articleCommentId: string,
    params?: GetArticlesIdCommentsArticleCommentIdParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/articles/${id}/comments/${articleCommentId}?${stringifiedParams}` : `/articles/${id}/comments/${articleCommentId}`
}

export const getArticlesIdCommentsArticleCommentId = async (id: string,
    articleCommentId: string,
    params?: GetArticlesIdCommentsArticleCommentIdParams, options?: RequestInit): Promise<getArticlesIdCommentsArticleCommentIdResponse> => {
  
  return customInstance<getArticlesIdCommentsArticleCommentIdResponse>(getGetArticlesIdCommentsArticleCommentIdUrl(id,articleCommentId,params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type postArticlesIdCommentsArticleCommentIdResponse200 = {
  data: ArticleComment
  status: 200
}
    
export type postArticlesIdCommentsArticleCommentIdResponseComposite = postArticlesIdCommentsArticleCommentIdResponse200;
    
export type postArticlesIdCommentsArticleCommentIdResponse = postArticlesIdCommentsArticleCommentIdResponseComposite & {
  headers: Headers;
}

export const getPostArticlesIdCommentsArticleCommentIdUrl = (id: string,
    articleCommentId: string,
    params?: PostArticlesIdCommentsArticleCommentIdParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/articles/${id}/comments/${articleCommentId}?${stringifiedParams}` : `/articles/${id}/comments/${articleCommentId}`
}

export const postArticlesIdCommentsArticleCommentId = async (id: string,
    articleCommentId: string,
    articleComment: NonReadonly<ArticleComment>,
    params?: PostArticlesIdCommentsArticleCommentIdParams, options?: RequestInit): Promise<postArticlesIdCommentsArticleCommentIdResponse> => {
  
  return customInstance<postArticlesIdCommentsArticleCommentIdResponse>(getPostArticlesIdCommentsArticleCommentIdUrl(id,articleCommentId,params),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      articleComment,)
  }
);}



export type deleteArticlesIdCommentsArticleCommentIdResponse200 = {
  data: void
  status: 200
}
    
export type deleteArticlesIdCommentsArticleCommentIdResponseComposite = deleteArticlesIdCommentsArticleCommentIdResponse200;
    
export type deleteArticlesIdCommentsArticleCommentIdResponse = deleteArticlesIdCommentsArticleCommentIdResponseComposite & {
  headers: Headers;
}

export const getDeleteArticlesIdCommentsArticleCommentIdUrl = (id: string,
    articleCommentId: string,) => {


  

  return `/articles/${id}/comments/${articleCommentId}`
}

export const deleteArticlesIdCommentsArticleCommentId = async (id: string,
    articleCommentId: string, options?: RequestInit): Promise<deleteArticlesIdCommentsArticleCommentIdResponse> => {
  
  return customInstance<deleteArticlesIdCommentsArticleCommentIdResponse>(getDeleteArticlesIdCommentsArticleCommentIdUrl(id,articleCommentId),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
);}



export type getArticlesIdCommentsArticleCommentIdReactionsResponse200 = {
  data: Reaction[]
  status: 200
}
    
export type getArticlesIdCommentsArticleCommentIdReactionsResponseComposite = getArticlesIdCommentsArticleCommentIdReactionsResponse200;
    
export type getArticlesIdCommentsArticleCommentIdReactionsResponse = getArticlesIdCommentsArticleCommentIdReactionsResponseComposite & {
  headers: Headers;
}

export const getGetArticlesIdCommentsArticleCommentIdReactionsUrl = (id: string,
    articleCommentId: string,
    params?: GetArticlesIdCommentsArticleCommentIdReactionsParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/articles/${id}/comments/${articleCommentId}/reactions?${stringifiedParams}` : `/articles/${id}/comments/${articleCommentId}/reactions`
}

export const getArticlesIdCommentsArticleCommentIdReactions = async (id: string,
    articleCommentId: string,
    params?: GetArticlesIdCommentsArticleCommentIdReactionsParams, options?: RequestInit): Promise<getArticlesIdCommentsArticleCommentIdReactionsResponse> => {
  
  return customInstance<getArticlesIdCommentsArticleCommentIdReactionsResponse>(getGetArticlesIdCommentsArticleCommentIdReactionsUrl(id,articleCommentId,params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type postArticlesIdCommentsArticleCommentIdReactionsResponse200 = {
  data: Reaction
  status: 200
}
    
export type postArticlesIdCommentsArticleCommentIdReactionsResponseComposite = postArticlesIdCommentsArticleCommentIdReactionsResponse200;
    
export type postArticlesIdCommentsArticleCommentIdReactionsResponse = postArticlesIdCommentsArticleCommentIdReactionsResponseComposite & {
  headers: Headers;
}

export const getPostArticlesIdCommentsArticleCommentIdReactionsUrl = (id: string,
    articleCommentId: string,
    params?: PostArticlesIdCommentsArticleCommentIdReactionsParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/articles/${id}/comments/${articleCommentId}/reactions?${stringifiedParams}` : `/articles/${id}/comments/${articleCommentId}/reactions`
}

export const postArticlesIdCommentsArticleCommentIdReactions = async (id: string,
    articleCommentId: string,
    reaction: NonReadonly<Reaction>,
    params?: PostArticlesIdCommentsArticleCommentIdReactionsParams, options?: RequestInit): Promise<postArticlesIdCommentsArticleCommentIdReactionsResponse> => {
  
  return customInstance<postArticlesIdCommentsArticleCommentIdReactionsResponse>(getPostArticlesIdCommentsArticleCommentIdReactionsUrl(id,articleCommentId,params),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      reaction,)
  }
);}



export type getArticlesIdCommentsArticleCommentIdReactionsReactionIdResponse200 = {
  data: Reaction
  status: 200
}
    
export type getArticlesIdCommentsArticleCommentIdReactionsReactionIdResponseComposite = getArticlesIdCommentsArticleCommentIdReactionsReactionIdResponse200;
    
export type getArticlesIdCommentsArticleCommentIdReactionsReactionIdResponse = getArticlesIdCommentsArticleCommentIdReactionsReactionIdResponseComposite & {
  headers: Headers;
}

export const getGetArticlesIdCommentsArticleCommentIdReactionsReactionIdUrl = (id: string,
    articleCommentId: string,
    reactionId: string,
    params?: GetArticlesIdCommentsArticleCommentIdReactionsReactionIdParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/articles/${id}/comments/${articleCommentId}/reactions/${reactionId}?${stringifiedParams}` : `/articles/${id}/comments/${articleCommentId}/reactions/${reactionId}`
}

export const getArticlesIdCommentsArticleCommentIdReactionsReactionId = async (id: string,
    articleCommentId: string,
    reactionId: string,
    params?: GetArticlesIdCommentsArticleCommentIdReactionsReactionIdParams, options?: RequestInit): Promise<getArticlesIdCommentsArticleCommentIdReactionsReactionIdResponse> => {
  
  return customInstance<getArticlesIdCommentsArticleCommentIdReactionsReactionIdResponse>(getGetArticlesIdCommentsArticleCommentIdReactionsReactionIdUrl(id,articleCommentId,reactionId,params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type deleteArticlesIdCommentsArticleCommentIdReactionsReactionIdResponse200 = {
  data: void
  status: 200
}
    
export type deleteArticlesIdCommentsArticleCommentIdReactionsReactionIdResponseComposite = deleteArticlesIdCommentsArticleCommentIdReactionsReactionIdResponse200;
    
export type deleteArticlesIdCommentsArticleCommentIdReactionsReactionIdResponse = deleteArticlesIdCommentsArticleCommentIdReactionsReactionIdResponseComposite & {
  headers: Headers;
}

export const getDeleteArticlesIdCommentsArticleCommentIdReactionsReactionIdUrl = (id: string,
    articleCommentId: string,
    reactionId: string,) => {


  

  return `/articles/${id}/comments/${articleCommentId}/reactions/${reactionId}`
}

export const deleteArticlesIdCommentsArticleCommentIdReactionsReactionId = async (id: string,
    articleCommentId: string,
    reactionId: string, options?: RequestInit): Promise<deleteArticlesIdCommentsArticleCommentIdReactionsReactionIdResponse> => {
  
  return customInstance<deleteArticlesIdCommentsArticleCommentIdReactionsReactionIdResponse>(getDeleteArticlesIdCommentsArticleCommentIdReactionsReactionIdUrl(id,articleCommentId,reactionId),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
);}



export type getArticlesIdParentArticleResponse200 = {
  data: Article
  status: 200
}
    
export type getArticlesIdParentArticleResponseComposite = getArticlesIdParentArticleResponse200;
    
export type getArticlesIdParentArticleResponse = getArticlesIdParentArticleResponseComposite & {
  headers: Headers;
}

export const getGetArticlesIdParentArticleUrl = (id: string,
    params?: GetArticlesIdParentArticleParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/articles/${id}/parentArticle?${stringifiedParams}` : `/articles/${id}/parentArticle`
}

export const getArticlesIdParentArticle = async (id: string,
    params?: GetArticlesIdParentArticleParams, options?: RequestInit): Promise<getArticlesIdParentArticleResponse> => {
  
  return customInstance<getArticlesIdParentArticleResponse>(getGetArticlesIdParentArticleUrl(id,params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type getArticlesIdTagsResponse200 = {
  data: Tag[]
  status: 200
}
    
export type getArticlesIdTagsResponseComposite = getArticlesIdTagsResponse200;
    
export type getArticlesIdTagsResponse = getArticlesIdTagsResponseComposite & {
  headers: Headers;
}

export const getGetArticlesIdTagsUrl = (id: string,
    params?: GetArticlesIdTagsParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/articles/${id}/tags?${stringifiedParams}` : `/articles/${id}/tags`
}

export const getArticlesIdTags = async (id: string,
    params?: GetArticlesIdTagsParams, options?: RequestInit): Promise<getArticlesIdTagsResponse> => {
  
  return customInstance<getArticlesIdTagsResponse>(getGetArticlesIdTagsUrl(id,params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type postArticlesIdTagsResponse200 = {
  data: Tag
  status: 200
}
    
export type postArticlesIdTagsResponseComposite = postArticlesIdTagsResponse200;
    
export type postArticlesIdTagsResponse = postArticlesIdTagsResponseComposite & {
  headers: Headers;
}

export const getPostArticlesIdTagsUrl = (id: string,
    params?: PostArticlesIdTagsParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/articles/${id}/tags?${stringifiedParams}` : `/articles/${id}/tags`
}

export const postArticlesIdTags = async (id: string,
    tag: NonReadonly<Tag>,
    params?: PostArticlesIdTagsParams, options?: RequestInit): Promise<postArticlesIdTagsResponse> => {
  
  return customInstance<postArticlesIdTagsResponse>(getPostArticlesIdTagsUrl(id,params),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      tag,)
  }
);}



export type getArticlesIdTagsTagIdResponse200 = {
  data: Tag
  status: 200
}
    
export type getArticlesIdTagsTagIdResponseComposite = getArticlesIdTagsTagIdResponse200;
    
export type getArticlesIdTagsTagIdResponse = getArticlesIdTagsTagIdResponseComposite & {
  headers: Headers;
}

export const getGetArticlesIdTagsTagIdUrl = (id: string,
    tagId: string,
    params?: GetArticlesIdTagsTagIdParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/articles/${id}/tags/${tagId}?${stringifiedParams}` : `/articles/${id}/tags/${tagId}`
}

export const getArticlesIdTagsTagId = async (id: string,
    tagId: string,
    params?: GetArticlesIdTagsTagIdParams, options?: RequestInit): Promise<getArticlesIdTagsTagIdResponse> => {
  
  return customInstance<getArticlesIdTagsTagIdResponse>(getGetArticlesIdTagsTagIdUrl(id,tagId,params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type deleteArticlesIdTagsTagIdResponse200 = {
  data: void
  status: 200
}
    
export type deleteArticlesIdTagsTagIdResponseComposite = deleteArticlesIdTagsTagIdResponse200;
    
export type deleteArticlesIdTagsTagIdResponse = deleteArticlesIdTagsTagIdResponseComposite & {
  headers: Headers;
}

export const getDeleteArticlesIdTagsTagIdUrl = (id: string,
    tagId: string,) => {


  

  return `/articles/${id}/tags/${tagId}`
}

export const deleteArticlesIdTagsTagId = async (id: string,
    tagId: string, options?: RequestInit): Promise<deleteArticlesIdTagsTagIdResponse> => {
  
  return customInstance<deleteArticlesIdTagsTagIdResponse>(getDeleteArticlesIdTagsTagIdUrl(id,tagId),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
);}



export type postCommandsResponse200 = {
  data: CommandList
  status: 200
}
    
export type postCommandsResponseComposite = postCommandsResponse200;
    
export type postCommandsResponse = postCommandsResponseComposite & {
  headers: Headers;
}

export const getPostCommandsUrl = (params?: PostCommandsParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/commands?${stringifiedParams}` : `/commands`
}

export const postCommands = async (commandList: NonReadonly<CommandList>,
    params?: PostCommandsParams, options?: RequestInit): Promise<postCommandsResponse> => {
  
  return customInstance<postCommandsResponse>(getPostCommandsUrl(params),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      commandList,)
  }
);}



export type postCommandsAssistResponse200 = {
  data: CommandList
  status: 200
}
    
export type postCommandsAssistResponseComposite = postCommandsAssistResponse200;
    
export type postCommandsAssistResponse = postCommandsAssistResponseComposite & {
  headers: Headers;
}

export const getPostCommandsAssistUrl = (params?: PostCommandsAssistParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/commands/assist?${stringifiedParams}` : `/commands/assist`
}

export const postCommandsAssist = async (commandList: NonReadonly<CommandList>,
    params?: PostCommandsAssistParams, options?: RequestInit): Promise<postCommandsAssistResponse> => {
  
  return customInstance<postCommandsAssistResponse>(getPostCommandsAssistUrl(params),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      commandList,)
  }
);}



export type getGroupsResponse200 = {
  data: UserGroup[]
  status: 200
}
    
export type getGroupsResponseComposite = getGroupsResponse200;
    
export type getGroupsResponse = getGroupsResponseComposite & {
  headers: Headers;
}

export const getGetGroupsUrl = (params?: GetGroupsParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/groups?${stringifiedParams}` : `/groups`
}

export const getGroups = async (params?: GetGroupsParams, options?: RequestInit): Promise<getGroupsResponse> => {
  
  return customInstance<getGroupsResponse>(getGetGroupsUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type getGroupsIdResponse200 = {
  data: UserGroup
  status: 200
}
    
export type getGroupsIdResponseComposite = getGroupsIdResponse200;
    
export type getGroupsIdResponse = getGroupsIdResponseComposite & {
  headers: Headers;
}

export const getGetGroupsIdUrl = (id: string,
    params?: GetGroupsIdParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/groups/${id}?${stringifiedParams}` : `/groups/${id}`
}

export const getGroupsId = async (id: string,
    params?: GetGroupsIdParams, options?: RequestInit): Promise<getGroupsIdResponse> => {
  
  return customInstance<getGroupsIdResponse>(getGetGroupsIdUrl(id,params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type getIssueLinkTypesResponse200 = {
  data: IssueLinkType[]
  status: 200
}
    
export type getIssueLinkTypesResponseComposite = getIssueLinkTypesResponse200;
    
export type getIssueLinkTypesResponse = getIssueLinkTypesResponseComposite & {
  headers: Headers;
}

export const getGetIssueLinkTypesUrl = (params?: GetIssueLinkTypesParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/issueLinkTypes?${stringifiedParams}` : `/issueLinkTypes`
}

export const getIssueLinkTypes = async (params?: GetIssueLinkTypesParams, options?: RequestInit): Promise<getIssueLinkTypesResponse> => {
  
  return customInstance<getIssueLinkTypesResponse>(getGetIssueLinkTypesUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type postIssueLinkTypesResponse200 = {
  data: IssueLinkType
  status: 200
}
    
export type postIssueLinkTypesResponseComposite = postIssueLinkTypesResponse200;
    
export type postIssueLinkTypesResponse = postIssueLinkTypesResponseComposite & {
  headers: Headers;
}

export const getPostIssueLinkTypesUrl = (params?: PostIssueLinkTypesParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/issueLinkTypes?${stringifiedParams}` : `/issueLinkTypes`
}

export const postIssueLinkTypes = async (issueLinkType: NonReadonly<IssueLinkType>,
    params?: PostIssueLinkTypesParams, options?: RequestInit): Promise<postIssueLinkTypesResponse> => {
  
  return customInstance<postIssueLinkTypesResponse>(getPostIssueLinkTypesUrl(params),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      issueLinkType,)
  }
);}



export type getIssueLinkTypesIdResponse200 = {
  data: IssueLinkType
  status: 200
}
    
export type getIssueLinkTypesIdResponseComposite = getIssueLinkTypesIdResponse200;
    
export type getIssueLinkTypesIdResponse = getIssueLinkTypesIdResponseComposite & {
  headers: Headers;
}

export const getGetIssueLinkTypesIdUrl = (id: string,
    params?: GetIssueLinkTypesIdParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/issueLinkTypes/${id}?${stringifiedParams}` : `/issueLinkTypes/${id}`
}

export const getIssueLinkTypesId = async (id: string,
    params?: GetIssueLinkTypesIdParams, options?: RequestInit): Promise<getIssueLinkTypesIdResponse> => {
  
  return customInstance<getIssueLinkTypesIdResponse>(getGetIssueLinkTypesIdUrl(id,params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type postIssueLinkTypesIdResponse200 = {
  data: IssueLinkType
  status: 200
}
    
export type postIssueLinkTypesIdResponseComposite = postIssueLinkTypesIdResponse200;
    
export type postIssueLinkTypesIdResponse = postIssueLinkTypesIdResponseComposite & {
  headers: Headers;
}

export const getPostIssueLinkTypesIdUrl = (id: string,
    params?: PostIssueLinkTypesIdParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/issueLinkTypes/${id}?${stringifiedParams}` : `/issueLinkTypes/${id}`
}

export const postIssueLinkTypesId = async (id: string,
    issueLinkType: NonReadonly<IssueLinkType>,
    params?: PostIssueLinkTypesIdParams, options?: RequestInit): Promise<postIssueLinkTypesIdResponse> => {
  
  return customInstance<postIssueLinkTypesIdResponse>(getPostIssueLinkTypesIdUrl(id,params),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      issueLinkType,)
  }
);}



export type deleteIssueLinkTypesIdResponse200 = {
  data: void
  status: 200
}
    
export type deleteIssueLinkTypesIdResponseComposite = deleteIssueLinkTypesIdResponse200;
    
export type deleteIssueLinkTypesIdResponse = deleteIssueLinkTypesIdResponseComposite & {
  headers: Headers;
}

export const getDeleteIssueLinkTypesIdUrl = (id: string,) => {


  

  return `/issueLinkTypes/${id}`
}

export const deleteIssueLinkTypesId = async (id: string, options?: RequestInit): Promise<deleteIssueLinkTypesIdResponse> => {
  
  return customInstance<deleteIssueLinkTypesIdResponse>(getDeleteIssueLinkTypesIdUrl(id),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
);}



export type getIssuesResponse200 = {
  data: Issue[]
  status: 200
}
    
export type getIssuesResponseComposite = getIssuesResponse200;
    
export type getIssuesResponse = getIssuesResponseComposite & {
  headers: Headers;
}

export const getGetIssuesUrl = (params?: GetIssuesParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/issues?${stringifiedParams}` : `/issues`
}

export const getIssues = async (params?: GetIssuesParams, options?: RequestInit): Promise<getIssuesResponse> => {
  
  return customInstance<getIssuesResponse>(getGetIssuesUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type postIssuesResponse200 = {
  data: Issue
  status: 200
}
    
export type postIssuesResponseComposite = postIssuesResponse200;
    
export type postIssuesResponse = postIssuesResponseComposite & {
  headers: Headers;
}

export const getPostIssuesUrl = (params?: PostIssuesParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/issues?${stringifiedParams}` : `/issues`
}

export const postIssues = async (issue: NonReadonly<Issue>,
    params?: PostIssuesParams, options?: RequestInit): Promise<postIssuesResponse> => {
  
  return customInstance<postIssuesResponse>(getPostIssuesUrl(params),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      issue,)
  }
);}



export type getIssuesIdResponse200 = {
  data: Issue
  status: 200
}
    
export type getIssuesIdResponseComposite = getIssuesIdResponse200;
    
export type getIssuesIdResponse = getIssuesIdResponseComposite & {
  headers: Headers;
}

export const getGetIssuesIdUrl = (id: string,
    params?: GetIssuesIdParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/issues/${id}?${stringifiedParams}` : `/issues/${id}`
}

export const getIssuesId = async (id: string,
    params?: GetIssuesIdParams, options?: RequestInit): Promise<getIssuesIdResponse> => {
  
  return customInstance<getIssuesIdResponse>(getGetIssuesIdUrl(id,params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type postIssuesIdResponse200 = {
  data: Issue
  status: 200
}
    
export type postIssuesIdResponseComposite = postIssuesIdResponse200;
    
export type postIssuesIdResponse = postIssuesIdResponseComposite & {
  headers: Headers;
}

export const getPostIssuesIdUrl = (id: string,
    params?: PostIssuesIdParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/issues/${id}?${stringifiedParams}` : `/issues/${id}`
}

export const postIssuesId = async (id: string,
    issue: NonReadonly<Issue>,
    params?: PostIssuesIdParams, options?: RequestInit): Promise<postIssuesIdResponse> => {
  
  return customInstance<postIssuesIdResponse>(getPostIssuesIdUrl(id,params),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      issue,)
  }
);}



export type deleteIssuesIdResponse200 = {
  data: void
  status: 200
}
    
export type deleteIssuesIdResponseComposite = deleteIssuesIdResponse200;
    
export type deleteIssuesIdResponse = deleteIssuesIdResponseComposite & {
  headers: Headers;
}

export const getDeleteIssuesIdUrl = (id: string,) => {


  

  return `/issues/${id}`
}

export const deleteIssuesId = async (id: string, options?: RequestInit): Promise<deleteIssuesIdResponse> => {
  
  return customInstance<deleteIssuesIdResponse>(getDeleteIssuesIdUrl(id),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
);}



export type getIssuesIdActivitiesResponse200 = {
  data: ActivityItem[]
  status: 200
}
    
export type getIssuesIdActivitiesResponseComposite = getIssuesIdActivitiesResponse200;
    
export type getIssuesIdActivitiesResponse = getIssuesIdActivitiesResponseComposite & {
  headers: Headers;
}

export const getGetIssuesIdActivitiesUrl = (id: string,
    params?: GetIssuesIdActivitiesParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/issues/${id}/activities?${stringifiedParams}` : `/issues/${id}/activities`
}

export const getIssuesIdActivities = async (id: string,
    params?: GetIssuesIdActivitiesParams, options?: RequestInit): Promise<getIssuesIdActivitiesResponse> => {
  
  return customInstance<getIssuesIdActivitiesResponse>(getGetIssuesIdActivitiesUrl(id,params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type getIssuesIdActivitiesActivityItemIdResponse200 = {
  data: ActivityItem
  status: 200
}
    
export type getIssuesIdActivitiesActivityItemIdResponseComposite = getIssuesIdActivitiesActivityItemIdResponse200;
    
export type getIssuesIdActivitiesActivityItemIdResponse = getIssuesIdActivitiesActivityItemIdResponseComposite & {
  headers: Headers;
}

export const getGetIssuesIdActivitiesActivityItemIdUrl = (id: string,
    activityItemId: string,
    params?: GetIssuesIdActivitiesActivityItemIdParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/issues/${id}/activities/${activityItemId}?${stringifiedParams}` : `/issues/${id}/activities/${activityItemId}`
}

export const getIssuesIdActivitiesActivityItemId = async (id: string,
    activityItemId: string,
    params?: GetIssuesIdActivitiesActivityItemIdParams, options?: RequestInit): Promise<getIssuesIdActivitiesActivityItemIdResponse> => {
  
  return customInstance<getIssuesIdActivitiesActivityItemIdResponse>(getGetIssuesIdActivitiesActivityItemIdUrl(id,activityItemId,params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type getIssuesIdActivitiesPageResponse200 = {
  data: ActivityCursorPage
  status: 200
}
    
export type getIssuesIdActivitiesPageResponseComposite = getIssuesIdActivitiesPageResponse200;
    
export type getIssuesIdActivitiesPageResponse = getIssuesIdActivitiesPageResponseComposite & {
  headers: Headers;
}

export const getGetIssuesIdActivitiesPageUrl = (id: string,
    params?: GetIssuesIdActivitiesPageParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/issues/${id}/activitiesPage?${stringifiedParams}` : `/issues/${id}/activitiesPage`
}

export const getIssuesIdActivitiesPage = async (id: string,
    params?: GetIssuesIdActivitiesPageParams, options?: RequestInit): Promise<getIssuesIdActivitiesPageResponse> => {
  
  return customInstance<getIssuesIdActivitiesPageResponse>(getGetIssuesIdActivitiesPageUrl(id,params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type getIssuesIdAttachmentsResponse200 = {
  data: IssueAttachment[]
  status: 200
}
    
export type getIssuesIdAttachmentsResponseComposite = getIssuesIdAttachmentsResponse200;
    
export type getIssuesIdAttachmentsResponse = getIssuesIdAttachmentsResponseComposite & {
  headers: Headers;
}

export const getGetIssuesIdAttachmentsUrl = (id: string,
    params?: GetIssuesIdAttachmentsParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/issues/${id}/attachments?${stringifiedParams}` : `/issues/${id}/attachments`
}

export const getIssuesIdAttachments = async (id: string,
    params?: GetIssuesIdAttachmentsParams, options?: RequestInit): Promise<getIssuesIdAttachmentsResponse> => {
  
  return customInstance<getIssuesIdAttachmentsResponse>(getGetIssuesIdAttachmentsUrl(id,params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type postIssuesIdAttachmentsResponse200 = {
  data: IssueAttachment[]
  status: 200
}
    
export type postIssuesIdAttachmentsResponseComposite = postIssuesIdAttachmentsResponse200;
    
export type postIssuesIdAttachmentsResponse = postIssuesIdAttachmentsResponseComposite & {
  headers: Headers;
}

export const getPostIssuesIdAttachmentsUrl = (id: string,
    params?: PostIssuesIdAttachmentsParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/issues/${id}/attachments?${stringifiedParams}` : `/issues/${id}/attachments`
}

export const postIssuesIdAttachments = async (id: string,
    postIssuesIdAttachmentsBody: PostIssuesIdAttachmentsBody,
    params?: PostIssuesIdAttachmentsParams, options?: RequestInit): Promise<postIssuesIdAttachmentsResponse> => {
    const formData = new FormData();
if(postIssuesIdAttachmentsBody['files[0]'] !== undefined) {
 formData.append('files[0]', postIssuesIdAttachmentsBody['files[0]'])
 }

  return customInstance<postIssuesIdAttachmentsResponse>(getPostIssuesIdAttachmentsUrl(id,params),
  {      
    ...options,
    method: 'POST'
    ,
    body: 
      formData,
  }
);}



export type getIssuesIdAttachmentsIssueAttachmentIdResponse200 = {
  data: IssueAttachment
  status: 200
}
    
export type getIssuesIdAttachmentsIssueAttachmentIdResponseComposite = getIssuesIdAttachmentsIssueAttachmentIdResponse200;
    
export type getIssuesIdAttachmentsIssueAttachmentIdResponse = getIssuesIdAttachmentsIssueAttachmentIdResponseComposite & {
  headers: Headers;
}

export const getGetIssuesIdAttachmentsIssueAttachmentIdUrl = (id: string,
    issueAttachmentId: string,
    params?: GetIssuesIdAttachmentsIssueAttachmentIdParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/issues/${id}/attachments/${issueAttachmentId}?${stringifiedParams}` : `/issues/${id}/attachments/${issueAttachmentId}`
}

export const getIssuesIdAttachmentsIssueAttachmentId = async (id: string,
    issueAttachmentId: string,
    params?: GetIssuesIdAttachmentsIssueAttachmentIdParams, options?: RequestInit): Promise<getIssuesIdAttachmentsIssueAttachmentIdResponse> => {
  
  return customInstance<getIssuesIdAttachmentsIssueAttachmentIdResponse>(getGetIssuesIdAttachmentsIssueAttachmentIdUrl(id,issueAttachmentId,params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type postIssuesIdAttachmentsIssueAttachmentIdResponse200 = {
  data: IssueAttachment
  status: 200
}
    
export type postIssuesIdAttachmentsIssueAttachmentIdResponseComposite = postIssuesIdAttachmentsIssueAttachmentIdResponse200;
    
export type postIssuesIdAttachmentsIssueAttachmentIdResponse = postIssuesIdAttachmentsIssueAttachmentIdResponseComposite & {
  headers: Headers;
}

export const getPostIssuesIdAttachmentsIssueAttachmentIdUrl = (id: string,
    issueAttachmentId: string,
    params?: PostIssuesIdAttachmentsIssueAttachmentIdParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/issues/${id}/attachments/${issueAttachmentId}?${stringifiedParams}` : `/issues/${id}/attachments/${issueAttachmentId}`
}

export const postIssuesIdAttachmentsIssueAttachmentId = async (id: string,
    issueAttachmentId: string,
    issueAttachment: NonReadonly<IssueAttachment>,
    params?: PostIssuesIdAttachmentsIssueAttachmentIdParams, options?: RequestInit): Promise<postIssuesIdAttachmentsIssueAttachmentIdResponse> => {
  
  return customInstance<postIssuesIdAttachmentsIssueAttachmentIdResponse>(getPostIssuesIdAttachmentsIssueAttachmentIdUrl(id,issueAttachmentId,params),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      issueAttachment,)
  }
);}



export type deleteIssuesIdAttachmentsIssueAttachmentIdResponse200 = {
  data: void
  status: 200
}
    
export type deleteIssuesIdAttachmentsIssueAttachmentIdResponseComposite = deleteIssuesIdAttachmentsIssueAttachmentIdResponse200;
    
export type deleteIssuesIdAttachmentsIssueAttachmentIdResponse = deleteIssuesIdAttachmentsIssueAttachmentIdResponseComposite & {
  headers: Headers;
}

export const getDeleteIssuesIdAttachmentsIssueAttachmentIdUrl = (id: string,
    issueAttachmentId: string,) => {


  

  return `/issues/${id}/attachments/${issueAttachmentId}`
}

export const deleteIssuesIdAttachmentsIssueAttachmentId = async (id: string,
    issueAttachmentId: string, options?: RequestInit): Promise<deleteIssuesIdAttachmentsIssueAttachmentIdResponse> => {
  
  return customInstance<deleteIssuesIdAttachmentsIssueAttachmentIdResponse>(getDeleteIssuesIdAttachmentsIssueAttachmentIdUrl(id,issueAttachmentId),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
);}



export type getIssuesIdCommentsResponse200 = {
  data: IssueComment[]
  status: 200
}
    
export type getIssuesIdCommentsResponseComposite = getIssuesIdCommentsResponse200;
    
export type getIssuesIdCommentsResponse = getIssuesIdCommentsResponseComposite & {
  headers: Headers;
}

export const getGetIssuesIdCommentsUrl = (id: string,
    params?: GetIssuesIdCommentsParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/issues/${id}/comments?${stringifiedParams}` : `/issues/${id}/comments`
}

export const getIssuesIdComments = async (id: string,
    params?: GetIssuesIdCommentsParams, options?: RequestInit): Promise<getIssuesIdCommentsResponse> => {
  
  return customInstance<getIssuesIdCommentsResponse>(getGetIssuesIdCommentsUrl(id,params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type postIssuesIdCommentsResponse200 = {
  data: IssueComment
  status: 200
}
    
export type postIssuesIdCommentsResponseComposite = postIssuesIdCommentsResponse200;
    
export type postIssuesIdCommentsResponse = postIssuesIdCommentsResponseComposite & {
  headers: Headers;
}

export const getPostIssuesIdCommentsUrl = (id: string,
    params?: PostIssuesIdCommentsParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/issues/${id}/comments?${stringifiedParams}` : `/issues/${id}/comments`
}

export const postIssuesIdComments = async (id: string,
    issueComment: NonReadonly<IssueComment>,
    params?: PostIssuesIdCommentsParams, options?: RequestInit): Promise<postIssuesIdCommentsResponse> => {
  
  return customInstance<postIssuesIdCommentsResponse>(getPostIssuesIdCommentsUrl(id,params),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      issueComment,)
  }
);}



export type getIssuesIdCommentsIssueCommentIdResponse200 = {
  data: IssueComment
  status: 200
}
    
export type getIssuesIdCommentsIssueCommentIdResponseComposite = getIssuesIdCommentsIssueCommentIdResponse200;
    
export type getIssuesIdCommentsIssueCommentIdResponse = getIssuesIdCommentsIssueCommentIdResponseComposite & {
  headers: Headers;
}

export const getGetIssuesIdCommentsIssueCommentIdUrl = (id: string,
    issueCommentId: string,
    params?: GetIssuesIdCommentsIssueCommentIdParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/issues/${id}/comments/${issueCommentId}?${stringifiedParams}` : `/issues/${id}/comments/${issueCommentId}`
}

export const getIssuesIdCommentsIssueCommentId = async (id: string,
    issueCommentId: string,
    params?: GetIssuesIdCommentsIssueCommentIdParams, options?: RequestInit): Promise<getIssuesIdCommentsIssueCommentIdResponse> => {
  
  return customInstance<getIssuesIdCommentsIssueCommentIdResponse>(getGetIssuesIdCommentsIssueCommentIdUrl(id,issueCommentId,params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type postIssuesIdCommentsIssueCommentIdResponse200 = {
  data: IssueComment
  status: 200
}
    
export type postIssuesIdCommentsIssueCommentIdResponseComposite = postIssuesIdCommentsIssueCommentIdResponse200;
    
export type postIssuesIdCommentsIssueCommentIdResponse = postIssuesIdCommentsIssueCommentIdResponseComposite & {
  headers: Headers;
}

export const getPostIssuesIdCommentsIssueCommentIdUrl = (id: string,
    issueCommentId: string,
    params?: PostIssuesIdCommentsIssueCommentIdParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/issues/${id}/comments/${issueCommentId}?${stringifiedParams}` : `/issues/${id}/comments/${issueCommentId}`
}

export const postIssuesIdCommentsIssueCommentId = async (id: string,
    issueCommentId: string,
    issueComment: NonReadonly<IssueComment>,
    params?: PostIssuesIdCommentsIssueCommentIdParams, options?: RequestInit): Promise<postIssuesIdCommentsIssueCommentIdResponse> => {
  
  return customInstance<postIssuesIdCommentsIssueCommentIdResponse>(getPostIssuesIdCommentsIssueCommentIdUrl(id,issueCommentId,params),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      issueComment,)
  }
);}



export type deleteIssuesIdCommentsIssueCommentIdResponse200 = {
  data: void
  status: 200
}
    
export type deleteIssuesIdCommentsIssueCommentIdResponseComposite = deleteIssuesIdCommentsIssueCommentIdResponse200;
    
export type deleteIssuesIdCommentsIssueCommentIdResponse = deleteIssuesIdCommentsIssueCommentIdResponseComposite & {
  headers: Headers;
}

export const getDeleteIssuesIdCommentsIssueCommentIdUrl = (id: string,
    issueCommentId: string,) => {


  

  return `/issues/${id}/comments/${issueCommentId}`
}

export const deleteIssuesIdCommentsIssueCommentId = async (id: string,
    issueCommentId: string, options?: RequestInit): Promise<deleteIssuesIdCommentsIssueCommentIdResponse> => {
  
  return customInstance<deleteIssuesIdCommentsIssueCommentIdResponse>(getDeleteIssuesIdCommentsIssueCommentIdUrl(id,issueCommentId),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
);}



export type getIssuesIdCommentsIssueCommentIdReactionsResponse200 = {
  data: Reaction[]
  status: 200
}
    
export type getIssuesIdCommentsIssueCommentIdReactionsResponseComposite = getIssuesIdCommentsIssueCommentIdReactionsResponse200;
    
export type getIssuesIdCommentsIssueCommentIdReactionsResponse = getIssuesIdCommentsIssueCommentIdReactionsResponseComposite & {
  headers: Headers;
}

export const getGetIssuesIdCommentsIssueCommentIdReactionsUrl = (id: string,
    issueCommentId: string,
    params?: GetIssuesIdCommentsIssueCommentIdReactionsParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/issues/${id}/comments/${issueCommentId}/reactions?${stringifiedParams}` : `/issues/${id}/comments/${issueCommentId}/reactions`
}

export const getIssuesIdCommentsIssueCommentIdReactions = async (id: string,
    issueCommentId: string,
    params?: GetIssuesIdCommentsIssueCommentIdReactionsParams, options?: RequestInit): Promise<getIssuesIdCommentsIssueCommentIdReactionsResponse> => {
  
  return customInstance<getIssuesIdCommentsIssueCommentIdReactionsResponse>(getGetIssuesIdCommentsIssueCommentIdReactionsUrl(id,issueCommentId,params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type postIssuesIdCommentsIssueCommentIdReactionsResponse200 = {
  data: Reaction
  status: 200
}
    
export type postIssuesIdCommentsIssueCommentIdReactionsResponseComposite = postIssuesIdCommentsIssueCommentIdReactionsResponse200;
    
export type postIssuesIdCommentsIssueCommentIdReactionsResponse = postIssuesIdCommentsIssueCommentIdReactionsResponseComposite & {
  headers: Headers;
}

export const getPostIssuesIdCommentsIssueCommentIdReactionsUrl = (id: string,
    issueCommentId: string,
    params?: PostIssuesIdCommentsIssueCommentIdReactionsParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/issues/${id}/comments/${issueCommentId}/reactions?${stringifiedParams}` : `/issues/${id}/comments/${issueCommentId}/reactions`
}

export const postIssuesIdCommentsIssueCommentIdReactions = async (id: string,
    issueCommentId: string,
    reaction: NonReadonly<Reaction>,
    params?: PostIssuesIdCommentsIssueCommentIdReactionsParams, options?: RequestInit): Promise<postIssuesIdCommentsIssueCommentIdReactionsResponse> => {
  
  return customInstance<postIssuesIdCommentsIssueCommentIdReactionsResponse>(getPostIssuesIdCommentsIssueCommentIdReactionsUrl(id,issueCommentId,params),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      reaction,)
  }
);}



export type getIssuesIdCommentsIssueCommentIdReactionsReactionIdResponse200 = {
  data: Reaction
  status: 200
}
    
export type getIssuesIdCommentsIssueCommentIdReactionsReactionIdResponseComposite = getIssuesIdCommentsIssueCommentIdReactionsReactionIdResponse200;
    
export type getIssuesIdCommentsIssueCommentIdReactionsReactionIdResponse = getIssuesIdCommentsIssueCommentIdReactionsReactionIdResponseComposite & {
  headers: Headers;
}

export const getGetIssuesIdCommentsIssueCommentIdReactionsReactionIdUrl = (id: string,
    issueCommentId: string,
    reactionId: string,
    params?: GetIssuesIdCommentsIssueCommentIdReactionsReactionIdParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/issues/${id}/comments/${issueCommentId}/reactions/${reactionId}?${stringifiedParams}` : `/issues/${id}/comments/${issueCommentId}/reactions/${reactionId}`
}

export const getIssuesIdCommentsIssueCommentIdReactionsReactionId = async (id: string,
    issueCommentId: string,
    reactionId: string,
    params?: GetIssuesIdCommentsIssueCommentIdReactionsReactionIdParams, options?: RequestInit): Promise<getIssuesIdCommentsIssueCommentIdReactionsReactionIdResponse> => {
  
  return customInstance<getIssuesIdCommentsIssueCommentIdReactionsReactionIdResponse>(getGetIssuesIdCommentsIssueCommentIdReactionsReactionIdUrl(id,issueCommentId,reactionId,params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type deleteIssuesIdCommentsIssueCommentIdReactionsReactionIdResponse200 = {
  data: void
  status: 200
}
    
export type deleteIssuesIdCommentsIssueCommentIdReactionsReactionIdResponseComposite = deleteIssuesIdCommentsIssueCommentIdReactionsReactionIdResponse200;
    
export type deleteIssuesIdCommentsIssueCommentIdReactionsReactionIdResponse = deleteIssuesIdCommentsIssueCommentIdReactionsReactionIdResponseComposite & {
  headers: Headers;
}

export const getDeleteIssuesIdCommentsIssueCommentIdReactionsReactionIdUrl = (id: string,
    issueCommentId: string,
    reactionId: string,) => {


  

  return `/issues/${id}/comments/${issueCommentId}/reactions/${reactionId}`
}

export const deleteIssuesIdCommentsIssueCommentIdReactionsReactionId = async (id: string,
    issueCommentId: string,
    reactionId: string, options?: RequestInit): Promise<deleteIssuesIdCommentsIssueCommentIdReactionsReactionIdResponse> => {
  
  return customInstance<deleteIssuesIdCommentsIssueCommentIdReactionsReactionIdResponse>(getDeleteIssuesIdCommentsIssueCommentIdReactionsReactionIdUrl(id,issueCommentId,reactionId),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
);}



export type getIssuesIdCustomFieldsResponse200 = {
  data: IssueCustomField[]
  status: 200
}
    
export type getIssuesIdCustomFieldsResponseComposite = getIssuesIdCustomFieldsResponse200;
    
export type getIssuesIdCustomFieldsResponse = getIssuesIdCustomFieldsResponseComposite & {
  headers: Headers;
}

export const getGetIssuesIdCustomFieldsUrl = (id: string,
    params?: GetIssuesIdCustomFieldsParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/issues/${id}/customFields?${stringifiedParams}` : `/issues/${id}/customFields`
}

export const getIssuesIdCustomFields = async (id: string,
    params?: GetIssuesIdCustomFieldsParams, options?: RequestInit): Promise<getIssuesIdCustomFieldsResponse> => {
  
  return customInstance<getIssuesIdCustomFieldsResponse>(getGetIssuesIdCustomFieldsUrl(id,params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type getIssuesIdCustomFieldsIssueCustomFieldIdResponse200 = {
  data: IssueCustomField
  status: 200
}
    
export type getIssuesIdCustomFieldsIssueCustomFieldIdResponseComposite = getIssuesIdCustomFieldsIssueCustomFieldIdResponse200;
    
export type getIssuesIdCustomFieldsIssueCustomFieldIdResponse = getIssuesIdCustomFieldsIssueCustomFieldIdResponseComposite & {
  headers: Headers;
}

export const getGetIssuesIdCustomFieldsIssueCustomFieldIdUrl = (id: string,
    issueCustomFieldId: string,
    params?: GetIssuesIdCustomFieldsIssueCustomFieldIdParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/issues/${id}/customFields/${issueCustomFieldId}?${stringifiedParams}` : `/issues/${id}/customFields/${issueCustomFieldId}`
}

export const getIssuesIdCustomFieldsIssueCustomFieldId = async (id: string,
    issueCustomFieldId: string,
    params?: GetIssuesIdCustomFieldsIssueCustomFieldIdParams, options?: RequestInit): Promise<getIssuesIdCustomFieldsIssueCustomFieldIdResponse> => {
  
  return customInstance<getIssuesIdCustomFieldsIssueCustomFieldIdResponse>(getGetIssuesIdCustomFieldsIssueCustomFieldIdUrl(id,issueCustomFieldId,params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type postIssuesIdCustomFieldsIssueCustomFieldIdResponse200 = {
  data: IssueCustomField
  status: 200
}
    
export type postIssuesIdCustomFieldsIssueCustomFieldIdResponseComposite = postIssuesIdCustomFieldsIssueCustomFieldIdResponse200;
    
export type postIssuesIdCustomFieldsIssueCustomFieldIdResponse = postIssuesIdCustomFieldsIssueCustomFieldIdResponseComposite & {
  headers: Headers;
}

export const getPostIssuesIdCustomFieldsIssueCustomFieldIdUrl = (id: string,
    issueCustomFieldId: string,
    params?: PostIssuesIdCustomFieldsIssueCustomFieldIdParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/issues/${id}/customFields/${issueCustomFieldId}?${stringifiedParams}` : `/issues/${id}/customFields/${issueCustomFieldId}`
}

export const postIssuesIdCustomFieldsIssueCustomFieldId = async (id: string,
    issueCustomFieldId: string,
    issueCustomField: NonReadonly<IssueCustomField>,
    params?: PostIssuesIdCustomFieldsIssueCustomFieldIdParams, options?: RequestInit): Promise<postIssuesIdCustomFieldsIssueCustomFieldIdResponse> => {
  
  return customInstance<postIssuesIdCustomFieldsIssueCustomFieldIdResponse>(getPostIssuesIdCustomFieldsIssueCustomFieldIdUrl(id,issueCustomFieldId,params),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      issueCustomField,)
  }
);}



export type getIssuesIdLinksResponse200 = {
  data: IssueLink[]
  status: 200
}
    
export type getIssuesIdLinksResponseComposite = getIssuesIdLinksResponse200;
    
export type getIssuesIdLinksResponse = getIssuesIdLinksResponseComposite & {
  headers: Headers;
}

export const getGetIssuesIdLinksUrl = (id: string,
    params?: GetIssuesIdLinksParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/issues/${id}/links?${stringifiedParams}` : `/issues/${id}/links`
}

export const getIssuesIdLinks = async (id: string,
    params?: GetIssuesIdLinksParams, options?: RequestInit): Promise<getIssuesIdLinksResponse> => {
  
  return customInstance<getIssuesIdLinksResponse>(getGetIssuesIdLinksUrl(id,params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type getIssuesIdLinksIssueLinkIdResponse200 = {
  data: IssueLink
  status: 200
}
    
export type getIssuesIdLinksIssueLinkIdResponseComposite = getIssuesIdLinksIssueLinkIdResponse200;
    
export type getIssuesIdLinksIssueLinkIdResponse = getIssuesIdLinksIssueLinkIdResponseComposite & {
  headers: Headers;
}

export const getGetIssuesIdLinksIssueLinkIdUrl = (id: string,
    issueLinkId: string,
    params?: GetIssuesIdLinksIssueLinkIdParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/issues/${id}/links/${issueLinkId}?${stringifiedParams}` : `/issues/${id}/links/${issueLinkId}`
}

export const getIssuesIdLinksIssueLinkId = async (id: string,
    issueLinkId: string,
    params?: GetIssuesIdLinksIssueLinkIdParams, options?: RequestInit): Promise<getIssuesIdLinksIssueLinkIdResponse> => {
  
  return customInstance<getIssuesIdLinksIssueLinkIdResponse>(getGetIssuesIdLinksIssueLinkIdUrl(id,issueLinkId,params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type getIssuesIdLinksIssueLinkIdIssuesResponse200 = {
  data: Issue[]
  status: 200
}
    
export type getIssuesIdLinksIssueLinkIdIssuesResponseComposite = getIssuesIdLinksIssueLinkIdIssuesResponse200;
    
export type getIssuesIdLinksIssueLinkIdIssuesResponse = getIssuesIdLinksIssueLinkIdIssuesResponseComposite & {
  headers: Headers;
}

export const getGetIssuesIdLinksIssueLinkIdIssuesUrl = (id: string,
    issueLinkId: string,
    params?: GetIssuesIdLinksIssueLinkIdIssuesParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/issues/${id}/links/${issueLinkId}/issues?${stringifiedParams}` : `/issues/${id}/links/${issueLinkId}/issues`
}

export const getIssuesIdLinksIssueLinkIdIssues = async (id: string,
    issueLinkId: string,
    params?: GetIssuesIdLinksIssueLinkIdIssuesParams, options?: RequestInit): Promise<getIssuesIdLinksIssueLinkIdIssuesResponse> => {
  
  return customInstance<getIssuesIdLinksIssueLinkIdIssuesResponse>(getGetIssuesIdLinksIssueLinkIdIssuesUrl(id,issueLinkId,params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type postIssuesIdLinksIssueLinkIdIssuesResponse200 = {
  data: Issue
  status: 200
}
    
export type postIssuesIdLinksIssueLinkIdIssuesResponseComposite = postIssuesIdLinksIssueLinkIdIssuesResponse200;
    
export type postIssuesIdLinksIssueLinkIdIssuesResponse = postIssuesIdLinksIssueLinkIdIssuesResponseComposite & {
  headers: Headers;
}

export const getPostIssuesIdLinksIssueLinkIdIssuesUrl = (id: string,
    issueLinkId: string,
    params?: PostIssuesIdLinksIssueLinkIdIssuesParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/issues/${id}/links/${issueLinkId}/issues?${stringifiedParams}` : `/issues/${id}/links/${issueLinkId}/issues`
}

export const postIssuesIdLinksIssueLinkIdIssues = async (id: string,
    issueLinkId: string,
    issue: NonReadonly<Issue>,
    params?: PostIssuesIdLinksIssueLinkIdIssuesParams, options?: RequestInit): Promise<postIssuesIdLinksIssueLinkIdIssuesResponse> => {
  
  return customInstance<postIssuesIdLinksIssueLinkIdIssuesResponse>(getPostIssuesIdLinksIssueLinkIdIssuesUrl(id,issueLinkId,params),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      issue,)
  }
);}



export type deleteIssuesIdLinksIssueLinkIdIssuesIssueIdResponse200 = {
  data: void
  status: 200
}
    
export type deleteIssuesIdLinksIssueLinkIdIssuesIssueIdResponseComposite = deleteIssuesIdLinksIssueLinkIdIssuesIssueIdResponse200;
    
export type deleteIssuesIdLinksIssueLinkIdIssuesIssueIdResponse = deleteIssuesIdLinksIssueLinkIdIssuesIssueIdResponseComposite & {
  headers: Headers;
}

export const getDeleteIssuesIdLinksIssueLinkIdIssuesIssueIdUrl = (id: string,
    issueLinkId: string,
    issueId: string,) => {


  

  return `/issues/${id}/links/${issueLinkId}/issues/${issueId}`
}

export const deleteIssuesIdLinksIssueLinkIdIssuesIssueId = async (id: string,
    issueLinkId: string,
    issueId: string, options?: RequestInit): Promise<deleteIssuesIdLinksIssueLinkIdIssuesIssueIdResponse> => {
  
  return customInstance<deleteIssuesIdLinksIssueLinkIdIssuesIssueIdResponse>(getDeleteIssuesIdLinksIssueLinkIdIssuesIssueIdUrl(id,issueLinkId,issueId),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
);}



export type getIssuesIdProjectResponse200 = {
  data: Project
  status: 200
}
    
export type getIssuesIdProjectResponseComposite = getIssuesIdProjectResponse200;
    
export type getIssuesIdProjectResponse = getIssuesIdProjectResponseComposite & {
  headers: Headers;
}

export const getGetIssuesIdProjectUrl = (id: string,
    params?: GetIssuesIdProjectParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/issues/${id}/project?${stringifiedParams}` : `/issues/${id}/project`
}

export const getIssuesIdProject = async (id: string,
    params?: GetIssuesIdProjectParams, options?: RequestInit): Promise<getIssuesIdProjectResponse> => {
  
  return customInstance<getIssuesIdProjectResponse>(getGetIssuesIdProjectUrl(id,params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type postIssuesIdProjectResponse200 = {
  data: Project
  status: 200
}
    
export type postIssuesIdProjectResponseComposite = postIssuesIdProjectResponse200;
    
export type postIssuesIdProjectResponse = postIssuesIdProjectResponseComposite & {
  headers: Headers;
}

export const getPostIssuesIdProjectUrl = (id: string,
    params?: PostIssuesIdProjectParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/issues/${id}/project?${stringifiedParams}` : `/issues/${id}/project`
}

export const postIssuesIdProject = async (id: string,
    project: NonReadonly<Project>,
    params?: PostIssuesIdProjectParams, options?: RequestInit): Promise<postIssuesIdProjectResponse> => {
  
  return customInstance<postIssuesIdProjectResponse>(getPostIssuesIdProjectUrl(id,params),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      project,)
  }
);}



export type getIssuesIdSprintsResponse200 = {
  data: Sprint[]
  status: 200
}
    
export type getIssuesIdSprintsResponseComposite = getIssuesIdSprintsResponse200;
    
export type getIssuesIdSprintsResponse = getIssuesIdSprintsResponseComposite & {
  headers: Headers;
}

export const getGetIssuesIdSprintsUrl = (id: string,
    params?: GetIssuesIdSprintsParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/issues/${id}/sprints?${stringifiedParams}` : `/issues/${id}/sprints`
}

export const getIssuesIdSprints = async (id: string,
    params?: GetIssuesIdSprintsParams, options?: RequestInit): Promise<getIssuesIdSprintsResponse> => {
  
  return customInstance<getIssuesIdSprintsResponse>(getGetIssuesIdSprintsUrl(id,params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type getIssuesIdTagsResponse200 = {
  data: Tag[]
  status: 200
}
    
export type getIssuesIdTagsResponseComposite = getIssuesIdTagsResponse200;
    
export type getIssuesIdTagsResponse = getIssuesIdTagsResponseComposite & {
  headers: Headers;
}

export const getGetIssuesIdTagsUrl = (id: string,
    params?: GetIssuesIdTagsParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/issues/${id}/tags?${stringifiedParams}` : `/issues/${id}/tags`
}

export const getIssuesIdTags = async (id: string,
    params?: GetIssuesIdTagsParams, options?: RequestInit): Promise<getIssuesIdTagsResponse> => {
  
  return customInstance<getIssuesIdTagsResponse>(getGetIssuesIdTagsUrl(id,params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type postIssuesIdTagsResponse200 = {
  data: Tag
  status: 200
}
    
export type postIssuesIdTagsResponseComposite = postIssuesIdTagsResponse200;
    
export type postIssuesIdTagsResponse = postIssuesIdTagsResponseComposite & {
  headers: Headers;
}

export const getPostIssuesIdTagsUrl = (id: string,
    params?: PostIssuesIdTagsParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/issues/${id}/tags?${stringifiedParams}` : `/issues/${id}/tags`
}

export const postIssuesIdTags = async (id: string,
    tag: NonReadonly<Tag>,
    params?: PostIssuesIdTagsParams, options?: RequestInit): Promise<postIssuesIdTagsResponse> => {
  
  return customInstance<postIssuesIdTagsResponse>(getPostIssuesIdTagsUrl(id,params),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      tag,)
  }
);}



export type getIssuesIdTagsTagIdResponse200 = {
  data: Tag
  status: 200
}
    
export type getIssuesIdTagsTagIdResponseComposite = getIssuesIdTagsTagIdResponse200;
    
export type getIssuesIdTagsTagIdResponse = getIssuesIdTagsTagIdResponseComposite & {
  headers: Headers;
}

export const getGetIssuesIdTagsTagIdUrl = (id: string,
    tagId: string,
    params?: GetIssuesIdTagsTagIdParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/issues/${id}/tags/${tagId}?${stringifiedParams}` : `/issues/${id}/tags/${tagId}`
}

export const getIssuesIdTagsTagId = async (id: string,
    tagId: string,
    params?: GetIssuesIdTagsTagIdParams, options?: RequestInit): Promise<getIssuesIdTagsTagIdResponse> => {
  
  return customInstance<getIssuesIdTagsTagIdResponse>(getGetIssuesIdTagsTagIdUrl(id,tagId,params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type deleteIssuesIdTagsTagIdResponse200 = {
  data: void
  status: 200
}
    
export type deleteIssuesIdTagsTagIdResponseComposite = deleteIssuesIdTagsTagIdResponse200;
    
export type deleteIssuesIdTagsTagIdResponse = deleteIssuesIdTagsTagIdResponseComposite & {
  headers: Headers;
}

export const getDeleteIssuesIdTagsTagIdUrl = (id: string,
    tagId: string,) => {


  

  return `/issues/${id}/tags/${tagId}`
}

export const deleteIssuesIdTagsTagId = async (id: string,
    tagId: string, options?: RequestInit): Promise<deleteIssuesIdTagsTagIdResponse> => {
  
  return customInstance<deleteIssuesIdTagsTagIdResponse>(getDeleteIssuesIdTagsTagIdUrl(id,tagId),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
);}



export type getIssuesIdTimeTrackingResponse200 = {
  data: IssueTimeTracker
  status: 200
}
    
export type getIssuesIdTimeTrackingResponseComposite = getIssuesIdTimeTrackingResponse200;
    
export type getIssuesIdTimeTrackingResponse = getIssuesIdTimeTrackingResponseComposite & {
  headers: Headers;
}

export const getGetIssuesIdTimeTrackingUrl = (id: string,
    params?: GetIssuesIdTimeTrackingParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/issues/${id}/timeTracking?${stringifiedParams}` : `/issues/${id}/timeTracking`
}

export const getIssuesIdTimeTracking = async (id: string,
    params?: GetIssuesIdTimeTrackingParams, options?: RequestInit): Promise<getIssuesIdTimeTrackingResponse> => {
  
  return customInstance<getIssuesIdTimeTrackingResponse>(getGetIssuesIdTimeTrackingUrl(id,params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type getIssuesIdTimeTrackingWorkItemsResponse200 = {
  data: IssueWorkItem[]
  status: 200
}
    
export type getIssuesIdTimeTrackingWorkItemsResponseComposite = getIssuesIdTimeTrackingWorkItemsResponse200;
    
export type getIssuesIdTimeTrackingWorkItemsResponse = getIssuesIdTimeTrackingWorkItemsResponseComposite & {
  headers: Headers;
}

export const getGetIssuesIdTimeTrackingWorkItemsUrl = (id: string,
    params?: GetIssuesIdTimeTrackingWorkItemsParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/issues/${id}/timeTracking/workItems?${stringifiedParams}` : `/issues/${id}/timeTracking/workItems`
}

export const getIssuesIdTimeTrackingWorkItems = async (id: string,
    params?: GetIssuesIdTimeTrackingWorkItemsParams, options?: RequestInit): Promise<getIssuesIdTimeTrackingWorkItemsResponse> => {
  
  return customInstance<getIssuesIdTimeTrackingWorkItemsResponse>(getGetIssuesIdTimeTrackingWorkItemsUrl(id,params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type postIssuesIdTimeTrackingWorkItemsResponse200 = {
  data: IssueWorkItem
  status: 200
}
    
export type postIssuesIdTimeTrackingWorkItemsResponseComposite = postIssuesIdTimeTrackingWorkItemsResponse200;
    
export type postIssuesIdTimeTrackingWorkItemsResponse = postIssuesIdTimeTrackingWorkItemsResponseComposite & {
  headers: Headers;
}

export const getPostIssuesIdTimeTrackingWorkItemsUrl = (id: string,
    params?: PostIssuesIdTimeTrackingWorkItemsParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/issues/${id}/timeTracking/workItems?${stringifiedParams}` : `/issues/${id}/timeTracking/workItems`
}

export const postIssuesIdTimeTrackingWorkItems = async (id: string,
    issueWorkItem: NonReadonly<IssueWorkItem>,
    params?: PostIssuesIdTimeTrackingWorkItemsParams, options?: RequestInit): Promise<postIssuesIdTimeTrackingWorkItemsResponse> => {
  
  return customInstance<postIssuesIdTimeTrackingWorkItemsResponse>(getPostIssuesIdTimeTrackingWorkItemsUrl(id,params),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      issueWorkItem,)
  }
);}



export type getIssuesIdTimeTrackingWorkItemsIssueWorkItemIdResponse200 = {
  data: IssueWorkItem
  status: 200
}
    
export type getIssuesIdTimeTrackingWorkItemsIssueWorkItemIdResponseComposite = getIssuesIdTimeTrackingWorkItemsIssueWorkItemIdResponse200;
    
export type getIssuesIdTimeTrackingWorkItemsIssueWorkItemIdResponse = getIssuesIdTimeTrackingWorkItemsIssueWorkItemIdResponseComposite & {
  headers: Headers;
}

export const getGetIssuesIdTimeTrackingWorkItemsIssueWorkItemIdUrl = (id: string,
    issueWorkItemId: string,
    params?: GetIssuesIdTimeTrackingWorkItemsIssueWorkItemIdParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/issues/${id}/timeTracking/workItems/${issueWorkItemId}?${stringifiedParams}` : `/issues/${id}/timeTracking/workItems/${issueWorkItemId}`
}

export const getIssuesIdTimeTrackingWorkItemsIssueWorkItemId = async (id: string,
    issueWorkItemId: string,
    params?: GetIssuesIdTimeTrackingWorkItemsIssueWorkItemIdParams, options?: RequestInit): Promise<getIssuesIdTimeTrackingWorkItemsIssueWorkItemIdResponse> => {
  
  return customInstance<getIssuesIdTimeTrackingWorkItemsIssueWorkItemIdResponse>(getGetIssuesIdTimeTrackingWorkItemsIssueWorkItemIdUrl(id,issueWorkItemId,params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type postIssuesIdTimeTrackingWorkItemsIssueWorkItemIdResponse200 = {
  data: IssueWorkItem
  status: 200
}
    
export type postIssuesIdTimeTrackingWorkItemsIssueWorkItemIdResponseComposite = postIssuesIdTimeTrackingWorkItemsIssueWorkItemIdResponse200;
    
export type postIssuesIdTimeTrackingWorkItemsIssueWorkItemIdResponse = postIssuesIdTimeTrackingWorkItemsIssueWorkItemIdResponseComposite & {
  headers: Headers;
}

export const getPostIssuesIdTimeTrackingWorkItemsIssueWorkItemIdUrl = (id: string,
    issueWorkItemId: string,
    params?: PostIssuesIdTimeTrackingWorkItemsIssueWorkItemIdParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/issues/${id}/timeTracking/workItems/${issueWorkItemId}?${stringifiedParams}` : `/issues/${id}/timeTracking/workItems/${issueWorkItemId}`
}

export const postIssuesIdTimeTrackingWorkItemsIssueWorkItemId = async (id: string,
    issueWorkItemId: string,
    issueWorkItem: NonReadonly<IssueWorkItem>,
    params?: PostIssuesIdTimeTrackingWorkItemsIssueWorkItemIdParams, options?: RequestInit): Promise<postIssuesIdTimeTrackingWorkItemsIssueWorkItemIdResponse> => {
  
  return customInstance<postIssuesIdTimeTrackingWorkItemsIssueWorkItemIdResponse>(getPostIssuesIdTimeTrackingWorkItemsIssueWorkItemIdUrl(id,issueWorkItemId,params),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      issueWorkItem,)
  }
);}



export type deleteIssuesIdTimeTrackingWorkItemsIssueWorkItemIdResponse200 = {
  data: void
  status: 200
}
    
export type deleteIssuesIdTimeTrackingWorkItemsIssueWorkItemIdResponseComposite = deleteIssuesIdTimeTrackingWorkItemsIssueWorkItemIdResponse200;
    
export type deleteIssuesIdTimeTrackingWorkItemsIssueWorkItemIdResponse = deleteIssuesIdTimeTrackingWorkItemsIssueWorkItemIdResponseComposite & {
  headers: Headers;
}

export const getDeleteIssuesIdTimeTrackingWorkItemsIssueWorkItemIdUrl = (id: string,
    issueWorkItemId: string,) => {


  

  return `/issues/${id}/timeTracking/workItems/${issueWorkItemId}`
}

export const deleteIssuesIdTimeTrackingWorkItemsIssueWorkItemId = async (id: string,
    issueWorkItemId: string, options?: RequestInit): Promise<deleteIssuesIdTimeTrackingWorkItemsIssueWorkItemIdResponse> => {
  
  return customInstance<deleteIssuesIdTimeTrackingWorkItemsIssueWorkItemIdResponse>(getDeleteIssuesIdTimeTrackingWorkItemsIssueWorkItemIdUrl(id,issueWorkItemId),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
);}



export type getIssuesIdVcsChangesResponse200 = {
  data: VcsChange[]
  status: 200
}
    
export type getIssuesIdVcsChangesResponseComposite = getIssuesIdVcsChangesResponse200;
    
export type getIssuesIdVcsChangesResponse = getIssuesIdVcsChangesResponseComposite & {
  headers: Headers;
}

export const getGetIssuesIdVcsChangesUrl = (id: string,
    params?: GetIssuesIdVcsChangesParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/issues/${id}/vcsChanges?${stringifiedParams}` : `/issues/${id}/vcsChanges`
}

export const getIssuesIdVcsChanges = async (id: string,
    params?: GetIssuesIdVcsChangesParams, options?: RequestInit): Promise<getIssuesIdVcsChangesResponse> => {
  
  return customInstance<getIssuesIdVcsChangesResponse>(getGetIssuesIdVcsChangesUrl(id,params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type postIssuesIdVcsChangesResponse200 = {
  data: VcsChange
  status: 200
}
    
export type postIssuesIdVcsChangesResponseComposite = postIssuesIdVcsChangesResponse200;
    
export type postIssuesIdVcsChangesResponse = postIssuesIdVcsChangesResponseComposite & {
  headers: Headers;
}

export const getPostIssuesIdVcsChangesUrl = (id: string,
    params?: PostIssuesIdVcsChangesParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/issues/${id}/vcsChanges?${stringifiedParams}` : `/issues/${id}/vcsChanges`
}

export const postIssuesIdVcsChanges = async (id: string,
    vcsChange: NonReadonly<VcsChange>,
    params?: PostIssuesIdVcsChangesParams, options?: RequestInit): Promise<postIssuesIdVcsChangesResponse> => {
  
  return customInstance<postIssuesIdVcsChangesResponse>(getPostIssuesIdVcsChangesUrl(id,params),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      vcsChange,)
  }
);}



export type getIssuesIdVcsChangesVcsChangeIdResponse200 = {
  data: VcsChange
  status: 200
}
    
export type getIssuesIdVcsChangesVcsChangeIdResponseComposite = getIssuesIdVcsChangesVcsChangeIdResponse200;
    
export type getIssuesIdVcsChangesVcsChangeIdResponse = getIssuesIdVcsChangesVcsChangeIdResponseComposite & {
  headers: Headers;
}

export const getGetIssuesIdVcsChangesVcsChangeIdUrl = (id: string,
    vcsChangeId: string,
    params?: GetIssuesIdVcsChangesVcsChangeIdParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/issues/${id}/vcsChanges/${vcsChangeId}?${stringifiedParams}` : `/issues/${id}/vcsChanges/${vcsChangeId}`
}

export const getIssuesIdVcsChangesVcsChangeId = async (id: string,
    vcsChangeId: string,
    params?: GetIssuesIdVcsChangesVcsChangeIdParams, options?: RequestInit): Promise<getIssuesIdVcsChangesVcsChangeIdResponse> => {
  
  return customInstance<getIssuesIdVcsChangesVcsChangeIdResponse>(getGetIssuesIdVcsChangesVcsChangeIdUrl(id,vcsChangeId,params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type postIssuesIdVcsChangesVcsChangeIdResponse200 = {
  data: VcsChange
  status: 200
}
    
export type postIssuesIdVcsChangesVcsChangeIdResponseComposite = postIssuesIdVcsChangesVcsChangeIdResponse200;
    
export type postIssuesIdVcsChangesVcsChangeIdResponse = postIssuesIdVcsChangesVcsChangeIdResponseComposite & {
  headers: Headers;
}

export const getPostIssuesIdVcsChangesVcsChangeIdUrl = (id: string,
    vcsChangeId: string,
    params?: PostIssuesIdVcsChangesVcsChangeIdParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/issues/${id}/vcsChanges/${vcsChangeId}?${stringifiedParams}` : `/issues/${id}/vcsChanges/${vcsChangeId}`
}

export const postIssuesIdVcsChangesVcsChangeId = async (id: string,
    vcsChangeId: string,
    vcsChange: NonReadonly<VcsChange>,
    params?: PostIssuesIdVcsChangesVcsChangeIdParams, options?: RequestInit): Promise<postIssuesIdVcsChangesVcsChangeIdResponse> => {
  
  return customInstance<postIssuesIdVcsChangesVcsChangeIdResponse>(getPostIssuesIdVcsChangesVcsChangeIdUrl(id,vcsChangeId,params),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      vcsChange,)
  }
);}



export type deleteIssuesIdVcsChangesVcsChangeIdResponse200 = {
  data: void
  status: 200
}
    
export type deleteIssuesIdVcsChangesVcsChangeIdResponseComposite = deleteIssuesIdVcsChangesVcsChangeIdResponse200;
    
export type deleteIssuesIdVcsChangesVcsChangeIdResponse = deleteIssuesIdVcsChangesVcsChangeIdResponseComposite & {
  headers: Headers;
}

export const getDeleteIssuesIdVcsChangesVcsChangeIdUrl = (id: string,
    vcsChangeId: string,) => {


  

  return `/issues/${id}/vcsChanges/${vcsChangeId}`
}

export const deleteIssuesIdVcsChangesVcsChangeId = async (id: string,
    vcsChangeId: string, options?: RequestInit): Promise<deleteIssuesIdVcsChangesVcsChangeIdResponse> => {
  
  return customInstance<deleteIssuesIdVcsChangesVcsChangeIdResponse>(getDeleteIssuesIdVcsChangesVcsChangeIdUrl(id,vcsChangeId),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
);}



export type postIssuesGetterCountResponse200 = {
  data: IssueCountResponse
  status: 200
}
    
export type postIssuesGetterCountResponseComposite = postIssuesGetterCountResponse200;
    
export type postIssuesGetterCountResponse = postIssuesGetterCountResponseComposite & {
  headers: Headers;
}

export const getPostIssuesGetterCountUrl = (params?: PostIssuesGetterCountParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/issuesGetter/count?${stringifiedParams}` : `/issuesGetter/count`
}

export const postIssuesGetterCount = async (issueCountResponse: NonReadonly<IssueCountResponse>,
    params?: PostIssuesGetterCountParams, options?: RequestInit): Promise<postIssuesGetterCountResponse> => {
  
  return customInstance<postIssuesGetterCountResponse>(getPostIssuesGetterCountUrl(params),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      issueCountResponse,)
  }
);}



export type getSavedQueriesResponse200 = {
  data: SavedQuery[]
  status: 200
}
    
export type getSavedQueriesResponseComposite = getSavedQueriesResponse200;
    
export type getSavedQueriesResponse = getSavedQueriesResponseComposite & {
  headers: Headers;
}

export const getGetSavedQueriesUrl = (params?: GetSavedQueriesParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/savedQueries?${stringifiedParams}` : `/savedQueries`
}

export const getSavedQueries = async (params?: GetSavedQueriesParams, options?: RequestInit): Promise<getSavedQueriesResponse> => {
  
  return customInstance<getSavedQueriesResponse>(getGetSavedQueriesUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type postSavedQueriesResponse200 = {
  data: SavedQuery
  status: 200
}
    
export type postSavedQueriesResponseComposite = postSavedQueriesResponse200;
    
export type postSavedQueriesResponse = postSavedQueriesResponseComposite & {
  headers: Headers;
}

export const getPostSavedQueriesUrl = (params?: PostSavedQueriesParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/savedQueries?${stringifiedParams}` : `/savedQueries`
}

export const postSavedQueries = async (savedQuery: NonReadonly<SavedQuery>,
    params?: PostSavedQueriesParams, options?: RequestInit): Promise<postSavedQueriesResponse> => {
  
  return customInstance<postSavedQueriesResponse>(getPostSavedQueriesUrl(params),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      savedQuery,)
  }
);}



export type getSavedQueriesIdResponse200 = {
  data: SavedQuery
  status: 200
}
    
export type getSavedQueriesIdResponseComposite = getSavedQueriesIdResponse200;
    
export type getSavedQueriesIdResponse = getSavedQueriesIdResponseComposite & {
  headers: Headers;
}

export const getGetSavedQueriesIdUrl = (id: string,
    params?: GetSavedQueriesIdParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/savedQueries/${id}?${stringifiedParams}` : `/savedQueries/${id}`
}

export const getSavedQueriesId = async (id: string,
    params?: GetSavedQueriesIdParams, options?: RequestInit): Promise<getSavedQueriesIdResponse> => {
  
  return customInstance<getSavedQueriesIdResponse>(getGetSavedQueriesIdUrl(id,params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type postSavedQueriesIdResponse200 = {
  data: SavedQuery
  status: 200
}
    
export type postSavedQueriesIdResponseComposite = postSavedQueriesIdResponse200;
    
export type postSavedQueriesIdResponse = postSavedQueriesIdResponseComposite & {
  headers: Headers;
}

export const getPostSavedQueriesIdUrl = (id: string,
    params?: PostSavedQueriesIdParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/savedQueries/${id}?${stringifiedParams}` : `/savedQueries/${id}`
}

export const postSavedQueriesId = async (id: string,
    savedQuery: NonReadonly<SavedQuery>,
    params?: PostSavedQueriesIdParams, options?: RequestInit): Promise<postSavedQueriesIdResponse> => {
  
  return customInstance<postSavedQueriesIdResponse>(getPostSavedQueriesIdUrl(id,params),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      savedQuery,)
  }
);}



export type deleteSavedQueriesIdResponse200 = {
  data: void
  status: 200
}
    
export type deleteSavedQueriesIdResponseComposite = deleteSavedQueriesIdResponse200;
    
export type deleteSavedQueriesIdResponse = deleteSavedQueriesIdResponseComposite & {
  headers: Headers;
}

export const getDeleteSavedQueriesIdUrl = (id: string,) => {


  

  return `/savedQueries/${id}`
}

export const deleteSavedQueriesId = async (id: string, options?: RequestInit): Promise<deleteSavedQueriesIdResponse> => {
  
  return customInstance<deleteSavedQueriesIdResponse>(getDeleteSavedQueriesIdUrl(id),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
);}



export type postSearchAssistResponse200 = {
  data: SearchSuggestions
  status: 200
}
    
export type postSearchAssistResponseComposite = postSearchAssistResponse200;
    
export type postSearchAssistResponse = postSearchAssistResponseComposite & {
  headers: Headers;
}

export const getPostSearchAssistUrl = (params?: PostSearchAssistParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/search/assist?${stringifiedParams}` : `/search/assist`
}

export const postSearchAssist = async (searchSuggestions: NonReadonly<SearchSuggestions>,
    params?: PostSearchAssistParams, options?: RequestInit): Promise<postSearchAssistResponse> => {
  
  return customInstance<postSearchAssistResponse>(getPostSearchAssistUrl(params),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      searchSuggestions,)
  }
);}



export type getTagsResponse200 = {
  data: Tag[]
  status: 200
}
    
export type getTagsResponseComposite = getTagsResponse200;
    
export type getTagsResponse = getTagsResponseComposite & {
  headers: Headers;
}

export const getGetTagsUrl = (params?: GetTagsParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/tags?${stringifiedParams}` : `/tags`
}

export const getTags = async (params?: GetTagsParams, options?: RequestInit): Promise<getTagsResponse> => {
  
  return customInstance<getTagsResponse>(getGetTagsUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type postTagsResponse200 = {
  data: Tag
  status: 200
}
    
export type postTagsResponseComposite = postTagsResponse200;
    
export type postTagsResponse = postTagsResponseComposite & {
  headers: Headers;
}

export const getPostTagsUrl = (params?: PostTagsParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/tags?${stringifiedParams}` : `/tags`
}

export const postTags = async (tag: NonReadonly<Tag>,
    params?: PostTagsParams, options?: RequestInit): Promise<postTagsResponse> => {
  
  return customInstance<postTagsResponse>(getPostTagsUrl(params),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      tag,)
  }
);}



export type getTagsIdResponse200 = {
  data: Tag
  status: 200
}
    
export type getTagsIdResponseComposite = getTagsIdResponse200;
    
export type getTagsIdResponse = getTagsIdResponseComposite & {
  headers: Headers;
}

export const getGetTagsIdUrl = (id: string,
    params?: GetTagsIdParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/tags/${id}?${stringifiedParams}` : `/tags/${id}`
}

export const getTagsId = async (id: string,
    params?: GetTagsIdParams, options?: RequestInit): Promise<getTagsIdResponse> => {
  
  return customInstance<getTagsIdResponse>(getGetTagsIdUrl(id,params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type postTagsIdResponse200 = {
  data: Tag
  status: 200
}
    
export type postTagsIdResponseComposite = postTagsIdResponse200;
    
export type postTagsIdResponse = postTagsIdResponseComposite & {
  headers: Headers;
}

export const getPostTagsIdUrl = (id: string,
    params?: PostTagsIdParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/tags/${id}?${stringifiedParams}` : `/tags/${id}`
}

export const postTagsId = async (id: string,
    tag: NonReadonly<Tag>,
    params?: PostTagsIdParams, options?: RequestInit): Promise<postTagsIdResponse> => {
  
  return customInstance<postTagsIdResponse>(getPostTagsIdUrl(id,params),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      tag,)
  }
);}



export type deleteTagsIdResponse200 = {
  data: void
  status: 200
}
    
export type deleteTagsIdResponseComposite = deleteTagsIdResponse200;
    
export type deleteTagsIdResponse = deleteTagsIdResponseComposite & {
  headers: Headers;
}

export const getDeleteTagsIdUrl = (id: string,) => {


  

  return `/tags/${id}`
}

export const deleteTagsId = async (id: string, options?: RequestInit): Promise<deleteTagsIdResponse> => {
  
  return customInstance<deleteTagsIdResponse>(getDeleteTagsIdUrl(id),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
);}



export type getTagsIdIssuesResponse200 = {
  data: Issue[]
  status: 200
}
    
export type getTagsIdIssuesResponseComposite = getTagsIdIssuesResponse200;
    
export type getTagsIdIssuesResponse = getTagsIdIssuesResponseComposite & {
  headers: Headers;
}

export const getGetTagsIdIssuesUrl = (id: string,
    params?: GetTagsIdIssuesParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/tags/${id}/issues?${stringifiedParams}` : `/tags/${id}/issues`
}

export const getTagsIdIssues = async (id: string,
    params?: GetTagsIdIssuesParams, options?: RequestInit): Promise<getTagsIdIssuesResponse> => {
  
  return customInstance<getTagsIdIssuesResponse>(getGetTagsIdIssuesUrl(id,params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type getUsersResponse200 = {
  data: User[]
  status: 200
}
    
export type getUsersResponseComposite = getUsersResponse200;
    
export type getUsersResponse = getUsersResponseComposite & {
  headers: Headers;
}

export const getGetUsersUrl = (params?: GetUsersParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/users?${stringifiedParams}` : `/users`
}

export const getUsers = async (params?: GetUsersParams, options?: RequestInit): Promise<getUsersResponse> => {
  
  return customInstance<getUsersResponse>(getGetUsersUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type getUsersIdResponse200 = {
  data: User
  status: 200
}
    
export type getUsersIdResponseComposite = getUsersIdResponse200;
    
export type getUsersIdResponse = getUsersIdResponseComposite & {
  headers: Headers;
}

export const getGetUsersIdUrl = (id: string,
    params?: GetUsersIdParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/users/${id}?${stringifiedParams}` : `/users/${id}`
}

export const getUsersId = async (id: string,
    params?: GetUsersIdParams, options?: RequestInit): Promise<getUsersIdResponse> => {
  
  return customInstance<getUsersIdResponse>(getGetUsersIdUrl(id,params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type getUsersIdProfilesGeneralResponse200 = {
  data: GeneralUserProfile
  status: 200
}
    
export type getUsersIdProfilesGeneralResponseComposite = getUsersIdProfilesGeneralResponse200;
    
export type getUsersIdProfilesGeneralResponse = getUsersIdProfilesGeneralResponseComposite & {
  headers: Headers;
}

export const getGetUsersIdProfilesGeneralUrl = (id: string,
    params?: GetUsersIdProfilesGeneralParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/users/${id}/profiles/general?${stringifiedParams}` : `/users/${id}/profiles/general`
}

export const getUsersIdProfilesGeneral = async (id: string,
    params?: GetUsersIdProfilesGeneralParams, options?: RequestInit): Promise<getUsersIdProfilesGeneralResponse> => {
  
  return customInstance<getUsersIdProfilesGeneralResponse>(getGetUsersIdProfilesGeneralUrl(id,params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type postUsersIdProfilesGeneralResponse200 = {
  data: GeneralUserProfile
  status: 200
}
    
export type postUsersIdProfilesGeneralResponseComposite = postUsersIdProfilesGeneralResponse200;
    
export type postUsersIdProfilesGeneralResponse = postUsersIdProfilesGeneralResponseComposite & {
  headers: Headers;
}

export const getPostUsersIdProfilesGeneralUrl = (id: string,
    params?: PostUsersIdProfilesGeneralParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/users/${id}/profiles/general?${stringifiedParams}` : `/users/${id}/profiles/general`
}

export const postUsersIdProfilesGeneral = async (id: string,
    generalUserProfile: NonReadonly<GeneralUserProfile>,
    params?: PostUsersIdProfilesGeneralParams, options?: RequestInit): Promise<postUsersIdProfilesGeneralResponse> => {
  
  return customInstance<postUsersIdProfilesGeneralResponse>(getPostUsersIdProfilesGeneralUrl(id,params),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      generalUserProfile,)
  }
);}



export type getUsersIdProfilesNotificationsResponse200 = {
  data: NotificationsUserProfile
  status: 200
}
    
export type getUsersIdProfilesNotificationsResponseComposite = getUsersIdProfilesNotificationsResponse200;
    
export type getUsersIdProfilesNotificationsResponse = getUsersIdProfilesNotificationsResponseComposite & {
  headers: Headers;
}

export const getGetUsersIdProfilesNotificationsUrl = (id: string,
    params?: GetUsersIdProfilesNotificationsParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/users/${id}/profiles/notifications?${stringifiedParams}` : `/users/${id}/profiles/notifications`
}

export const getUsersIdProfilesNotifications = async (id: string,
    params?: GetUsersIdProfilesNotificationsParams, options?: RequestInit): Promise<getUsersIdProfilesNotificationsResponse> => {
  
  return customInstance<getUsersIdProfilesNotificationsResponse>(getGetUsersIdProfilesNotificationsUrl(id,params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type postUsersIdProfilesNotificationsResponse200 = {
  data: NotificationsUserProfile
  status: 200
}
    
export type postUsersIdProfilesNotificationsResponseComposite = postUsersIdProfilesNotificationsResponse200;
    
export type postUsersIdProfilesNotificationsResponse = postUsersIdProfilesNotificationsResponseComposite & {
  headers: Headers;
}

export const getPostUsersIdProfilesNotificationsUrl = (id: string,
    params?: PostUsersIdProfilesNotificationsParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/users/${id}/profiles/notifications?${stringifiedParams}` : `/users/${id}/profiles/notifications`
}

export const postUsersIdProfilesNotifications = async (id: string,
    notificationsUserProfile: NonReadonly<NotificationsUserProfile>,
    params?: PostUsersIdProfilesNotificationsParams, options?: RequestInit): Promise<postUsersIdProfilesNotificationsResponse> => {
  
  return customInstance<postUsersIdProfilesNotificationsResponse>(getPostUsersIdProfilesNotificationsUrl(id,params),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      notificationsUserProfile,)
  }
);}



export type getUsersIdProfilesTimetrackingResponse200 = {
  data: TimeTrackingUserProfile
  status: 200
}
    
export type getUsersIdProfilesTimetrackingResponseComposite = getUsersIdProfilesTimetrackingResponse200;
    
export type getUsersIdProfilesTimetrackingResponse = getUsersIdProfilesTimetrackingResponseComposite & {
  headers: Headers;
}

export const getGetUsersIdProfilesTimetrackingUrl = (id: string,
    params?: GetUsersIdProfilesTimetrackingParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/users/${id}/profiles/timetracking?${stringifiedParams}` : `/users/${id}/profiles/timetracking`
}

export const getUsersIdProfilesTimetracking = async (id: string,
    params?: GetUsersIdProfilesTimetrackingParams, options?: RequestInit): Promise<getUsersIdProfilesTimetrackingResponse> => {
  
  return customInstance<getUsersIdProfilesTimetrackingResponse>(getGetUsersIdProfilesTimetrackingUrl(id,params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type postUsersIdProfilesTimetrackingResponse200 = {
  data: TimeTrackingUserProfile
  status: 200
}
    
export type postUsersIdProfilesTimetrackingResponseComposite = postUsersIdProfilesTimetrackingResponse200;
    
export type postUsersIdProfilesTimetrackingResponse = postUsersIdProfilesTimetrackingResponseComposite & {
  headers: Headers;
}

export const getPostUsersIdProfilesTimetrackingUrl = (id: string,
    params?: PostUsersIdProfilesTimetrackingParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/users/${id}/profiles/timetracking?${stringifiedParams}` : `/users/${id}/profiles/timetracking`
}

export const postUsersIdProfilesTimetracking = async (id: string,
    timeTrackingUserProfile: NonReadonly<TimeTrackingUserProfile>,
    params?: PostUsersIdProfilesTimetrackingParams, options?: RequestInit): Promise<postUsersIdProfilesTimetrackingResponse> => {
  
  return customInstance<postUsersIdProfilesTimetrackingResponse>(getPostUsersIdProfilesTimetrackingUrl(id,params),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      timeTrackingUserProfile,)
  }
);}



export type getUsersIdSavedQueriesResponse200 = {
  data: SavedQuery[]
  status: 200
}
    
export type getUsersIdSavedQueriesResponseComposite = getUsersIdSavedQueriesResponse200;
    
export type getUsersIdSavedQueriesResponse = getUsersIdSavedQueriesResponseComposite & {
  headers: Headers;
}

export const getGetUsersIdSavedQueriesUrl = (id: string,
    params?: GetUsersIdSavedQueriesParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/users/${id}/savedQueries?${stringifiedParams}` : `/users/${id}/savedQueries`
}

export const getUsersIdSavedQueries = async (id: string,
    params?: GetUsersIdSavedQueriesParams, options?: RequestInit): Promise<getUsersIdSavedQueriesResponse> => {
  
  return customInstance<getUsersIdSavedQueriesResponse>(getGetUsersIdSavedQueriesUrl(id,params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type getUsersIdTagsResponse200 = {
  data: Tag[]
  status: 200
}
    
export type getUsersIdTagsResponseComposite = getUsersIdTagsResponse200;
    
export type getUsersIdTagsResponse = getUsersIdTagsResponseComposite & {
  headers: Headers;
}

export const getGetUsersIdTagsUrl = (id: string,
    params?: GetUsersIdTagsParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/users/${id}/tags?${stringifiedParams}` : `/users/${id}/tags`
}

export const getUsersIdTags = async (id: string,
    params?: GetUsersIdTagsParams, options?: RequestInit): Promise<getUsersIdTagsResponse> => {
  
  return customInstance<getUsersIdTagsResponse>(getGetUsersIdTagsUrl(id,params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type getUsersMeResponse200 = {
  data: Me
  status: 200
}
    
export type getUsersMeResponseComposite = getUsersMeResponse200;
    
export type getUsersMeResponse = getUsersMeResponseComposite & {
  headers: Headers;
}

export const getGetUsersMeUrl = (params?: GetUsersMeParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/users/me?${stringifiedParams}` : `/users/me`
}

export const getUsersMe = async (params?: GetUsersMeParams, options?: RequestInit): Promise<getUsersMeResponse> => {
  
  return customInstance<getUsersMeResponse>(getGetUsersMeUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type getWorkItemsResponse200 = {
  data: IssueWorkItem[]
  status: 200
}
    
export type getWorkItemsResponseComposite = getWorkItemsResponse200;
    
export type getWorkItemsResponse = getWorkItemsResponseComposite & {
  headers: Headers;
}

export const getGetWorkItemsUrl = (params?: GetWorkItemsParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/workItems?${stringifiedParams}` : `/workItems`
}

export const getWorkItems = async (params?: GetWorkItemsParams, options?: RequestInit): Promise<getWorkItemsResponse> => {
  
  return customInstance<getWorkItemsResponse>(getGetWorkItemsUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type getWorkItemsIdResponse200 = {
  data: IssueWorkItem
  status: 200
}
    
export type getWorkItemsIdResponseComposite = getWorkItemsIdResponse200;
    
export type getWorkItemsIdResponse = getWorkItemsIdResponseComposite & {
  headers: Headers;
}

export const getGetWorkItemsIdUrl = (id: string,
    params?: GetWorkItemsIdParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/workItems/${id}?${stringifiedParams}` : `/workItems/${id}`
}

export const getWorkItemsId = async (id: string,
    params?: GetWorkItemsIdParams, options?: RequestInit): Promise<getWorkItemsIdResponse> => {
  
  return customInstance<getWorkItemsIdResponse>(getGetWorkItemsIdUrl(id,params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



